<?php

/**
 * ScriptEiScriptVersionTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ScriptEiScriptVersionTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object ScriptEiScriptVersionTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('ScriptEiScriptVersion');
    }

    //Suppréssion des script-version pour une fonction
    public function deleteScriptVersion($id_function, $ref_function, Doctrine_Connection $conn = null) {


        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        $querybis = "SELECT s.id_script , s.ref_script 
                        FROM script_ei_script AS s
                        WHERE s.id_function =" . $id_function . " 
                        AND s.ref_function =" . $ref_function . "";
        $tmp_tab = $conn->fetchAll($querybis);

        if (count($tmp_tab) > 0) {
            foreach ($tmp_tab as $tmp) {
                $sql[] = "(" . $tmp["id_script"] . "," . $tmp["ref_script"] . ")";
            }
            $query2 = "delete FROM script_ei_script_version  WHERE
                     (id_script , ref_script ) IN (" . implode(",", $sql) . ")";
            $conn->execute($query2);
        }
    }

    //Insertion des données temporaires dans la table des versions de script
    public function insertTmpData($projets, $project_id, $project_ref, Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        //On vide la table temporaire avant toute opération  
        $conn->execute("TRUNCATE TABLE script_ei_script_version");
        $items = $projets->getElementsByTagName("ei_script_versions");
        if ($items->length != 0) {//ya t-il des éléments à traiter ? 
            $ei_script_versions = $items->item(0)->getElementsByTagName("ei_script_version");
            $values = "";
            if ($ei_script_versions->length != 0) {

                //Création de la collection d'objets à ajouter dans la table temporaire de paramètres 
                $stmt = $conn->prepare("INSERT INTO script_ei_script_version (script_id, profile_id, profile_ref,project_ref,project_id,num_version) "
                        . "VALUES (:script_id, :profile_id, :profile_ref,:project_ref,:project_id,:num_version) "
                        . "ON DUPLICATE KEY UPDATE script_id=script_id");
                //echo('ei_script_version_lenght'.$ei_script_versions->length).'\n'; $testVal="";
                foreach ($ei_script_versions as $key => $ei_script_version) {
                    //echo 'debut foreach';
                    $script_id = $ei_script_version->getAttribute("script_id");
                    $profile_id = $ei_script_version->getAttribute("profile_id");
                    $profile_ref = $ei_script_version->getAttribute("profile_ref");
                    //recherche du profil en base
                    if ($script_id != null && $profile_id != null && $profile_ref != null) {
                        //$conn->execute("INSERT INTO script_ei_script_version (script_id, profile_id, profile_ref,project_ref,project_id,num_version) VALUES (".$script_id.",".$profile_id.",".$profile_ref.",".$project_ref.",".$project_id.",".$ei_script_version->getElementsByTagName("num_version")->item(0)->nodeValue.") ON DUPLICATE KEY UPDATE script_id=script_id");
                        $stmt->bindValue("script_id", $script_id);
                        $stmt->bindValue("profile_id", $profile_id);
                        $stmt->bindValue("profile_ref", $profile_ref);
                        $stmt->bindValue("project_ref", $project_ref);
                        $stmt->bindValue("project_id", $project_id);
                        $stmt->bindValue("num_version", $ei_script_version->getElementsByTagName("num_version")->item(0)->nodeValue);

                        $stmt->execute(array());
                    }
                }
            }
        }

        return null;
    }

}
