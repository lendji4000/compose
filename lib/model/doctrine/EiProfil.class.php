<?php

/**
 * EiProfil
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    kalifast
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class EiProfil extends BaseEiProfil
{
    
    public function __toString()
  {

    return sprintf('%s', self::slugifyProfileName($this->getName()));
  }
  
  /* Le champ profile_name etant utilisé dans les urls , on le parse pour être à l'abri des éventuelles erreurs */
  public static function slugifyProfileName($string){
      //Replace non letter or digit by -
      $string =  preg_replace('~[^\\pL\d]+~u', '-', $string);
      //Trim
      $string =  trim($string);
      //transliterate
      if(function_exists('iconv')){
          $string=  iconv('utf-8', 'us-ascii//TRANSLIT',$string);
      }
      //lowercase
      $string=  strtolower($string);
      //Remove unwanted characters
      $string=  preg_replace('~[^-\w]+~','' ,$string);
      if(empty($string)) return  'n-a';
      return $string;
  }
  
     /**
     * Retourne le nom du profil raccourci.
     * @param int $size la taille totale de la chaine à retourner.
     * @return string
     * @throws InvalidArgumentException
     */
    public function getTroncatedName($size = 10) {
        if($size <= 0)
            throw new InvalidArgumentException('Invalid size value to troncate profile name. '. $size . ' is not a valid value.');
        
        if (strlen($this->getName()) > $size):
            return substr($this->getName(), 0, $size-3) . '...';
        else:
            return $this->getName();
        endif;
    }
  
  /**
   * Retourne l'identifiant de la version pour l'identifiant du scénario passé en paramètre.
   * 
   * @param type $ei_scenario_id
   * @return null or EiVersionId
   */
  public function getEiVersionId($ei_scenario_id){
      $link = Doctrine_Core::getTable('EiProfilScenario')->findOneByProfileIdAndEiScenarioId($this->getProfileId(), $ei_scenario_id);
      if($link) 
          return $link->getEiVersionId();
      else
          return null;
  }
  //Récupération du projet correspondant au profil
  public function getProject(){
      return Doctrine_Core::getTable('EiProjet')->findOneByProjectIdAndRefId($this->getProjectId(),$this->getProjectRef());
  }
  //Paramètres d'un  profil
  public function getParams(){
      return Doctrine_Core::getTable('EiProfileParam')->findByProfileIdAndProfileRef(
              $this->getProfileId(),$this->getProfileRef());
  }
  
  /* Recherche des paramètres de profil avec leur nom */
  public function getParamsWithName(EiUser $ei_user){
      $conn = Doctrine_Manager::connection();
        $q = "
         
         SELECT p1.*, p2.name ,upp.id as upp_id,upp.value as upp_value

         FROM  ei_profile_param p1
         LEFT JOIN ei_user_profile_param upp ON upp.profile_param_id=p1.id And upp.user_id=".$ei_user->getUserId()."
                 And upp.user_ref=".$ei_user->getRefId()."
         LEFT   JOIN ei_project_param p2
             ON p1.name = p2.param_id  
        
        WHERE
            p1.profile_id= " . $this->getProfileId() . "
        AND p1.profile_ref= " . $this->getProfileRef() . " 
            
        ";
        return $conn->fetchAll($q);
  }
  /* Récupération de l'itération courante */
  public function getCurrentIteration(){
      $actIt= Doctrine_Core::getTable('EiActiveIteration')->findOneByProjectIdAndProjectRefAndProfileIdAndProfileRef(
              $this->getProjectId(),$this->getProjectRef(),$this->getProfileId(),$this->getProfileRef());
      if($actIt!=null):
          return Doctrine_Core::getTable('EiIteration')->findOneById($actIt->getIterationId());
      endif;
      return null;
  }
}
