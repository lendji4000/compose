<?php

/**
 * EiProjetTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EiProjetTable extends Doctrine_Table {

    //variables de chargement d'un projet dépuis le système kalifast
            public $ref_id = null, $project_id = null, $name = null, $description = null, $state = null,
            $user_ref = null, $user_id = null , $created_at = null, $updated_at = null;

    public static function getInstance() {
        return Doctrine_Core::getTable('EiProjet');
    }

    public function downloadKalProjet($login, $request=null) { 
        $syst_domain = str_replace('.', '___', sfConfig::get('project_system_uri'));
        if ($login == null)   return null; 
        return ServicesWeb::loadResultOfWebService(MyFunction::getPrefixPath() . "serviceweb/" . $login . "/" . $syst_domain . "/listProjet.xml");
    }

    public function downloadKalFonctions($project_id, $project_ref, $request) {
        $syst_domain = str_replace('.', '___', sfConfig::get('project_system_uri'));
        return ServicesWeb::loadResultOfWebService(MyFunction::getPrefixPath() . "serviceweb/" .
                        $project_id . "/" . $project_ref . "/" . $syst_domain . "/listFonctions.xml");
    }

    public function getProjetsNonRecharges(array $projets) {
        $projetsObsolets = null;
        if (isset($projets)) {
            $notIn = '(project_id, ref_id) NOT IN (';
            foreach ($projets as $i => $p) {
                if (!isset($idList))
                    $idList = '(' . $p['project_id'] . ', ' . $p['project_ref'] . ')';
                else
                    $idList .= ', (' . $p['project_id'] . ', ' . $p['project_ref'] . ')';
            }
        }
        if (isset($idList)) {
            $notIn = $notIn . $idList . ')';
            $projetsObsolets = Doctrine_Query::create()->from('EiProjet ')->where($notIn)
                    ->execute();
        }

        return $projetsObsolets;
    }

    public function setObsoleteProjets(Doctrine_Collection $projets) {
        if (isset($projets)) {
            foreach ($projets as $p) {
                $p->setObsolete(true);
                $p->save();
            }
        }
    }

    //Transaction permettant de sécuriser le rechargement des projets
    
    public  function transactionToLoadProject($xmlfile, $id_guard){
        $conn = Doctrine_Manager::connection();
            try {
                $conn->beginTransaction();
                $ret =$this->ChargerProjets($xmlfile , $conn);
                $conn->commit();
                return $ret;
            } catch (Exception $e) {
                $conn->rollback();
                throw $e;
            }
    }
    
    //Rechargement éffectif des projets
    
    public function ChargerProjets($xmlfile , Doctrine_Connection $conn=null) {
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        //La date de mise a jour est récupérée avant le parcours des projets.
        //on s'assure qu'elle sera identique pour tous les projets (empeche le décallage d'une seconde dû à la longueur du traitement)
        $updateDate = date('Y-m-d H:i:s');
        $dom = new DomDocument();
        if ($xmlfile != null) {
            $dom->loadXML($xmlfile);
            $dom->save('projets.xml');/*A utiliser en cas de deboguage pour visualiser le contenu du fichier*/
            //recherche de l'element racine <projets>
            if ($dom->documentElement) {
                $projets = $dom->documentElement;
                // l'element racine est trouvé.Il existe au moins un projet à traiter
                $projet = $projets->getElementsByTagName("projet");
                if ($projet->length >0 ) { //s'il ya au moins une balise trouvé
                    $project_id = array();
                    foreach ($projet as $p) {
                        //rechargement des données du projet et sauvegarde de leur identifiant eifast
                        $project_id[] = MyFunction::rechargerProjet($p, false, $updateDate,$conn);
                    }
                    $projObso = $this->getProjetsNonRecharges($project_id);
                    if (isset($projObso))
                        $this->setObsoleteProjets($projObso);
                }
                else
                    throw new Exception('Aucun projet trouvé sur EiFast ! Vérifiez que vous l\'URL système spécifiée est bien <b>' . getenv('HTTP_HOST') . '</b>');

                if ($projets->getElementsByTagName("ei_users")->length > 0) {
                    Doctrine_Core::getTable('EiUser')->rechargerUser($projets->getElementsByTagName("ei_users")->item(0),$conn);
                }
                //Rechargement des guardUser
                if($projets->getElementsByTagName("guard_users")->length > 0){
                    Doctrine_Core::getTable('sfGuardUser')->reloadGuardUsers($projets->getElementsByTagName("guard_users")->item(0), $conn);
                }
                if ($projets->getElementsByTagName("users_projet")->length > 0) {
                    Doctrine_Core::getTable('EiProjectUser')->rechargerUserProjet($projets->getElementsByTagName("users_projet")->item(0) ,$conn);
                }
            }
        }
        return null;
    }

   

    public function initCharger() {
        
    }

    public function resetCharger() {
        $ref_id = null;
        $project_id = null;
        $name = null;
        $description = null;
        $state = null;
        $user_ref = null;
        $user_id = null; 
        $created_at = null;
        $updated_at = null;
    }

    /**
     * Retourne l'ensemble des scénarios d'un projet. Sous forme de requête.
     * @param type $project_id
     * @param type $project_ref
     * @return type
     */
    public function getEiScenariosQuery($project_id, $project_ref){
        return Doctrine_Core::getTable('EiScenario')
                 ->createQuery("scs")
                 ->where("scs.project_id = ?", $project_id)
                 ->andWhere("scs.project_ref = ?", $project_ref);
    }
    
    public function countEiScenario($project_id, $project_ref){
        $query = $this->getEiScenariosQuery($project_id, $project_ref)
                ->select("COUNT(DISTINCT scs.id) AS nb");
        
        $res = $query->fetchArray();
        
        return $res[0]['nb'];
    }
    
    //récupération des fonctions kalifast d'un projet
    public function getMyKalFunctions($projet) {
        if ($projet != null) { //si le projet est bien passé en paramètre
            $kal_fonctions = Doctrine_Query::create()->from('KalFonction kf')
                    ->where('kf.project_id =? And kf.project_ref=?', array($projet->project_id, $projet->ref_id))
            ;
        }
        if (isset($kal_fonctions) && $kal_fonctions->execute()->getFirst())
            return $kal_fonctions;
        return null;
    }

    public function findUserProjet( $id_guard) {
        if ($id_guard == null)
            return null;
        $ei_projets = Doctrine_Core::getTable('EiProjet')->createQuery('p')
                ->where('EiProjectUser.project_id=p.project_id And EiProjectUser.project_ref=p.ref_id')
                ->andWhere("EiUser.user_id=EiProjectUser.user_id And EiUser.ref_id=EiProjectUser.user_ref")
                        ->andWhere(' sfGuardUser.id=EiUser.guard_id And EiUser.guard_id='. $id_guard)
                ->execute();
        if (!$ei_projets->getFirst())
            return null;
        return $ei_projets;
    }
    /* Recherche de tous les projets d'un utilisateur. On retournera également le profil par défaut du projet et le profil utilisateur par défaut sur le projet  */ 
    
    public function findUserProjects(EiUser $ei_user, Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        $q="select p.* ,pr.profile_id as pr_profile_id ,pr.profile_ref as pr_profile_ref ,pr.name as pr_name,
            dppr.profile_id as up_profile_id ,dppr.profile_ref as up_profile_ref,dppr.name as up_name from ei_projet p
            inner join ei_project_user pu on pu.project_id =p.project_id and pu.project_ref=p.ref_id and pu.user_id=".$ei_user->getUserId()." and pu.user_ref=".$ei_user->getRefId()."
            left join ei_profil pr on p.project_id=pr.project_id and p.ref_id=pr.project_ref and is_default=1
            left join ei_user_default_profile dp on dp.project_id=p.project_id and dp.project_ref=p.ref_id and dp.user_id=".$ei_user->getUserId()." and dp.user_ref=".$ei_user->getRefId()."
            left join ei_profil dppr on dp.profile_id=dppr.profile_id and dp.profile_ref=dppr.profile_ref
        ";
        return $conn->fetchAll($q);
    }
    
/*
 * Gestion des Livraisons
 */
 //Création des statuts  (de livraison, de taches, de sujet  ) s'ils n'existent pas encore
    public function createDefaultStates($project_id, $project_ref,$conn){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        //Création des statuts de livraison
        Doctrine_Core::getTable('EiDeliveryState')
                ->createDefaultDeliveryStates($project_id, $project_ref,$conn);
        //Création des statuts de sujet
        Doctrine_Core::getTable('EiSubjectState')
                ->createDefaultSubjectStates($project_id, $project_ref,$conn);
        //Création des priorité de sujet par défaut
        Doctrine_Core::getTable('EiSubjectPriority')
                ->createDefaultSubjectPriorities($project_id, $project_ref,$conn);
        //Création des types  de sujet par défaut
        Doctrine_Core::getTable('EiSubjectType')
                ->createDefaultSubjectTypes($project_id, $project_ref,$conn);
        //Création des types  de message par défaut
        Doctrine_Core::getTable('EiSubjectMessageType')
                ->createDefaultMessageTypes($project_id, $project_ref,$conn);
        //Création des statuts de jeux de test
        Doctrine_Core::getTable('EiTestSet')
            ->createDefaultTestSetStates($project_id, $project_ref,$conn);
    }
    
 //Création des step type par défaut pour une campagne de tests
 public function createDefaultStepTypeCampaign($project_id,$project_ref, Doctrine_Connection $conn=null){
     if($conn==null) $conn = Doctrine_Manager::connection(); 
     Doctrine_Core::getTable('EiCampaignGraphType')->createDefaultCampaignStepType($project_id, $project_ref,$conn);
 }   
 //Pagination des livraisons   
 public function getPaginateDelivery($project_id, $project_ref, $first_entry,$max_delivery_per_page,$searchDeliveryCriteria,  Doctrine_Connection $conn=null ){
     
     if($conn==null) $conn = Doctrine_Manager::connection(); 
     //Récupération de la requête de base pour le listing des livraisons 
     $q= Doctrine_Core::getTable('EiDelivery')->getProjectDeliveries($project_id,$project_ref,$conn); 
     //Ajout des critères de tri
     $q=Doctrine_Core::getTable('EiDelivery')->sortDeliveriesByCriterias($q,$searchDeliveryCriteria);
      //Pagination des résultats
      return Doctrine_Core::getTable('EiDelivery')->paginateDeliveries($q , $first_entry,$max_delivery_per_page);
 }
 //Pagination des sujets d'un projet   
 public function paginateSubjects($project_id, $project_ref, $first_entry,$max_subject_per_page,$searchSubjectCriteria,  Doctrine_Connection $conn=null ){
     
     if($conn==null) $conn = Doctrine_Manager::connection(); 
     //Récupération de la requête de base pour le listing des sujets 
     $q= Doctrine_Core::getTable('EiSubject')->getProjectSubjects($project_id,$project_ref,$conn); 
     //Ajout des critères de tri
     $q=Doctrine_Core::getTable('EiSubject')->sortSubjectByCriterias($q,$searchSubjectCriteria);
      //Pagination des résultats
      return Doctrine_Core::getTable('EiSubject')->paginateSubjects($q , $first_entry,$max_subject_per_page);
 }
 
 //Pagination des campagnes de test d'un projet   
 public function paginateCampaigns($project_id, $project_ref, $first_entry,$max_campaign_per_page,$searchCampaignCriteria,  Doctrine_Connection $conn=null ){
     
     if($conn==null) $conn = Doctrine_Manager::connection(); 
     //Récupération de la requête de base pour le listing des sujets 
     $q= Doctrine_Core::getTable('EiCampaign')->getProjectCampaigns($project_id,$project_ref,$conn); 
     //Ajout des critères de tri
     $q=Doctrine_Core::getTable('EiCampaign')->sortCampaignByCriterias($q,$searchCampaignCriteria);
      //Pagination des résultats
      return Doctrine_Core::getTable('EiCampaign')->paginateCampaigns($q , $first_entry,$max_campaign_per_page);
 }
 
 /*Pagination des campagnes de test d'un projet.Liste des campagnes de tests d'un projet.
     * Ces campagnes ne sont ni dans les sujets , ni dans les livraisons
     */  
 public function paginateCampaignsList($project_id, $project_ref, $first_entry,$max_campaign_per_page,$searchCampaignCriteria,  Doctrine_Connection $conn=null ){
     
     if($conn==null) $conn = Doctrine_Manager::connection(); 
     //Récupération de la requête de base pour le listing des sujets 
     $q= Doctrine_Core::getTable('EiCampaign')->getProjectCampaignsList($project_id,$project_ref,null,$conn); 
     //Ajout des critères de tri
     $q=Doctrine_Core::getTable('EiCampaign')->sortCampaignByCriterias($q,$searchCampaignCriteria);
      //Pagination des résultats
      return Doctrine_Core::getTable('EiCampaign')->paginateCampaigns($q , $first_entry,$max_campaign_per_page);
 }
}
