<?php

/**
 * EiTestSet
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    kalifastRobot
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class EiTestSet extends BaseEiTestSet
{
    /** @var string */
    private $status_name;
    /** @var string */
    private $status_color;
    /** @var int en ms */
    private $duree;
    /** @var int */
    private $nbFct;
    /** @var int */
    private $nbFctExecutees;

    /**
     * @param string $status_name
     */
    public function setStatusName($status_name)
    {
        $this->status_name = $status_name;
    }

    /**
     * @return string
     */
    public function getStatusName()
    {
        return $this->status_name;
    }

    /**
     * @param string $status_color
     */
    public function setStatusColor($status_color)
    {
        $this->status_color = $status_color;
    }

    /**
     * @return string
     */
    public function getStatusColor()
    {
        return $this->status_color;
    }

    /**
     * @param int $nbFctExecutees
     */
    public function setNbFctExecutees($nbFctExecutees)
    {
        $this->nbFctExecutees = $nbFctExecutees;
    }

    /**
     * @return int
     */
    public function getNbFctExecutees()
    {
        return floatval($this->nbFctExecutees);
    }

    /**
     * @param int $nbFct
     */
    public function setNbFct($nbFct)
    {
        $this->nbFct = $nbFct;
    }

    /**
     * @return int
     */
    public function getNbFct()
    {
        return floatval($this->nbFct);
    }

    /**
     * @param int $duree
     */
    public function setDuree($duree)
    {
        $this->duree = $duree;
    }

    /**
     * @return int
     */
    public function getDuree()
    {
        return $this->duree;
    }

    /**
     * @param $xsl
     * @param $xml
     * @param int $realPosition
     * @param int $position
     * @param int $nbFonctions
     * @param EiIteration $iteration
     */
    public function generateFromXML(&$xsl, &$xml, $realPosition = 1, EiIteration $iteration = null)
    {
        $xml = str_replace("root", "Root", $xml);
        //interprétation du XML par le XSL
        $xslt = new XSLTProcessor();
        $xslt->importStylesheet(new SimpleXMLElement($xsl));
        $xslt->formatOutput = true;
        $testSetStr = $xslt->transformToXml(new SimpleXMLElement($xml));
        $testSetXML = new DOMDocument();
        $testSetXML->loadXML($testSetStr);
        $testSetXML->formatOutput = true;

//        var_dump($xml);exit;
//        var_dump($testSetXML->saveXML());
        
        $root = $testSetXML->documentElement;

        // Si première alimentation, on crée une instance de collection.
        if($this->getEiTestSetFunctions()->count() === 0){
            $functions = new Doctrine_Collection('EiTestSetFunction');
        }
        // Sinon, on charge la collection déjà définie.
        else{
            $functions = $this->getEiTestSetFunctions();
        }

        //traitement du XML généré par l'interprétation du XML.
        if ($root->hasChildNodes()) {

            // On récupère tous les xpaths.
            $xpaths = array();
            $xpathsF = array();
            $prev = null;
            $current = null;

            /** @var DOMElement $child */
            foreach( $root->childNodes as $child ){

                $xpath = $child->getAttribute("xpath");

                if( $prev == null || ($prev !== null && $xpath != $prev) ){
                    $prev = $xpath;
                    $current = $current === null ? 0:($current+1);

                    $xpaths[$current]["xpath"] = $xpath;
                    $xpaths[$current]["elements"] = array();
                    $xpaths[$current]["elements"][] = $child;
                }
                else{
                    $xpaths[$current]["elements"][] = $child;
                }
            }

            foreach( $xpaths as $xpath ){
                foreach( $xpath["elements"] as $key => $elt ){
                    $xpathsF[] = array(
                        "xpath" => $xpath,
                        "position" => $key
                    );
                }
            }

            $positionF = $realPosition;
            $position = 0;

            if( isset($xpathsF[$position]) && isset($xpathsF[$position]["xpath"]["elements"]) )
            {
                $elements = $xpathsF[$position]["xpath"]["elements"];

                /** @var DOMElement $child */
                foreach( $elements as $child ){
                    $line = new EiTestSetFunction();

                    $line->setEiTestSet($this);
                    $line->setEiIteration($iteration);
                    $line->generateFromXML($child, $positionF++, $iteration);
                    $functions->add($line);
                }
            }

            $this->setEiTestSetFunctions($functions);

            $this->save();
        }
    }

    /**
     * @param EiTestSetFunction $function
     * @param EiTestSetBlockStack $currentStack
     * @return EiTestSetBlockStack|null
     *
     * @created 18/08/2015
     * @updated 18/08/2015
     */
    public function getNextBlock(EiTestSetFunction $function = null, EiTestSetBlockStack $currentStack = null, Doctrine_Connection $conn = null)
    {
        $chrono = new Chronometre();
        $globalCh = $chrono->lancerChrono("GENERATION GLOBALE BLOCK SUIVANT", true);
        /** @var EiTestSetTable $tableJDT */
        $tableJDT = $this->getTable();
        // Création de l'instance de la table EiVersionStructure
        /** @var EiVersionStructureTable $tableVersionStr */
        $tableVersionStr = Doctrine_Core::getTable("EiVersionStructure");
        /** @var EiTestSetBlockStackTable $tableStack */
        $tableStack = Doctrine_Core::getTable("EiTestSetBlockStack");

        $parentStack = null;
        $stack = null;
        $nextBlock = null;
        $parentBlock = null;
        $position = 1;

        if( $currentStack != null )
        {
            $position = $currentStack->getPosition() + 1;
            // Récupération du block courant, c'est à dire celui de la dernière fonction exécutée.
            $currentBlock = $currentStack->getEiVersionStructure();
            $currentStackParent = $currentStack->getEiTestSetBlockStackParent();
            $loop = $currentBlock->isInEiLoop();
            $pVsId = $currentStackParent != null ? $currentStackParent->getEiVersionStructureId():null;
            $vsId = $currentBlock != null ? $currentBlock->getId():null;
            $finished = $currentStack->isFinished();

//            do{
                // Bloc courant complet, terminé et inclus dans une boucle.
                if( $currentStack->isComplete() && $finished && !is_bool($loop) && ($parentLoop = $currentStack->getCommonParent($loop)) && !$parentLoop->isFinished() ){
//                    var_dump("CAS NEXT 1 - Bloc courant complet, terminé et inclus dans une boucle non-terminée.");
                    $currentStack = $parentLoop;
                    $nextBlock = $currentStack->getEiVersionStructure();
                    $parentStack = $currentStack->getEiTestSetBlockStackParent();
                }
                elseif( $currentStack->isComplete() && $finished ){
                    if( $currentStackParent != null && $vsId != $pVsId && !$currentStackParent->isFinished() ){
//                        var_dump("CAS NEXT 2.1 - Bloc courant complet et terminé mais dont le père n'est pas terminé.");
                        $parentStack = $currentStackParent;
                        $nextBlock = $currentStackParent->getEiVersionStructure();
                    }
                    elseif( !is_bool($tmpParentStack = $currentStack->hasParentNotComplete()) ){
//                        var_dump("CAS NEXT 2.2 - Bloc courant complet, terminé et dont un parent n'est pas terminé.");
                        $parentStack = $tmpParentStack;
                        $nextBlock = $parentStack->getEiVersionStructure();
                    }
                    else{
//                        var_dump("CAS NEXT 2.3 - Bloc courant complet, terminé et dont le père est terminé.");
                        $nextBlock = null;
                    }
                }
                elseif( $currentStack->isComplete() || $currentStack->firstFragmentElementIsFunction() ){
//                    var_dump("CAS NEXT 3 - Bloc courant complet ou commençant par une fonction.");
                    $nextBlock = $currentBlock;
                    $parentStack = $currentStack;
                }
                else{
//                    var_dump("CAS NEXT 4 - Bloc courant complet ou ne commençant pas par une fonction.");
                    $nextBlock = $tableStack->getNextBlockFragments($currentStack, $currentStack->getPartIndex());
                    $parentStack = $currentStack;
                }
        }
        else{
//            var_dump("CAS NEXT 0 - Pas de stack courante au préalable.");
            $nextBlock = $tableVersionStr->getRootStructure($this->getEiScenarioId(), $this->getProfileRef(), $this->getProfileId());
        }

        $start = $chrono->lancerChrono("ADD TO STACK", true);
        $return = $nextBlock != null ? $tableStack->addToStack($this, $nextBlock, $currentStack, $parentStack, $position, $conn):null;
        $chrono->arreterEtAfficherChrono("ADD TO STACK",$start);

        $chrono->arreterEtAfficherChrono("GENERATION GLOBALE BLOCK SUIVANT",$globalCh);

        return $return;
    }

    /**
     * @param $xsl
     * @param $xml
     * @param int $position
     * @return EiTestSetBlockParam
     */
    public function getBlockAtPosition(&$xsl, &$xml, $position = 1)
    {
        /** @var EiTestSetBlockParam $blockSelected */
        $blockSelected = null;

        $xml = str_replace("root", "Root", $xml);
        //interprétation du XML par le XSL
        $xslt = new XSLTProcessor();
        $xslt->importStylesheet(new SimpleXMLElement($xsl));
        $testSetStr = $xslt->transformToXml(new SimpleXMLElement($xml));
        $testSetXML = new DOMDocument();
        $testSetXML->loadXML($testSetStr);
        $testSetXML->formatOutput = true;

        $root = $testSetXML->documentElement;

        //traitement du XML généré par l'interprétation du XML.
        if ($root->hasChildNodes()) {

            // On récupère tous les xpaths.
            $xpaths = array();
            $xpathsF = array();
            $prev = null;
            $current = null;

            // Récupération de tous les xpaths connus dans le document. En somme, identifier les différents blocks.
            /** @var DOMElement $child */
            foreach( $root->childNodes as $child ){

                $xpath = $child->getAttribute("xpath");

                if( $prev == null || ($prev !== null && $xpath != $prev) ){
                    $prev = $xpath;
                    $current = $current === null ? 0:($current+1);

                    $xpaths[$current]["xpath"] = $xpath;
                    $xpaths[$current]["elements"] = array();
                    $xpaths[$current]["elements"][] = $child;
                }
                else{
                    $xpaths[$current]["elements"][] = $child;
                }
            }

            // Pour chaque fonction, on associe le xpath parent.
            foreach( $xpaths as $xpath ){
                foreach( $xpath["elements"] as $key => $elt ){
                    $xpathsF[] = array(
                        "xpath" => $xpath,
                        "position" => $key
                    );
                }
            }

            // On décrément position car nos index commencent à 0.
            $position--;

            // S'il existe bien une fonction à la position demandée et que ce dernier possède
            if( isset($xpathsF[$position]) && isset($xpathsF[$position]["xpath"]["elements"]) )
            {
                $xpathsSelected = $xpathsF[$position]["xpath"]["xpath"];

                $blockSelected = EiTestSetBlockParamTable::getInstance()->findOneByPathAndEiTestSetId($xpathsSelected, $this->getId());
            }
        }

        return $blockSelected;
    }

    /**
     * @return string
     */
    public function generateBlockParametersXML()
    {
        /** @var EiTestSetBlockParamTable $tableTestSetBlockParam */
        $tableTestSetBlockParam = Doctrine_Core::getTable("EiTestSetBlockParam");

        $structures = $tableTestSetBlockParam->getTreeArrayForITree($this->getId());
        $treeViewer = new TreeViewer("EiTestSetBlockParam");
        $treeViewer->import($structures);

        return $treeViewer->generateXML();
    }

    /**
     * @param $dataStructureId
     */
    public function getFilteredEiTestSetDataSet($dataStructureId, $index = -1){
        /** @var EiTestSetDataSetTable $tableDs */
        $tableDs = Doctrine_Core::getTable("EiTestSetDataSet");
        $result = null;

        $logger = sfContext::getInstance()->getLogger();

        $logger->debug("------------------------------          FILTER TEST SET DATA SET          ------------------------------");
        $logger->debug("----- DS ID : " . $dataStructureId);
        $logger->debug("----- INDEX : " . $index);

        if( $index == -1 ) {
            $result = $tableDs->findByEiTestSetIdAndEiDataSetStructureId($this->getId(), $dataStructureId);
        }
        else{
            $q = $tableDs
                ->createQuery("tds")
                ->where("tds.ei_test_set_id = " . $this->getId())
                ->andWhere("tds.ei_data_set_structure_id = " . $dataStructureId)
                ->andWhere("(tds.type != ? AND tds.index_repetition = ?) OR (tds.type = ? AND tds.parent_index_repetition = ?)", array(
                    EiDataSetStructure::$TYPE_LEAF,
                    $index,
                    EiDataSetStructure::$TYPE_LEAF,
                    $index
                ))
            ;

            $result = $q->execute();
        }

        $logger->debug("---------------------------------------------------------------------------------------------------------");

        return $result;
    }

    /* Récupération de la notice du jeu de test (oracle du jeu de test ) */
    public function getTestSetOracle(EiProjet $ei_project,$lang,$function_id=null, $function_ref=null, $withLogF = true){
        /* $lang represente la langue de retour de l'oracle .
         * Le projet nous permet de renvoyer la notice de la langue par défaut 
         * si cette dernière n'est pas spécifiée pour la langue voulue.
         */
        if($lang==null) //Si la langue n'est pas spécifiée , on renvoie une exception  
            throw new Exception('language wasn\'t specified ...');
        
        $conn = Doctrine_Manager::connection();
        $conn->execute("SET SESSION group_concat_max_len = 60000;");
        $q="
         SELECT aa.* , 
                IFNULL( fn1.description, ( IFNULL( vn1.description, aa.description ) ) )  as final_desc, 
                IFNULL( fn1.expected, ( IFNULL( vn1.expected, aa.expected ) ) )           as final_expected,
                IFNULL( fn1.result, ( IFNULL( vn1.result, aa.result ) ) )                 as final_result 

         FROM 

        ( SELECT   t.* ,vn2.description as description, vn2.expected as expected, vn2.result as result, s.ei_fonction_id, s.xpath, s.position ,s.function_id, s.function_ref,
              n2.notice_ref, n2.notice_id , np.version_notice_id as version_notice_id, s.id as ei_test_set_function_id, kf.name as function_name, tss.name as statut_func_name,
              tss.color_code as statut_func_color, f.description as func_desc, sel_logs.message as sel_logs
          FROM  ei_test_set t,  ei_notice n2 ,ei_version_notice vn2,  ei_notice_profil np, ei_tree kf, ei_test_set_state tss, ei_fonction f, ".($withLogF ? 'ei_log_function elf,':'')."  ei_test_set_function s
          LEFT JOIN(
            SELECT ei_test_set_function_id as id, group_concat(concat( message ) SEPARATOR '///') as message
            FROM ei_log_function_selenium
            WHERE ei_test_set_id = ".$this->getId()."
            GROUP BY ei_test_set_function_id
          ) sel_logs ON sel_logs.id = s.id

          WHERE  t.id=s.ei_test_set_id And s.ei_test_set_id =".$this->getId()."
              
          AND vn2.lang ='".$ei_project->getDefaultNoticeLang()."'  
          AND n2.function_id = s.function_id
          AND n2.function_ref = s.function_ref";
        if(isset($function_id) && isset($function_ref)):
            $q.=" And n2.function_id=".$function_id." And n2.function_ref=".$function_ref." And s.function_id=".$function_id." And s.function_ref=".$function_ref;
        endif; 
        $q.=" 
          AND n2.notice_id = vn2.notice_id
          AND n2.notice_ref = vn2.notice_ref

	      AND f.id = s.ei_fonction_id

		  AND kf.obj_id = s.function_id
		  AND kf.ref_obj = s.function_ref";
        if(isset($function_id) && isset($function_ref)):
            $q.=" And kf.obj_id=".$function_id." And kf.ref_obj=".$function_ref;
        endif; 
        $q.=" 
		  AND kf.type='Function'
		  ".($withLogF ? 'AND elf.ei_test_set_function_id = s.id':'')."

		  AND tss.project_id = kf.project_id
		  AND tss.project_ref = kf.project_ref
	      AND tss.state_code = (
			CASE
		    WHEN s.status ='NA' > 0 THEN 'AB'
		    WHEN (s.status ='processing' > 0 OR s.status ='blank') AND t.termine = 0 THEN 'NA'
		    WHEN s.status ='blank' > 0 OR (s.status ='processing' > 0 AND t.termine = 1) THEN 'AB'
            WHEN s.status ='ko' > 0 THEN 'KO'
            WHEN s.status ='ok' > 0 THEN 'OK'
		    END
		  )
          
          AND  np.notice_id=vn2.notice_id
          AND  np.notice_ref=vn2.notice_ref
          AND  np.version_notice_id=vn2.version_notice_id
          AND t.profile_id =np.profile_id 
          AND t.profile_ref =np.profile_ref ) aa
 
        LEFT OUTER JOIN ei_function_notice fn1 
        ON fn1.ei_fonction_id = aa.ei_fonction_id
        AND fn1.lang = '".$lang."'

        LEFT OUTER JOIN ei_version_notice vn1 
        ON  aa.notice_id = vn1.notice_id  
        AND aa.notice_ref = vn1.notice_ref 
        AND vn1.lang = '".$lang."' 
        AND vn1.version_notice_id = aa.version_notice_id


       ORDER BY aa.position ";

        return $conn->fetchAll($q);
    }
    
    /* Récupération du profil utilisé pour un jeu de test */
    public function getProfile(){
        return Doctrine_Core::getTable('EiProfil')->findOneByProfileIdAndProfileRef(
                $this->getProfileId(),$this->getProfileRef());
    }

    /**
     * @return EiProjet
     */
    public function getProject(){
        return Doctrine_Core::getTable('EiProjet')->findOneByProfileIdAndProfileRef(
            $this->getProjectId(),$this->getProjectRef());
    }

    /* Récupération du scénario du jeu de test  */
    public function getScenario(){
        return Doctrine_Core::getTable('EiScenario')->findOneByEiScenarioId(
                $this->getEiScenarioId());
    }
    /* Récupération des paramètres d'un jeu de test */
    public function getTestSetParam(){
        return Doctrine_Core::getTable('EiTestSetParam')->getTestSetParam($this);
    }

    public function getFromScenarioAndProfil(){

    }

    /**
     * Retourne la fonction d'un jeu de test à la position demandée. Si cette dernière n'existe pas, on retourne
     * null.
     *
     * @param int $position
     * @return EiTestSetFunction|null
     */
    public function getFunctionAt($position = 1){

        $function = -1;

        if( preg_match("/^([0-9]+)$/", $position) ){

            $function = null;

            /** @var EiTestSetFunction $func */
            foreach( $this->getEiTestSetFunctions() as $func ){
                if( $position === $func->getPosition() ){
                    $function = $func;
                }
            }
        }

        return $function;
    }

    public function getStructureParams()
    {
        try{
            // Création de la requête qui récupère la structure du scénario.
            $queryStructure = "
                SELECT ep.*, ve.ei_version_structure_parent_id, ve.name, ve.id as ei_version_structure_id
                FROM ei_log_param ep, ei_log_function ef, ei_fonction fu, ei_version_structure ve
                WHERE ep.ei_test_set_id = ".$this->getId()."
                AND ep.ei_log_function_id = ef.id
                AND ef.ei_fonction_id = fu.id
                AND fu.ei_version_structure_id = ve.id
            ";


            // Récupération des fonctions du jeu de test.
//            $fonctions = Doctrine_Core::getTable("EiTestSetFunction")->findBy("ei_test_set_id", $this->getId());

            $fonctions = Doctrine_Manager::connection()->fetchAll($queryStructure);
        }
        catch( Exception $e ){
            $fonctions = null;
//            var_dump($e->getMessage());
        }

        return $fonctions;

    }

    /**
     *
     */
    public function generateTestSetDataSet()
    {
        $generator = new TestSetDataSetGenerator($this);

        $generator->generateDataSet();
    }

    public function generateTestSetDataSetXML()
    {
        // Récupération du Root.
        /** @var EiTestSetDataSet $root */
        $root = $this->getEiTestSetDataSet()->get(0);

        // Création du document XML.
        $documentXml = new DOMDocument("1.0", "UTF-8");

        // Génération de la structure.
        $root->generateXML($documentXml, $documentXml);

        return $documentXml->saveXML();
    }

    public function isDataSetModified()
    {
        return Doctrine_Core::getTable("EiTestSetDataSet")->checkIfDataSetModified($this->getId());
    }

    public function updateTestSetBlockParamsFromJdd()
    {
        return Doctrine_Core::getTable("EiTestSetDataSet")->updateTestSetBlockInParams($this->getId());
    }

    /**
     * @param bool $forceAborted
     */
    public function finish($forceAborted = false)
    {
        /** @var EiTestSetTable $table */
        $table = $this->getTable();
        $logger = sfContext::getInstance()->getLogger();

        // On clos le jeu de test.
        $this->termine = true;

        // Puis on calcule le statut.
        $statut = $forceAborted === true ? "AB":$table->calculerStatutTestSet($this->id);
        $logger->info("------------------- STATUT SCENARIO : " . $statut);

        $this->status = $statut;

        $this->save();

    }

    public function getRealMode(){

        if( EiTestSetModeConst::MODE_AUTO_PLAY == $this->getMode() ){
            return "Play";
        }
        elseif( EiTestSetModeConst::MODE_STEP_BY_STEP == $this->getMode() ){
            return "Step By Step";
        }

        return $this->getMode();
    }

    /**
     * @param $mode
     */
    public function setModeByIde($mode)
    {
        $mode = strtolower($mode);

        if( $mode == "debug" ){
            $this->setMode(EiTestSetModeConst::MODE_STEP_BY_STEP);
        }
        elseif( $mode == "record" ){
            $this->setMode(EiTestSetModeConst::MODE_RECORD);
        }
        elseif( $mode == "campaign" ){
            $this->setMode(EiTestSetModeConst::MODE_CAMPAGNE);
        }
        else{
            $this->setMode(EiTestSetModeConst::MODE_AUTO_PLAY);
        }
    }
    
    /**
     * Permet d'afficher le device et browser dans la colonne correspondante au niveau reporting et oracle
     * correspondants à l'exécution courante (càd au ei_test_set courant)
     */
    public function displayDeviceBrowserData(){
        $executionStack = Doctrine_Core::getTable("EiExecutionStack")->findOneBy("ei_test_set_id", $this->getId());
        if($executionStack != null)
        {
            /*  L'exécution a été effectué sur un device */
            $deviceId = $executionStack->getDeviceId();
            $driver_id = $executionStack->getDriverId();
            $browser_id = $executionStack->getBrowserId();
            
            if($deviceId != null)
                {
                $deviceUser = Doctrine_Core::getTable("EiDeviceUser")->findOneBy("device_id", $deviceId);
                $device = Doctrine_Core::getTable("EiDevice")->findOneBy("id", $deviceId);
                $deviceType = $device->getEiDeviceType();
                ?>
                <img src="<?php echo sfConfig::get($deviceType['logo_path']); ?>" width="24" height="24" />&nbsp;
                <?php echo $deviceUser['name']?>
                <?php
                }
                ?>
                <?php
                if (null!=$driver_id)
                {
                    $driver = Doctrine_Core::getTable("EiDriverType")->findOneBy("id", $driver_id);
                    $browser = Doctrine_Core::getTable("EiBrowserType")->findOneBy("id", $browser_id);
                    if($driver['hidden_name'] == 'selenium_ide')
                    {
                        ?>
                        <img class="driverBrowserLogo" src="<?php echo sfConfig::get($driver['logo_path']); ?>" width="24" height="24" />&nbsp;
                        <?php
                    }
                    else
                    {
                        ?>
                        <img class="driverBrowserLogo" src="<?php echo sfConfig::get($browser['logo_path']); ?>" width="24" height="24" />&nbsp;
                        <?php
                    }
                }
        }
        else
        {
            /*  L'exécution a été effectué sur un selenium IDE Local */
            ?>
                <img class="driverBrowserLogo" src="<?php echo DevicesConst::getImgPath(DevicesConst::SELENIUM_IDE); ?>" class="btnSwitchDevice" for="<?php echo DevicesConst::SELENIUM_IDE; ?>" width="24" height="24">
                Selenium IDE
            <?php
        }
    }
}
