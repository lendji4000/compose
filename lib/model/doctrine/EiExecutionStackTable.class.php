<?php

/**
 * EiExecutionStackTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EiExecutionStackTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object EiExecutionStackTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('EiExecutionStack');
    }

    /**
     * @param $user_id
     */
    public function updateStackStatus($user_id){
        $sql = "
        UPDATE ei_execution_stack es
        SET status =
        CASE
        WHEN ei_test_set_id IS NOT NULL THEN
          (SELECT
            CASE WHEN status_nom = '".StatusConst::STATUS_TEST_KO_DB."' THEN
            '".StatusConst::STATUS_KO_DB."'
            WHEN status_nom = '".StatusConst::STATUS_TEST_OK_DB."' Then
            '".StatusConst::STATUS_OK_DB."'
            ELSE '".StatusConst::STATUS_ABORTED_DB."'
            END
            FROM ei_test_set_status_vw ts WHERE ts.id = es.ei_test_set_id)
        WHEN ei_campaign_execution_id IS NOT NULL THEN
          (SELECT
            CASE WHEN status_nom = '".StatusConst::STATUS_TEST_KO_DB."' THEN
            '".StatusConst::STATUS_KO_DB."'
            WHEN status_nom = '".StatusConst::STATUS_TEST_OK_DB."' Then
            '".StatusConst::STATUS_OK_DB."'
            ELSE '".StatusConst::STATUS_ABORTED_DB."'
            END
            FROM ei_campaign_status_vw cs WHERE cs.id = es.ei_campaign_execution_id)
        ELSE status
        END
        WHERE status = '".StatusConst::STATUS_ABORTED_DB."'
        AND user_id = ".$user_id.";

        UPDATE ei_execution_stack
        SET status = '".StatusConst::STATUS_ABORTED_DB."'
        WHERE status = '".StatusConst::STATUS_PROCESSING_DB."'
        AND ei_test_set_id IS NULL
        AND ei_campaign_execution_id IS NULL
        AND updated_at < (NOW()-INTERVAL 30 MINUTE);

        UPDATE ei_execution_stack es
        SET status =
          (SELECT
            CASE WHEN status_nom = '".StatusConst::STATUS_TEST_KO_DB."' THEN
            '".StatusConst::STATUS_KO_DB."'
            WHEN status_nom = '".StatusConst::STATUS_TEST_OK_DB."' Then
            '".StatusConst::STATUS_OK_DB."'
            ELSE '".StatusConst::STATUS_ABORTED_DB."'
            END
            FROM ei_campaign_status_vw cs WHERE cs.id = es.ei_campaign_execution_id)
        WHERE status = '".StatusConst::STATUS_PROCESSING_DB."'
        AND ei_campaign_execution_id IS NOT NULL
        AND (SELECT termine FROM ei_campaign_execution ce WHERE ce.id = es.ei_campaign_execution_id) =;
        ";

        try{
            $conn = Doctrine_Manager::connection();

            $conn->execute($sql);
        }
        catch( Exception $exc ){
            // Nothing to do.
        }
    }

    /**
     * @param $execution_id
     */
    public function updateState($execution_id){
        /** @var EiExecutionStack $element */
        $element = $this->findOneByEiCampaignExecutionId($execution_id);

        if( $element != null && $element->getId() != "" ){
            /** @var EiCampaignExecution $execution */
            $execution = Doctrine_Core::getTable("EiCampaignExecution")->findExecution($execution_id, true);
            $element->setStatus(StatusConst::getDbStatusFromExecutionStatus($execution->getStatusName()));
            $element->save();
        }
    }

    /**
     * Permet de rechercher la première tâche qui doit être lancée sur un device spécifique
     * @param type $device_id
     * @return type
     */
    public function getFirstElementToExecuteForDevice($device_id){
        $query = $this->createQuery("q");

        $query
            ->andWhere("q.status = ?", StatusConst::STATUS_NA_DB)
            ->andWhere("q.device_id = ?", $device_id)
            ->andWhere("NOW() > q.expected_date")
            ->orderBy("id ASC")
            ->limit(1)
        ;

        return $query->fetchOne();
    }

    /**
     * Permet de rechercher la première tâche disponible sur un couple device / browser supporté par le device
     * @param type $driver_id
     * @param type $browser_id
     * @return type
     */
    public function getFirstElementToExecuteForDriversAndBrowsers($driver_id, $browser_id, $device_id){
        $device_user = Doctrine_Core::getTable("EiDeviceUser")->findOneBy('device_id', $device_id);
        if($device_user != null)
        {
            $owner = $device_user->getOwner();
            $visibility = $device_user->getDeviceUserVisibilityId();

            $query = $this->createQuery("q");
            if($visibility == '1')
            {
                $query
                    ->andWhere("q.status = ?", StatusConst::STATUS_NA_DB)
                    ->andWhere("q.driver_id = ?", $driver_id)
                    ->andWhere("q.browser_id = ?", $browser_id)
                    ->andWhere("q.device_id is null")
                    ->andWhere("NOW() > q.expected_date")
                    ->orderBy("id ASC")
                    ->limit(1)
                ;
            }
            else if($visibility == '2')
            {
                $query
                    ->andWhere("q.status = ?", StatusConst::STATUS_NA_DB)
                    ->andWhere("q.driver_id = ?", $driver_id)
                    ->andWhere("q.browser_id = ?", $browser_id)
                    ->andWhere("q.user_id = ?", $owner)
                    ->andWhere("q.device_id is null")
                    ->andWhere("NOW() > q.expected_date")
                    ->orderBy("id ASC")
                    ->limit(1)
                ;
            }
            return $query->fetchOne();
        }
        else
        {
            return null;
        }
    }
    
    /**
     * Permet de mettre les anciennes exécutions "processing" en "aborted" sur le device sur lequel une nouvelle tâche va être lancée
     * @param type $device_id
     */
    public function abortPreviousProcessingExecutions($device_id)
    {
        $q = Doctrine_Core::getTable("EiExecutionStack")
            ->createQuery()
            ->update();
        $q->set("status", '?', array(StatusConst::STATUS_ABORTED_DB));
        $q->where("device_id = ? AND status = ?", array($device_id, StatusConst::STATUS_PROCESSING_DB));
        $q->execute();
    }
    
    public function updateDeviceId($rowId, $device_id)
    {
        $q = Doctrine_Core::getTable("EiExecutionStack")
            ->createQuery()
            ->update();
        $q->set("device_id", '?', array($device_id));
        $q->where("id = ?", array($rowId));
        $q->execute();
    }
    
    /**
     * @param $userId
     */
    public function getUserList($userId){

        $this->updateStackStatus($userId);

        $query = $this->createQuery("q");

        $query
            ->andWhere("q.user_id = ?", $userId)
            ->orderBy("id DESC")
        ;

        return $query->execute();
    }

    /**
     * @param $scenarioId
     * @param $dataSetId
     * @param $profileRef
     * @param $profileId
     * @param $projectRef
     * @param $projectId
     * @param $userId
     */
    public function search($scenarioId, $dataSetId, $profileRef, $profileId, $projectRef, $projectId, $userId){
        $query = $this->createQuery("q");

        $query
            ->andWhere("q.status = ?", StatusConst::STATUS_PROCESSING_DB)
            ->andWhere("q.ei_scenario_id = ?", $scenarioId)
            ->andWhere("q.profile_ref = ?", $profileRef)
            ->andWhere("q.profile_id = ?", $profileId)
            ->andWhere("q.project_ref = ?", $projectRef)
            ->andWhere("q.project_id = ?", $projectId)
            ->andWhere("q.user_id = ?", $userId)
            ->andWhere("q.updated_at > (NOW() - INTERVAL 10 MINUTE)")
            ->orderBy("q.id DESC")
            ->limit(1)
        ;

        if( $dataSetId != null ){
            $query->andWhere("q.ei_data_set_id = ?", $dataSetId);
        }

        return $query->fetchOne();
    }
}