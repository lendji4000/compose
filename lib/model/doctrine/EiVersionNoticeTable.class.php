<?php

/**
 * EiVersionNoticeTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EiVersionNoticeTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object EiVersionNoticeTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('EiVersionNotice');
    }
    //Recherche de la version de notice correspondant à un profil et une langue donnée
    public function findNoticeVersionForProfile(EiProfil $kal_profil,EiFonction $ei_fonction, $lang){
        if($lang ==null) return null;
        return $this->getInstance()->createQuery('vn') 
                ->Where('EiNoticeProfil.notice_id=vn.notice_id And EiNoticeProfil.notice_ref=vn.notice_ref And EiNoticeProfil.version_notice_id=vn.version_notice_id')
                ->AndWhere('EiNotice.notice_id=EiNoticeProfil.notice_id And EiNotice.notice_ref=EiNoticeProfil.notice_ref')
                ->AndWhere('KalFunction.function_id=EiNotice.function_id And KalFunction.function_ref=EiNotice.function_ref')
                ->AndWhere('EiProfil.profile_id=EiNoticeProfil.profile_id And EiProfil.profile_ref=EiNoticeProfil.profile_ref') 
                ->andWhere('EiProfil.profile_id=? And EiProfil.profile_ref=? And vn.lang=?', 
                        array($kal_profil->getProfileId(), $kal_profil->getProfileRef(), $lang))
                ->andWhere('KalFunction.function_id =? And KalFunction.function_ref=?',
                        array($ei_fonction->getFunctionId(), $ei_fonction->getFunctionRef()))
                ->execute(); 
    }

    //Rechargement des éléments de type EiVersionNotice pour un projet 
    public function reload($projets,$project_id, $project_ref,Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();

        //Création de la collection d'objet EiVersionNotice à ajouter
        $collection = new Doctrine_Collection("EiVersionNotice");
        //Supression des versions de notice qui n'existent plus sur script
        $this->deleteNotFoundVersionNotice($conn);
        
        $items = $projets->getElementsByTagName("ei_version_notices");
        if ($items->length > 0) {//ya t-il des éléments à traiter?
            $ei_version_notices = $items->item(0)->getElementsByTagName("ei_version_notice");


            if($ei_version_notices->length > 0){
                foreach ($ei_version_notices as $ei_version_notice) {

                    $notice_id = $ei_version_notice->getAttribute("notice_id");
                    $notice_ref = $ei_version_notice->getAttribute("notice_ref");
                    $version_notice_id = $ei_version_notice->getAttribute("version_notice_id");
                    $lang = $ei_version_notice->getAttribute("lang");
                    //recherche du profil en base
                    if ($notice_id != null && $notice_ref != null && $version_notice_id != null && $lang != null) {
                        $q = Doctrine_Core::getTable('EiVersionNotice')->findOneByNoticeIdAndNoticeRefAndVersionNoticeIdAndLang(
                                $notice_id, $notice_ref, $version_notice_id, $lang);

                        if ($q && $q != null) {//si l'element existe , on fait une mise à jour 
                            $q->setName($ei_version_notice->getElementsByTagName("name")->item(0)->nodeValue);
                            $q->setDescription($ei_version_notice->getElementsByTagName("description")->item(0)->nodeValue);
                            $q->setExpected($ei_version_notice->getElementsByTagName("expected")->item(0)->nodeValue);
                            $q->setResult($ei_version_notice->getElementsByTagName("result")->item(0)->nodeValue);
                            $q->setIsActive($ei_version_notice->getElementsByTagName("is_active")->item(0)->nodeValue);
                            $q->save($conn);
                        } else {//l'élément n'existe pas encore, et dans ce cas on le crée
                            $new_ei_version_notice = new EiVersionNotice();

                            $new_ei_version_notice->setNoticeId($notice_id);
                            $new_ei_version_notice->setNoticeRef($notice_ref);
                            $new_ei_version_notice->setVersionNoticeId($version_notice_id);
                            $new_ei_version_notice->setLang($lang);
                            $new_ei_version_notice->setDescription($ei_version_notice->getElementsByTagName("description")->item(0)->nodeValue);
                            $new_ei_version_notice->setExpected($ei_version_notice->getElementsByTagName("expected")->item(0)->nodeValue);
                            $new_ei_version_notice->setResult($ei_version_notice->getElementsByTagName("result")->item(0)->nodeValue);

                            $new_ei_version_notice->setName($ei_version_notice->getElementsByTagName("name")->item(0)->nodeValue);
                            $new_ei_version_notice->setIsActive($ei_version_notice->getElementsByTagName("is_active")->item(0)->nodeValue);
                            $collection->add($new_ei_version_notice);
                        }
                    }
                }
                if ($collection->getFirst())
                    $collection->save($conn); //Sauvegarde de la collection
                return 1;
            }
            return null;
        }
    }

    //Suppression des relations notice-profil inexistantes sur la plate forme de rédaction des scripts (script.kalifast.com)
    public function deleteNotFoundVersionNotice( Doctrine_Connection $conn=null){
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        $q="
            delete FROM `ei_version_notice` 
            WHERE 
             (version_notice_id , notice_id , notice_ref ,lang) 
             Not In 
             ( select  version_notice_id , notice_id , notice_ref ,lang
               from script_ei_version_notice where 1)
            And 

            (notice_id , notice_ref) 
             In 
            (SELECT notice_id , notice_ref  from script_ei_notice where 1 ) ";
        $conn->execute($q);
    }
    
    public function insertJsonFunction($arraytab, Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        //Si l'id du noeud ou du projet n'est pas renseigné 
        if (!isset($arraytab['n_id']) || !isset($arraytab['n_ref']) || !isset($arraytab['f_id']) || !isset($arraytab['f_ref']))
            return null;
        $stmt = $conn->prepare("INSERT INTO ei_version_notice (version_notice_id,notice_id, notice_ref,lang, name,description,expected,result,is_active,created_at,updated_at) "
                . "VALUES (:version_notice_id,:notice_id, :notice_ref,:lang, :name,:description,:expected,:result,:is_active,:created_at,:updated_at) "
                . "ON DUPLICATE KEY UPDATE version_notice_id=version_notice_id,notice_id=notice_id,notice_ref=notice_ref,lang=lang ,name=:name,description=:description,is_active=:is_active,expected=:expected,result=:result,created_at=:created_at,updated_at=:updated_at");

        $stmt->bindValue("version_notice_id", $arraytab['vn_id']);
        $stmt->bindValue("lang", $arraytab['vn_lang']);
        $stmt->bindValue("notice_id", $arraytab['n_id']);
        $stmt->bindValue("notice_ref", $arraytab['n_ref']);
        $stmt->bindValue("name", $arraytab['vn_name']);
        $stmt->bindValue("description", $arraytab['vn_desc']);
        $stmt->bindValue("expected", $arraytab['vn_exp']);
        $stmt->bindValue("result", $arraytab['vn_res']);
        $stmt->bindValue("is_active", $arraytab['vn_act']);
        $stmt->bindValue("created_at", $arraytab['vn_creat']);
        $stmt->bindValue("updated_at", $arraytab['vn_updat']);
        $stmt->execute(array());
        return 1;
    }

    /* Récupération de le version de notice pour le profil courant et pour la langue projet par défaut */
   public function getCurrentNoticeVersion(EiProjet $ei_project, EiProfil $ei_profile, KalFunction $kal_function , Doctrine_Connection $conn = null){
       if ($conn == null)
            $conn = Doctrine_Manager::connection();
       $q= $conn->fetchAll("select vn.*, np.* from ei_version_notice vn 
            left join ei_notice n on n.notice_id=vn.notice_id and n.notice_ref=vn.notice_ref 
            left join kal_function k on k.function_id=n.function_id and k.function_ref= n.function_ref
            left join ei_notice_profil np on vn.notice_id=np.notice_id and np.notice_ref=vn.notice_ref and np.version_notice_id=vn.version_notice_id 

            where k.function_id=".$kal_function->getFunctionId()." and k.function_ref=".$kal_function->getFunctionRef()."
            and np.profile_id=".$ei_profile->getProfileId()." and np.profile_ref=".$ei_profile->getProfileRef()." and vn.lang='".$ei_project->getDefaultNoticeLang()."'");
       if(count($q)>0):
           return $q[0];
       endif;
       return array();
   }
   
   /* Récupération des différentes versions de notice d'une fonction */
   public function getNoticeVersionsForDropdownList(KalFunction $kal_function , Doctrine_Connection $conn = null){
       if ($conn == null)
            $conn = Doctrine_Manager::connection();
       return $conn->fetchAll("select vn.version_notice_id , vn.notice_id,vn.notice_ref,vn.lang,vn.name ,k.function_id,k.function_ref from ei_version_notice vn 
            left join ei_notice n on n.notice_id=vn.notice_id and n.notice_ref=vn.notice_ref 
            left join kal_function k on k.function_id=n.function_id and k.function_ref= n.function_ref 

            where k.function_id=".$kal_function->getFunctionId()." and k.function_ref=".$kal_function->getFunctionRef()." 
            group by vn.version_notice_id,vn.notice_id,vn.notice_ref");
   }
   /* Récupération des profils actifs sur une version de notice */
   public function getActiveProfilesForVersion(Eiprojet $ei_project,  KalFunction $kal_function,$vn_id,$notice_id,$notice_ref, Doctrine_Connection $conn = null){
       if ($conn == null)
            $conn = Doctrine_Manager::connection();
       return $conn->fetchAll(" select pr.*,np1.version_notice_id from  
            (select * from ei_profil p where p.project_id=".$ei_project->getProjectId()." and p.project_ref=".$ei_project->getRefId().") as pr
            left join 
            (select np.profile_id , np.profile_ref , vn.version_notice_id ,vn.name from ei_notice_profil np  
            inner join (select * from ei_version_notice where version_notice_id=".$vn_id." and notice_id=".$notice_id." and notice_ref=".$notice_ref." group by version_notice_id,notice_id,notice_ref ) vn  on vn.version_notice_id=np.version_notice_id and vn.notice_id=np.notice_id and vn.notice_ref=np.notice_ref 
            inner join ei_notice n on n.notice_id=vn.notice_id and n.notice_ref=vn.notice_ref and n.function_id=".$kal_function->getFunctionId()." and n.function_ref=".$kal_function->getFunctionRef()."  
            ) as np1

            on pr.profile_id=np1.profile_id and pr.profile_ref=np1.profile_ref");
   }
}