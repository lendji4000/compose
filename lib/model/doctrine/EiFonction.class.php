<?php

/**
 * EiFonction
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    kalifast
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class EiFonction extends BaseEiFonction {

    protected $subjectFunctions ;
    protected function getSubjectFunctions(){ 
        return $this->subjectFunctions;
    }
    protected function setSubjectFunctions($subjectFunctions){
        if(count($subjectFunctions)>0): $this->subjectFunctions=$subjectFunctions;
        else : $this->subjectFunctions=array();
        endif;
    }
    
    public function __toString() {
        /* Si le noeud n'existe pas , alors la fonction a probablement été supprimée  sur script et conséquemment on la supprime */
        if ($this->getNodeTree() == null)
            return '';
        return $this->getNodeTree()->getName();
    }
    /*
     * Récupération d'un script à partir du profil souhaité
     */
    public function getFunctionsScriptForProfile(EiProfil $ei_profile=null){
        $kal_function=$this->getKalFonction();
        if($kal_function ==null || $ei_profile==null) return null;
        return Doctrine_Core::getTable('EiScript')->getScriptObjectForProfile($kal_function, $ei_profile); 
    }
    public function getCmdsForProfile(EiProfil $ei_profile=null){ 
        $ei_script=$this->getFunctionsScriptForProfile($ei_profile) ;
        if($ei_script==null)          return null; 
        return $ei_script->getCmds(); 
    }
    public function getKalFonction() {
        return Doctrine_Core::getTable('KalFunction')->findOneByFunctionIdAndFunctionRef($this->getFunctionId(), $this->getFunctionRef());
    }

    public function getNodeTree() {
        return Doctrine_Core::getTable('EiTree')->findOneByObjIdAndRefObjAndType($this->getFunctionId(), $this->getFunctionRef(), 'Function');
    }

    public function getKalParams() {
        return Doctrine_Core::getTable("EiParam")->createQuery('p')
                        ->leftJoin('p.EiFunctionHasParam kp')
                        ->where('p.id_fonction=? And p.ei_version_id=? And p.ei_scenario_id=?', Array($this->getId(), $this->getEiVersionId(), $this->getEiScenarioId())
                        )
                        ->execute();
    }

    public function getEiScenario() {
        if ($this->ei_scenario_id != null) {
            return Doctrine_Core::getTable("EiScenario")->findOneBy('id', $this->ei_scenario_id);
        }
        return null;
    }

    public function reloadFromScript($login = null, $pwd = null, $loginUser = null) {
        $fonction = $this->getKalFonction();
        if ($fonction) {
            $fonction->reloadFromScript($login, $pwd, $loginUser);
        }
        else
            throw new Exception('Aucune kal fonction pour la fonction ' . $this . ' d\'id ' . $this->getId());
    }

    public function getPath()
    {
        return EiVersionStructure::getPath($this->getEiVersionStructure());
    }

    public function getEiParamsXSLParsed() {
        $res = array();
        if ($params = $this->getEiParams())
            foreach ($params as $p => $param){
                $res[$param->getKalParam()->getName()]['parsedForm'] = $param->getParsedForm();
                $res[$param->getKalParam()->getName()]['param_id']= $param->getParamId();
            }
        return $res;
    }

    public function generateXSL($xsl, $parentTag) {
        $params = $this->getEiParamsXSLParsed();
        $kalFonction = $this->getKalFonction();
        $commandes = $kalFonction->getCommandes();
        
        foreach ($commandes as $commande) {
            $commande->generateXSL($xsl, $parentTag, $params);
        }
    }
    
    /**
     * Génère les XSL pour les jeux de test. Si $xpath est précisé, alors on place le
     * XPATH en dure, sinon on demande le calcul par le XSL.
     * @param DOMDocument $xsl
     * @param type $parentTag
     * @param type $xpath
     */
    public function generateXSLForTestSet(DOMDocument $xsl, $parentTag, $xpath = null, $isInRoot=false){
//        $params = $this->getEiParamsXSLParsed();
        $params = $this->getEiParams();

        $fonctionTag = $xsl->createElement("fonction");
        //création des attributs de la fonction.
        $fonctionTag->setAttribute("function_ref", $this->getFunctionRef());
        $fonctionTag->setAttribute("function_id", $this->getFunctionId());
        $fonctionTag->setAttribute("ei_fonction_id", $this->getId());
        
        $xpathAttr =$xsl->createElement("xsl:attribute");
        $xpathAttr->setAttribute("name", "xpath");
        //appelle au template pour génération le XPATH
        if(is_null($xpath)){
            $tempateCall = $xsl->createElement('xsl:call-template');
            $tempateCall->setAttribute("name", "generateAbsoluteXpath");
            $xpathAttr->appendChild($tempateCall);
        }else{
            $xpathAttr->appendChild($xsl->createTextNode($xpath));
        }
        
        $fonctionTag->appendChild($xpathAttr);
        //cette balise sert à ne pas mettre vide la fonction lorsque celle-ci n'a
        //pas de paramètre. Si la fonction n'a pas de paramètre, la génération
        //de l'attribut xpath génère un bug. Toutes fonction n'ayant pas de paramètres
        //imbriquera les autres fonction jusqu'à en avoir.
        //Avec cette attribut, on empeche ce bug.
        $paramTag = $xsl->createElement("parameters");
        $fonctionTag->appendChild($paramTag);
        
        foreach($params as $p => $param){
             $param->generateXSLForTestSet($xsl, $paramTag, $isInRoot);
        }
        
        $parentTag->appendChild($fonctionTag);
    }

    public function createCopie($ei_version_str, $conn = null) {
        $copie = null;

        try {
            //$conn->beginTransaction();
            //Création de la copie
            $copie = new EiFonction();

            $copie->setDescription($this->getDescription());
            $copie->setEiVersionStructure($ei_version_str);
            $copie->setFunctionId($this->getFunctionId());
            $copie->setFunctionRef($this->getFunctionRef());
            $copie->setProjectRef($this->getProjectRef());
            $copie->setProjectId($this->getProjectId());

            //Sauvegarde de la copie
            $copie->save($conn, false);

            $params = $this->getEiParams();
            if ($params->getFirst()) {
                foreach ($params as $i => $param) {
                    $param->createCopie($copie->getId(), $conn);
                }
            }

        } catch (Exception $e) {
            throw $e;
        }
        return $copie;
    }

    //Récupération des images de notice d'une fonction
    public function getVersionNoticeByProfil(EiProfil $profil, EiProjet $ei_project, $lang) {

        $notice = $this->getKalFonction()->getNotice();
        $result = Doctrine_Core::getTable('EiVersionNotice')->createQuery('v')
                ->where('EiNoticeProfil.notice_id=v.notice_id And EiNoticeProfil.notice_ref=v.notice_ref
                            And EiNoticeProfil.version_notice_id=v.version_notice_id ')
                ->andWhere("EiNoticeProfil.profile_id=? And EiNoticeProfil.profile_ref=?", array($profil->getProfileId(), $profil->getProfileRef()))
                ->andWhere("v.notice_id=? And v.notice_ref=?", array($notice->getNoticeId(), $notice->getNoticeRef()))
                ->andWhere('v.lang=?', array($lang))
                ->execute();
        if ($result->getFirst())
            return $result->getFirst();

        //Si la version de notice n'est pas spécifiée pour la langue donnée,
        // on retourne celle definie avec la langue definie par défaut sur le projet
        $result2 = Doctrine_Core::getTable('EiVersionNotice')->createQuery('v')
                ->where('EiNoticeProfil.notice_id=v.notice_id And EiNoticeProfil.notice_ref=v.notice_ref
                            And EiNoticeProfil.version_notice_id=v.version_notice_id ')
                ->andWhere("EiNoticeProfil.profile_id=? And EiNoticeProfil.profile_ref=?", array($profil->getProfileId(), $profil->getProfileRef()))
                ->andWhere("v.notice_id=? And v.notice_ref=?", array($notice->getNoticeId(), $notice->getNoticeRef()))
                ->andWhere('v.lang=? ', array($ei_project->getDefaultNoticeLang()))
                ->execute();
        if ($result2->getFirst())
            return $result2->getFirst();

        //Si aucune version de notice est trouvé on retourne null
        return null;
    }

    /**
     * Retourne le nom de la fonction raccourci.
     * @param int $size la taille totale de la chaine à retourner.
     * @return string
     * @throws InvalidArgumentException
     */
    public function getTroncatedName($size = 10) {
        if ($size <= 0)
            throw new InvalidArgumentException('Invalid size value to troncate fonction name. ' . $size . ' is not a valid value.');

        if (strlen($this->getName()) > $size)
            return substr($this->getName(), 0, $size - 3) . '...';
        else
            return $this->getName();
    }

    /**
     * Associe un nom à la fonction.
     * @param type $name
     */
    public function setName($name) {
        $this->name = $name;
    }

    /**
     * Retourne le nom de la fonction.
     * Si celui-ci n'existe pas, alors retourne null
     * @return string
     */
    public function getName() {
        if (isset($this->name))
            return $this->name;
        else
            return null;
    }

    public function save(\Doctrine_Connection $conn = null, $withparams = true) {
        $new = $this->isNew();

        if ($conn == null) {
            $conn = Doctrine_Manager::connection();
        }
        $conn->beginTransaction();
        try {
            if ($new && $withparams) {

                $params = Doctrine_Core::getTable('EiFunctionHasParam')
                        ->findByFunctionRefAndFunctionIdAndParamType($this->function_ref, $this->function_id, "IN");

                //pour chaque paramètres associé à la fonction en provenance de script
                $params_collection = new Doctrine_Collection('EiParam');
                foreach ($params as $p => $param) {
                    $eiParam = new EiParam();
                    $eiParam->setEiFonction($this);
                    $eiParam->setParamId($param->getParamId());
                    $eiParam->setValeur($param->getDefaultValue());
                    $eiParam->setName($param->getName());
                    $params_collection->add($eiParam);
                }

                $this->setEiParams($params_collection);

                $params = Doctrine_Core::getTable('EiFunctionHasParam')
                    ->findByFunctionRefAndFunctionIdAndParamType($this->function_ref, $this->function_id, "OUT");

                $mappingCollection = new Doctrine_Collection("EiParamBlockFunctionMapping");

                /** @var EiFunctionHasParam $param */
                foreach( $params as $param ){
                    $mapping = new EiParamBlockFunctionMapping();

                    $mapping->setEiParamFunctionId($param->getParamId());
                    $mapping->setEiFunction($this);

                    $mappingCollection->add($mapping);
                }

                $this->setEiFunctionMapping($mappingCollection);
            }

            parent::save($conn);

            if ($new)
                $this->getEiVersionStructure()->setEiFonctionId($this->getId());

            $conn->commit();
        } catch (Exception $e) {
//            $conn->rollback();
            throw $e;
        }
        return $this;
    }

    /**
     * Supprime la fonction et ses composants : EiVersionStructure
     * @param \Doctrine_Connection $conn
     */
    public function delete(\Doctrine_Connection $conn = null) {
        $this->getEiVersionStructure()->getNode()->delete();
        parent::delete($conn);
    }

}
