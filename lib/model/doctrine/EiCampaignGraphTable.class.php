<?php

/**
 * EiCampaignGraphTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EiCampaignGraphTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object EiCampaignGraphTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('EiCampaignGraph');
    }

    //Recherche du step  suivant d'une step
    public function getNextStep($campaign_id, $step_id, Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        $q= $conn->createQuery()->from('EiCampaignGraph cg')    
                ->where('EiCampaignGraphHasGraph.parent_id=cg.id ')
                ->andWhere('EiCampaignGraphHasGraph.campaign_id=? And  EiCampaignGraphHasGraph.parent_id=? And cg.id=?',array(
                    $campaign_id,$step_id,$step_id))
                ->execute();
        if(count($q) ==1) return $q->getFirst();
        return null;
    }
    //Récupération de la campagne d'un noeud de campagne
    public function getCampaign($campaign_id, $project_id = null, $project_ref = null) {
        if ($campaign_id == null)
            return null;
        if ($project_id != null || $project_ref != null)
            return Doctrine_Core::getTable('EiCampaign')->findOneByIdAndProjectIdAndProjectRef(
                            $campaign_id, $project_id, $project_ref);
        return Doctrine_Core::getTable('EiCampaign')->findOneById($campaign_id);
    }

    //Récupération de la requête pour la liste des steps de campagne d'un projet (pour liste déroulante)
    public function getProjectCampaignsGraphQuery(EiProjet $ei_project, EiCampaign $ei_campaign = null, Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        $q = $conn->createQuery()->from(' EiCampaignGraph cg')
                ->leftJoin('cg.EiCampaign c');
        if ($ei_campaign == null)
            $campaign_id = null;
        else
            $campaign_id = $ei_campaign->getId();
        //Si la campagne n'est pas spécifiée , on renvoi une liste vide  
        $q = $q->where('c.id = ' . $campaign_id);
        return $q->andWhere('c.project_id= ? And c.project_ref=? ', array($ei_project->getProjectId(), $ei_project->getRefId()));
    }

    //Récupération du noeud racine d'une campagne 
    public function getRootCampaign(EiCampaign $ei_campaign, Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        /* On recherche tous les noeuds da la campagne qui
          ont null comme parent (En sachant qu'il ne doit en avoir qu'un */
        $roots = $conn->createQuery()->from('EiCampaignGraph cg')
                ->leftJoin('cg.graphCampaignChildren cp')
                ->leftJoin('cg.EiScenario s')
                ->leftJoin('cg.EiCampaignGraphType gt')
                ->leftJoin('cg.EiCampaign c')
                ->where('c.id= ? ', array($ei_campaign->getId()))
                ->andWhere('cp.parent_id is NULL ')
                ->execute();

        /* Si plus de 2 noeuds sont trouvés , alors la campagne possède deux racines ,
          ce qui est impossible  (On renvoie une erreur système ) */
        if (count($roots) > 1)  
            throw new Exception("Fatal error ,Contact administrator , 2 root found for step node");//return -1;
        if (count($roots) == 1)
            return $roots->getFirst(); // On retourne le noeud racine
        return null;
    }

    //Récupération des noeuds fils d'un noeud d'une campagne 
    public function getGraphNodeChildren(EiCampaignGraph $ei_campaign_graph, Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        return $conn->createQuery()->from('EiCampaignGraph cg')
                        ->leftJoin('cg.graphCampaignChildren cc')
                        ->leftJoin('cg.EiCampaign c')
                        ->where('c.id= ? ', array($ei_campaign_graph->getCampaignId()))
                        ->andWhere('cc.parent_id =' . $ei_campaign_graph->getId())
                        ->execute();
    }

    //Récupération d'un noeud de campagne avec son scénario et/ou son jeux de données
    public function getCampaignGraphStep($campaign_graph_id) {
        $q = $this->getCampainGraphQuery();
        $result = $q->where('cg.id=' . $campaign_graph_id)->execute();
        if (count($result) == 0):
            return null;
        endif;
        return $result->getFirst();
    }

    //Récupération de la requete d'un noeud de campagne
    public function getCampainGraphQuery(Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        return $conn->createQuery()->from('EiCampaignGraph cg')
                        ->leftJoin('cg.EiScenario s')
                        ->leftJoin('cg.EiDataSet ds')
                        ->leftJoin('cg.EiCampaign c');
    }

    //Récupération de la requête pour la liste des noeuds d'une campagne
    public function getCampaignGraphs(EiCampaign $ei_campaign, Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        $q = $this->getCampaiGraphQuery($conn)
                ->where('cg.campaign_id= ? ', array($ei_campaign->getId()));
        return $q->execute();
    }

    /* Récupération du graphe d'une campagne sous forme de tableau.
     * Première version : Chaque noeud possède au plus un fils et au plus un père.
     * On adapate la structure du graphe pour cette utilisation
     */
    public function getGraphHasChainedList(EiCampaign $ei_campaign ,Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection();
        $graphRoot=$this->getRootCampaign($ei_campaign, $conn);
        $list=Array();
        if($graphRoot==null) return $list;
        $child=$graphRoot;

        while ($child!=null && !(is_int($child) && $child == -1) ) {
            $list[]=$child;

            $child=EiCampaignGraph::getCampaignGraphChild($child, $conn);
        }
        return $list;
    }

    /**
     * @param $campaignId
     * @return mixed
     */
    public function getFirstStep($campaignId){
        $conn = Doctrine_Manager::connection();

        $element = $conn->createQuery()
            ->from('EiCampaignGraph cg')
            ->where("cg.campaign_id = ?", $campaignId)
            ->andWhere("cg.id NOT IN (SELECT cg2.child_id FROM EiCampaignGraphHasGraph cg2 WHERE cg2.campaign_id = ?)", $campaignId)
        ;

        return $element->fetchOne();
    }

    /**
     * @param $campaignId
     * @return mixed
     */
    public function getLastStep($campaignId){
        $conn = Doctrine_Manager::connection();

        $element = $conn->createQuery()
            ->from('EiCampaignGraph cg')
            ->where("cg.campaign_id = ?", $campaignId)
            ->andWhere("cg.id NOT IN (SELECT cg2.parent_id FROM EiCampaignGraphHasGraph cg2 WHERE cg2.campaign_id = ?)", $campaignId)
        ;

        return $element->fetchOne();
    }

    /* Récupération de facon moins lourde la liste chainée constituant les étapes d'une campagne */
    

}

