<?php

/**
 * EiSubjectTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EiSubjectTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object EiSubjectTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('EiSubject');
    }
    //Compter le nombre de sujets par statuts et autres critères 
    public function countSubjectByCritéria(Eiprojet $ei_project,EiDelivery $ei_delivery=null,$state_id=null,$guard_id=null){
        $q=Doctrine_Query::create()->select('s.subject_state_id ,COUNT(DISTINCT id) as nbState')->from('EiSubject s')
                ->leftJoin('s.subjectAssignments as')
                ->where('s.project_id=? And s.project_ref=? ',
                                array($ei_project->getProjectId(),$ei_project->getRefId() ));
        //Si l'utilisateur est spécifié alors on rajoute le critère
        if($guard_id!=null) $q=$q->andWhere('as.guard_id='.$guard_id);
        //Si la livraison est spécifiée
        if($ei_delivery!=null) $q=$q->andWhere('s.delivery_id='.$ei_delivery->getId());
        //Si le statut est spécifié
        if($state_id!=null) $q=$q->andWhere('s.subject_state_id='.$state_id);
        $q=$q->groupBy('s.subject_state_id'); 
        $tabStates= array();
        foreach($q->fetchArray() as $state):
            $tabStates[$state['subject_state_id']]=$state['nbState'];
        endforeach;
        return $tabStates;
    }
    //Récupération des contextes d'un sujet/intervention
    public function getContexts($subject_id,Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        return Doctrine_Core::getTable('EiBugContext')->getSubjectContexts($subject_id,$conn);
    }
    //Retour des sujets pour le dashboard utilisateur 
    public function getSimpleSujects(Eiprojet $ei_project,EiDelivery $ei_delivery=null,$state_id=null,$guard_id=null){
        //Requete plus simple car moins de besoin en terme d'objets liés au sujet
         
        $q=Doctrine_Query::create()->from('EiSubject s')
                ->leftJoin('s.subjectAssignments as')
                ->where('s.project_id=? And s.project_ref=? ',
                                array($ei_project->getProjectId(),$ei_project->getRefId() ));
        //Si l'utilisateur est spécifié alors on rajoute le critère
        if($guard_id!=null) $q=$q->andWhere('as.guard_id='.$guard_id);
        //Si la livraison est spécifiée
        if($ei_delivery!=null) $q=$q->andWhere('s.delivery_id='.$ei_delivery->getId());
        //Si le statut est spécifié
        if($state_id!=null) $q=$q->andWhere('s.subject_state_id='.$state_id);
        return $q->execute();
    }
     
    //Récupération d'un sujet avec ses propriétés de base 
    public function getSubject($project_id=null,$project_ref=null,$subject_id=null,Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        $q=$this->getSubjectsAsArray($project_id,$project_ref,$conn);
        $s=$q->Where('s.id='.$subject_id) 
                ->fetchArray(); 
        if(count($s)>0) return $s[0]; 
        return null;
    }
    //Récupération du detail sur un sujet
    public function getSubjectDetails($subject_id,Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        $details=  Doctrine_Core::getTable('EiSubjectDetails')->findBySubjectId($subject_id);
        if(count($details)>1) throw new Exception('Critical error on intervention management. Please contact administrator');
        if(count($details)==1) return $details->getFirst();
        return null;
    }
    //Récupération de la solution sur un sujet
    public function getSubjectSolution($subject_id,Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection();
        $solution=  Doctrine_Core::getTable('EiSubjectSolution')->findBySubjectId($subject_id);
        if(count($solution)>1) throw new Exception('Critical error on intervention management. Please contact administrator');
        if(count($solution)==1) return $solution->getFirst();
        return null;
    }
    //Récupération de la migration sur un sujet
    public function getSubjectMigration($subject_id,Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        $migration=  Doctrine_Core::getTable('EiSubjectMigration')->findBySubjectId($subject_id);
        if(count($migration)>1) throw new Exception('Critical error on intervention management. Please contact administrator');
        if(count($migration)==1) return $migration->getFirst();
        return null;
    }
    
    //Recherche d'un sujet par son nom ou son Id
    public function searchSubjectByIdOrName($nameOrId,$project_id,$project_ref,Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        if($nameOrId==null) return null;
       $q= $conn->createQuery()->from('EiSubject d') 
             ->where('project_id= ? And project_ref=? ',array($project_id,$project_ref))
             ->andWhere('d.id= ? OR d.name LIKE ? ', array($nameOrId , '%'.$nameOrId.'%'))
             ->execute(); 
       if(count($q)>0):
           return $q->getFirst();
       endif;
       return null;
    } 
      
    //Récupération de la requête pour la liste des sujets d'un projet
    public function getProjectSubjects($project_id,$project_ref,Doctrine_Connection $conn=null ){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        return $this->getSubjectsAsArray($project_id,$project_ref,$conn); 
    }
    //Récupération des sujets triés par critères
    public function sortSubjectByCriterias($q,$searchSubjectCriteria,Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection();  
        $q=$q;
        
        //Ajout des critères de tri
     if(isset ($searchSubjectCriteria['title']) && $searchSubjectCriteria['title']!=null ): 
         $q->andWhere('s.name like ?','%'.$searchSubjectCriteria['title'].'%'); 
     endif;
     if(isset ($searchSubjectCriteria['id']) && $searchSubjectCriteria['id']!=null ): 
         $q->andWhere('s.id = ?',$searchSubjectCriteria['id']); 
     endif;
     if(isset ($searchSubjectCriteria['external_id']) && $searchSubjectCriteria['external_id']!=null ): 
         $q->andWhere('s.alternative_system_id = ?',$searchSubjectCriteria['external_id']); 
     endif;
     
      if(isset ($searchSubjectCriteria['author']) && $searchSubjectCriteria['author']!=null): 
          $q->andWhere('a.username like ?','%'.$searchSubjectCriteria['author'].'%'); 
      endif;
      if(isset ($searchSubjectCriteria['assignment']) && $searchSubjectCriteria['assignment']!=null): 
          $q->andWhere('ass.username like ?','%'.$searchSubjectCriteria['assignment'].'%'); 
      endif;
      
      //TRI sur les différents statuts de sujet récupérés
      if(isset ($searchSubjectCriteria['state']) && $searchSubjectCriteria['state']!=null && $searchSubjectCriteria['state']!=0): 
          $r='st.id '; $k=count($searchSubjectCriteria['state']);$i=1;
          foreach($searchSubjectCriteria['state'] as $state):
          $r .=' = ?'; if($i<$k) $r.=' OR st.id '; 
          $i++;
          endforeach;          
          $q->andWhere($r,$searchSubjectCriteria['state']); 
      endif;
      
      //TRI sur les différents statuts de la livraison
      if(isset ($searchSubjectCriteria['delivery_state']) && $searchSubjectCriteria['delivery_state']!=null && $searchSubjectCriteria['delivery_state']!=0): 
          $r='d.delivery_state_id'; $k=count($searchSubjectCriteria['delivery_state']);$i=1;
          foreach($searchSubjectCriteria['delivery_state'] as $delivery_state):
          $r .=' = ?'; if($i<$k) $r.=' OR d.delivery_state_id '; 
          $i++;
          endforeach;          
          $q->andWhere($r,$searchSubjectCriteria['delivery_state']); 
      endif;
      
      //TRI sur les dates de début et fin de livraison
      //Date de début 
      if(isset ($searchSubjectCriteria['delivery_start_date']) && $searchSubjectCriteria['delivery_start_date']!=null ): 
          $q->andWhere('d.delivery_date  >= ?', $searchSubjectCriteria['delivery_start_date']) ; 
      endif; 
      //Date de fin 
      if( isset ($searchSubjectCriteria['delivery_end_date']) && $searchSubjectCriteria['delivery_end_date']!=null): 
          $q->andWhere('d.delivery_date <= ?', $searchSubjectCriteria['delivery_end_date'])  ; 
      endif; 
      
      //TRI sur les différentes priorités de sujet récupérés
      if(isset ($searchSubjectCriteria['priority']) && $searchSubjectCriteria['priority']!=null && $searchSubjectCriteria['priority']!=0): 
          $r='p.id '; $k=count($searchSubjectCriteria['priority']);$i=1;
          foreach($searchSubjectCriteria['priority'] as $priority):
          $r .=' = ?'; if($i<$k) $r.=' OR p.id '; 
          $i++;
          endforeach;          
          $q->andWhere($r,$searchSubjectCriteria['priority']); 
      endif; 
      
      //TRI sur les différentes types  de sujet récupérés
      if(isset ($searchSubjectCriteria['type']) && $searchSubjectCriteria['type']!=null && $searchSubjectCriteria['type']!=0): 
          $r='t.id '; $k=count($searchSubjectCriteria['type']);$i=1;
          foreach($searchSubjectCriteria['type'] as $type):
          $r .=' = ?'; if($i<$k) $r.=' OR t.id '; 
          $i++;
          endforeach;          
          $q->andWhere($r,$searchSubjectCriteria['type']); 
      endif;  
      
      if(isset ($searchSubjectCriteria['delivery']) && $searchSubjectCriteria['delivery']!=null && $searchSubjectCriteria['delivery']!=0): 
          $q->andWhere('d.id = ?',$searchSubjectCriteria['delivery']); 
      endif;
      /* Tri sur la fonction si celle ci a été définie */
      if(isset ($searchSubjectCriteria['function_id']) && $searchSubjectCriteria['function_id']!=null && isset($searchSubjectCriteria['function_ref']) && $searchSubjectCriteria['function_ref']!=null): 
           
          $subjectLists=$conn->fetchAll("select subject_id from ei_function_bugs_vw where function_id=".$searchSubjectCriteria['function_id']." and function_ref=".$searchSubjectCriteria['function_ref']);
          $subjectListsTab="";
            if(count($subjectLists)>0):
                foreach($subjectLists as $subj):
                    $subjectListsTab.=$subj['subject_id'].",";
                endforeach; 
                $subjectListsTab=  substr($subjectListsTab, 0,strlen($subjectListsTab)-1);
              $q->andWhere(" s.id in (".$subjectListsTab.")"); 
              else:
              $q->andWhere(" 0 = 1");  
          endif;
      
      endif;
      return $q->orderBy('s.id DESC, s.created_at DESC'); 
    }
    //Pagination des sujets 
    public function paginateSubjects($q , $first_entry,$max_subject_per_page){ 
        //throw new Exception($first_entry.'/'.$max_subject_per_page);
        return $q  =$q->offset($first_entry)
                ->limit($max_subject_per_page )  ;
    }
    
    /* Récupération des authors de sujet pour un projet donné . (sert pour les recherches ) */
    public function getSubjectAuthorsForProject(EiProjet $ei_project,  Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection();
        $typehead=array();
        $subjectAuthors=$conn->createQuery()->from('sfGuardUser u')  
                ->select('u.username')
                ->leftJoin('u.subjectAuthor d')
                ->where('project_id= ? And project_ref=? ',
                        array($ei_project->getProjectId(),$ei_project->getRefId()))
                ->execute();
        //Parse subjet author for typehead 
        if(count($subjectAuthors)>0):
            foreach($subjectAuthors as $subjectAuthor):
            $typehead[]=$subjectAuthor->getUsername();
            endforeach;
        endif;
        return $typehead;
    }
    
    /* Récupération des users assignés à des sujets donnés pour un projet donné . (sert pour les recherches ) */
    public function getUsersAssignOnSubjectsForProject(EiProjet $ei_project,  Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection();
        $typehead=array();
        $usersAssignOnSubjects=$conn->createQuery()->from('sfGuardUser u')  
                ->select('u.username')
                ->leftJoin('u.userAssignmentsSubjects d')
                ->leftJoin('d.EiSubject s')
                ->where('s.project_id= ? And s.project_ref=? ',
                        array($ei_project->getProjectId(),$ei_project->getRefId()))
                ->execute();
        //Parse users for typehead 
        if(count($usersAssignOnSubjects)>0):
            foreach($usersAssignOnSubjects as $user):
            $typehead[]=$user->getUsername();
            endforeach;
        endif; 
        return $typehead;
    }
    
    
    
    /* Récupération des titres  de sujet pour un projet donné . (sert pour les recherches ) */
    public function getSubjectTitlesForProject(EiProjet $ei_project,  Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection();
        $typehead=array();
        $subjects=$conn->createQuery()->from('EiSubject d')  
                ->select('d.name')
                ->where('project_id= ? And project_ref=? ',
                        array($ei_project->getProjectId(),$ei_project->getRefId()))
                ->execute();
        //Parse delivery for typehead 
        if(count($subjects)>0):
            foreach($subjects as $subject):
            $typehead[]=$subject->getName();
            endforeach;
        endif;
        return $typehead;
    } 
    
    /* Gestion des assignations d'utilisateurs aux sujets */
    
    //Récupération des utilisateurs assignés au sujet
    public function getAssignUsers($subject_id , Doctrine_Connection $conn=null){  
        
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        return  $conn->createQuery()->from('sfGuardUser g')
             ->leftJoin('g.userAssignmentsSubjects sa')
             ->leftJoin('sa.EiSubject s')
             ->whereIn('s.id ',$subject_id)
             ->execute(); 
    }
    
    //Récupération des utilisateurs non asignés au sujet
    public function getNonAssignUsers($assignUsers,Doctrine_Connection $conn=null){  
        
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        return  $conn->createQuery()->from('sfGuardUser g')
             ->leftJoin('g.userAssignmentsSubjects sa')
             ->leftJoin('sa.EiSubject s')
             ->whereNotIn('g.id ',$assignUsers)
             ->execute(); 
    }
    //Recherche des campagnes de tests d'un sujet
    public function getSubjectCampaigns($subject_id,  Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        return $conn->createQuery()->from('EiSubjectHasCampaign sc')   
                ->leftJoin('sc.EiCampaign c')
                ->where('sc.subject_id='.$subject_id)
                ->execute();
    }
    //Recherche des fonctions  d'un sujet
    public function getSubjectFunctions($subject_id,  Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection();  
        return $conn->fetchAll("select * from ei_delivery_impacted_functions_vw where s_id=".$subject_id." or s2_id=".$subject_id." group by t_id");
    }
    //Recherche des fonctions  d'un sujet sous forme  tableau
    public function getSubjectFunctionsAsArray($subject_id,  Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        return $conn->createQuery()->from('EiSubjectFunctions sf')    
                ->select('sf.subject_id,sf.function_id,sf.function_ref,sf.automate ')
                ->where('sf.subject_id='.$subject_id)
                ->fetchArray();
    }
     
    //Récupération de la requête pour la liste des sujets  
    public function getSubjectsAsArray($project_id=null,$project_ref=null ,Doctrine_Connection $conn=null ){
        if($conn==null) $conn = Doctrine_Manager::connection();   
           $q = $conn->createQuery()->select('s.*,
               sc.subject_id as sc_subject_id, sc.campaign_id as sc_campaign_id,
               a.id as author_id,a.username as author_username,a.email_address as author_email,
               tnr.id as tnr_id , tnr.name as tnr_name, tnr.coverage as tnr_coverage,
               d.id as d_delivery_id, d.name as delivery_name,
               ds.id as ds_delivery_state_id, ds.name as delivery_state_name,ds.color_code as ds_color_code, 
               ds.display_in_home_page as ds_homepage, ds.display_in_search as ds_search,ds.close_state as ds_close_state,
               st.id as st_id, st.name as st_name,st.color_code as st_color_code, 
               st.display_in_home_page as st_homepage, st.display_in_search as st_search,st.close_del_state as st_close_del_state,
               p.id as p_id, p.name as p_name,
               t.id as t_id, t.name as t_name, 
               as.guard_id as as_assign_user,as.subject_id as as_subject_id, as.author_id as as_author_assign_id,
               ass.id as ass_author_id , ass.username as ass_username,
               fs.campaign_id as fs_campaign_id, fs.subject_id as fs_subject_id, fs.state as fs_state,fs.description as fs_description') 
                ->from('EiSubject s,
                            s.sfGuardUser a,
                            s.subjectCampaigns sc WITH sc.subject_id=s.id And sc.is_tnr=1,
                            sc.EiCampaign tnr   ,
                            s.EiDelivery d ,
                            d.EiDeliveryState ds , 
                            s.EiSubjectState st ,
                            s.EiSubjectPriority p ,
                            s.EiSubjectType t , 
                            s.subjectAssignments as ,
                            as.AssignmentUser as ass,
                            s.flagSubjects as fs')  ;
        if($project_id!=null && $project_ref!=null):
                   $q=$q->where('s.project_id=? And s.project_ref=?',array($project_id,$project_ref));
               endif; 
               return $q;
    }
    /* Récupération de l'historique des assignations sur un intervention*/
    public function getAssignmentsHistory($subject_id,Doctrine_Connection $conn=null ){
        return Doctrine_Core::getTable('EiSubjectAssignmentHistory')
                ->getAssignmentsHistory($subject_id,$conn);
    }
    /* On récupère les interventions de la livraison avec toutes les relations du intervention (statuts, priorites,types,assignments , etc ...) */
    public function getSubjectWithRel(EiProjet $ei_project ,$delivery_id=null,$subject_id=null,Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection();
        $q="select * from ei_subjects_with_relations_vw where project_id=".$ei_project->getProjectId()." and project_ref=".$ei_project->getRefId();
        if($delivery_id!=null):
            $q.=" and delivery_id=".$delivery_id;
        endif;
        if($subject_id!=null):
            $q.=" and id=".$subject_id;
        endif; 
       return EiSubject::parseSubjects($conn->fetchAll($q)); 
    }
    
}

 