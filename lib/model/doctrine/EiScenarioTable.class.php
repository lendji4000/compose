<?php

/**
 * EiScenarioTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EiScenarioTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object EiScenarioTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('EiScenario');
    }
    
    public function rename($obj_id,$new_node_name,$conn){
        if($new_node_name=="" || $obj_id==null) return null;
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        $ei_scenario=$this->getInstance()->findOneById($obj_id);
        if($ei_scenario!=null) {
            $ei_scenario->setNomScenario($new_node_name);
            $ei_scenario->save($conn);
        }
    }
    
    public function getScenario() {
        return $this->getInstance()->createQuery('s');
    }

    //Récupération des campagnes d'un scénario (campagnes dans lesquelles le scénario est utilisé
    public function getScenarioCampaigns($scenario_id, Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        return  $conn->getTable('EiCampaign')->createQuery('c')
                ->where('EiCampaignGraph.campaign_id=c.id') 
                        ->andWhere('EiCampaignGraph.scenario_id='. $scenario_id)
                ->execute(); 
    }
    
    public function getVersionsForScenario($ei_scenario_id) {
        if ($ei_scenario_id != null) {
            $q = Doctrine_Core::getTable('EiVersion')->getVersionByCriteria(Doctrine_Core::getTable('EiVersion')->getVersion()
                    , null, $ei_scenario_id, null, null, null);
            if ($q == null)
                return null; // si la fonction ne retourne rien
            if (!$q->execute()->getFirst())
                return null; // si l'execution de retourne aucune ligne
            return $q->execute();
        }
        return null;
    }

    public function getScenarioByCriteria($project_id, $nom_scenario, $nb_joue, $description, $created_at, $updated_at) {
        $q = $this->getScenario();

        //Scenarios d'un projet spécifique
        if ($project_id != null) {
            $q = $q->andWhere('s.project_id = ?', $project_id);
        }

        //Scenarios d'une version précise
        if ($description != null) {
            $q = $q->andWhere('s.description LIKE', '?', '%' . $description . '%');
        }

        //Scenarios d'un nom spécifique
        if ($nom_scenario != null) {

            $q = $q->andWhere('s.nom_scenario LIKE', '?', '%' . $nom_scenario . '%');
        }

        //Scenarios joués un nombre de fois bien définit
        if ($nb_joue != null) {
            $q = $q->andWhere('s.nb_joue= ?', $nb_joue);
        }

        //Scenarios créées à une date donnée
        if ($created_at != null) {
            $q = $q->andWhere('s.created_at = ?', $created_at);
        }

        //Scenarios par date de mise à jour
        if ($updated_at != null) {
            $q = $q->andWhere('s.updated_at= ?', $updated_at);
        }
        // retour de la requete
        $q = $q->orderBy('s.created_at');

        return $q;
    }

    public function generateXML($ei_scenario_id, $ei_version_id, $id_profil) {
        if ($ei_scenario_id == null)
            return null;
        if ($ei_version_id == null)
            return null;
        if ($id_profil == null)
            return null;
        $version = Doctrine_Core::getTable('EiVersion')->findOneById($ei_version_id);
        $scenario = Doctrine_Core::getTable('EiScenario')->findOneById($ei_scenario_id);
        $profil = Doctrine_Core::getTable('EiProfil')->findOneById($id_profil);

        // récupération des fonctions du scénario
        $q = Doctrine_Core::getTable('EiFonction')->getFonctionsByCriteria($version->id, $scenario->id, null, null, null);
        if ($q == null)
            return null;
        $fonctions = $q->execute(); // s'il existe des fonctions dans la base
        if (!$fonctions->getFirst())
            return null;

        //construction de la tete du xml


        /*         * *******************************************************************************
         *  Description: Creation D'un Fichier XML en utilisant la Class Php  DomDocumnent
         *
         *  Auteur: Lenine DJOUATSA (Oui comme les voitures)
         *  Entreprise EISGE : http://www.eisge.com
         *
         * ******************************************************************************* */

// Instance de la class DomDocument
        $doc = new DOMDocument();
// Ajout de l entete html au document
        $anXMLString = '
        <!--Créer par lenine DJOUATSA sous la direction EISGE-->
        <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
        <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
        <head>
          <meta content="text/html; charset=UTF-8" http-equiv="content-type" />
          <title>Test Suite</title>
        </head>
        <body>
        </body>
        </html>';
        $doc->loadXML($anXMLString);
        // Definition de la version et l'encodage
        $doc->version = '1.0';
        $doc->encoding = 'UTF-8';


        //récupération de l element body
        $racine = $doc->getElementsByTagName('body');
        foreach ($racine as $r) {
            $body = $r;
        }

// Ajout la balise 'table' a la racine
        $tbody = $doc->createElement('tbody');
        $table = $doc->createElement('table');
        $body->appendChild($table);
        $table->appendChild($tbody);

        $tr = $doc->createElement('tr'); //<td><b>Test Suite</b></td>
        $td = $doc->createElement('td');
        $nom_scenario = $doc->createElement('b', $scenario->nom_scenario);
        $libelle_version = $doc->createElement('b', $version->libelle);
        $profile_name = $doc->createElement('b', $profil->profile_name);

//Ajout du nom du scénario au tableau
        $tbody->appendChild($tr);
        $tr->appendChild($td);
        $td->appendChild($nom_scenario);
        $td->appendChild($libelle_version);
        $td->appendChild($profile_name);

// Ajout des fonctions au tableau
        foreach ($fonctions as $fonction) {
            $a = $doc->createElement('a', $fonction->getKalFonction()->nom_fonction . $fonction->id);
            $tr1 = $doc->createElement('tr');
            $td1 = $doc->createElement('td');
//            $a->setAttribute('href', $fonction->getKalFonction()->url_fonction);
            $a->setAttribute('href', $fonction->getKalFonction()->nom_fonction . $fonction->id);
            $tbody->appendChild($tr1);
            $tr1->appendChild($td1);
            $td1->appendChild($a);
        }

// Rendre Joli ;)
        $doc->formatOutput = true;
        $doc->normalizeDocument();
// Sauver le document XML sous le nom simple.xml
        //$doc->save('simple.xml');
// Afficher le document XML
        return $doc->saveXML();
    }

    public function getMaxNiveau($ei_scenario_id, $ei_version_id) {
        //Récupération de la fonction de niveau supérieur dans une version d'un  scénario
        $max_niveau = Doctrine_Query::create()->from('EiFonction f')
                ->select('MAX(f.niveau) as max_niveau ')
                ->where('f.ei_scenario_id= ? And f.ei_version_id=?', array($ei_scenario_id, $ei_version_id));
    }

    //Génération du xsl de la notice d'un scénario
    public function generateXslNotice($ei_version, $ei_profile, $ei_scenario, $ei_project) {
        $dom = new DomDocument("1.0", "UTF-8");
        $dom->formatOutput = true;
        // On définit les spécificités xsl.
        //-> Feuille de Style
        $css = $dom->createElement('xsl:stylesheet');
        $css->setAttribute("xmlns:xsl", "http://www.w3.org/1999/XSL/Transform");
        $css->setAttribute("version", "1.0");
        $dom->appendChild($css);
        //-> Fichier de sortie
        $pi = $dom->createElement('xsl:output');
        $pi->setAttribute("method", "xml");
        $css->appendChild($pi);
        //-> Template à matcher.
        $tpl = $dom->createElement('xsl:template');
        $tpl->setAttribute("match", "/");
        $css = $css->appendChild($tpl);
        // On définit le jeu de test.
        $this->html_balise = $dom->createElement("html");
        $this->body_balise = $dom->createElement("body");
        $h2_balise = $dom->createElement("h2");
        $h2_balise->appendChild($dom->createTextNode($ei_version));
        $this->body_balise->appendChild($h2_balise);
        $this->html_balise->appendChild($this->body_balise);
        // Puis on l'ajoute.
        $tpl = $tpl->appendChild($this->html_balise);

        //Récupération et creation des blocs du fichier xsl
        $path = $ei_version->getLibelle();
        $ei_functions = $ei_version->getEiFonctionsOrderedByPosition();
        if ($ei_functions->getFirst()) {
            foreach ($ei_functions as $ei_function) {
                $this->createXslBlocFunction($ei_function, $ei_profile, $dom, $path);
            }
        }


        //Création des blocs xsl pour chacune des sous versions de la version
        $ei_sous_versions = $ei_version->getEiSousVersionsOrderedByPosition();
        if ($ei_sous_versions->getFirst()):
        //$this->createXslBlocVersion($ei_sous_versions,$dom, $path);
        endif;

        // Enregistrement.
        $dom->save('xsl_notice.xml');
        return $dom->saveXML();
    }

    public function createXslBlocFunction($ei_function, $ei_profile, $dom, $path) {
        if ($ei_function != null) {
            $fonction_balise = $dom->createElement($ei_function);
            $imgs_notice = $ei_function->getImgsNoticeByProfil($ei_profile);
            if (count($imgs_notice) > 0): //Si on retrouve des images de notice de la fonction 
                foreach ($imgs_notice as $imgn):
                    $caption_balise = $dom->createElement($imgn['caption']);
                    $img_balise = $dom->createElement('img');
                    $img_balise->setAttribute("src", sfConfig::get('sf_upload_dir') . '/noticeImgs/' . $imgn['filename']);

                    //Analyse de la description d'une image de notice
                    $tab = explode("\${", $imgn['description']);
                    //$caption_balise->appendChild($dom->createTextNode($imgn['description']));

                    $fonction_balise->appendChild($caption_balise);


                    $img_balise = Doctrine_Core::getTable('EiImgNotice')->AnalyseDesc($dom, $img_balise, $tab, $path, $ei_function);
                    $fonction_balise->appendChild($img_balise);
                    $this->body_balise->appendChild($fonction_balise);
                endforeach;
            endif;
        }
    }

    public function createXslBlocVersion($ei_versions, $path) {

        foreach ($ei_versions as $ei_version) {

            $ei_functions = $ei_version->getEiFonctionsOrderedByPosition();
            if ($ei_functions->getFirst()) {
                foreach ($ei_functions as $ei_function) {
                    $this->createXslBlocFunction($ei_function, $path);
                }
            }
            //Pour chaque sous_version
            $ei_sous_versions = $ei_version->getEiSousVersionsOrderedByPosition();
            if ($ei_sous_versions->getFirst()):
                $this->createXslBlocVersion($ei_sous_versions, $path);
            endif;
        }
    }

    //Génération du xsl de la notice d'un Jeu de test
    public function generateXslJeuTestForNotice($ei_version, $ei_profile, $ei_scenario, $ei_project) {
        $dom = new DomDocument("1.0", "UTF-8");
        $dom->formatOutput = true;
        // On définit les spécificités xsl.
        //-> Feuille de Style
        $css = $dom->createElement('xsl:stylesheet');
        $css->setAttribute("xmlns:xsl", "http://www.w3.org/1999/XSL/Transform");
        $css->setAttribute("version", "1.0");
        $dom->appendChild($css);
        //-> Fichier de sortie
        $pi = $dom->createElement('xsl:output');
        $pi->setAttribute("method", "xml");
        $css->appendChild($pi);
        //-> Template à matcher.
        $tpl = $dom->createElement('xsl:template');
        $tpl->setAttribute("match", "/");
        $css = $css->appendChild($tpl);
        // On définit le jeu de test.
        $this->html_balise = $dom->createElement("html");
        $this->body_balise = $dom->createElement("body");
        $h2_balise = $dom->createElement("h2");
        $h2_balise->appendChild($dom->createTextNode($ei_version));
        $this->body_balise->appendChild($h2_balise);
        $this->html_balise->appendChild($this->body_balise);
        // Puis on l'ajoute.
        $tpl = $tpl->appendChild($this->html_balise);
        $this->root_version_balise = $dom->createElement($ei_version->getLibelle());

        $path="";
        $this->createXslBlocVersionForJeuTest($dom, $this->body_balise, $ei_version, $path);
        
         
        // Enregistrement.
        $dom->save('xsl_notice.xml');
        return $dom->saveXML();
    }

    //Création d'un bloc xsl pour interprétation des paramètres de version

    public function createXslBlocParamVersion($dom, $root_version_balise, $ei_param_version, $path) {
        if ($ei_param_version != null) {
            $param_balise = $dom->createElement($ei_param_version);
            $param_balise->appendChild($dom->createTextNode($ei_param_version->getValeur()));
            $root_version_balise->appendChild($param_balise);
        }
    }

    public function createXslBlocParamFunction($dom, $ei_params_versions, $ei_param_version, $ei_version, $ei_profile, $path) {
        if ($ei_param_version != null) {
            $param_balise = $dom->createElement($ei_param_version);
            $imgs_notice = $ei_function->getImgsNoticeByProfil($ei_profile);
            if (count($imgs_notice) > 0): //Si on retrouve des images de notice de la fonction 
                foreach ($imgs_notice as $imgn):
                    $caption_balise = $dom->createElement($imgn['caption']);
                    $img_balise = $dom->createElement('img');
                    $img_balise->setAttribute("src", sfConfig::get('sf_upload_dir') . '/noticeImgs/' . $imgn['filename']);

                    //Analyse de la description d'une image de notice
                    $tab = explode("\${", $imgn['description']);
                    //$caption_balise->appendChild($dom->createTextNode($imgn['description']));

                    $fonction_balise->appendChild($caption_balise);


                    $img_balise = Doctrine_Core::getTable('EiImgNotice')->AnalyseDesc($dom, $img_balise, $tab, $path, $ei_function);
                    $fonction_balise->appendChild($img_balise);
                    $this->body_balise->appendChild($fonction_balise);
                endforeach;
            endif;
        }
    }

    public function createXslBlocVersionForJeuTest($dom, $balise_root, $ei_version, $path) {
        if($path!="") $path=$path.'/';
        
        $version_balise = $dom->createElement($ei_version->getLibelle());

        $ei_functions = $ei_version->getEiFonctionsOrderedByPosition();
        if ($ei_functions->getFirst()) {
            foreach ($ei_functions as $ei_function) {
                $this->createXslBlocFunctionForJeuTest($dom, $version_balise, $ei_params_versions,$ei_function, $path. $ei_version->getLibelle());
            }
        }
        //Pour chaque sous_version
        $ei_sous_versions = $ei_version->getEiSousVersionsOrderedByPosition();
        if ($ei_sous_versions->getFirst()):
            foreach ($ei_sous_versions as $ei_sous_version) {
                $this->createXslBlocVersionForJeuTest($dom, $version_balise, $ei_sous_version, $path. $ei_version->getLibelle());
            }
        endif;
        $balise_root->appendChild($version_balise);
    }
    

    public function createXslBlocFunctionForJeuTest($dom, $version_balise, $ei_params_versions, $ei_function, $path) {
        if ($ei_function != null) {
            $function_balise = $dom->createElement($ei_function);


            //Ajout des paramètres de fonction
            $params_fonction = $ei_function->getParams();
            if ($params_fonction->getFirst()) {
                foreach ($params_fonction as $pf):
                    $search_val_in_arbo = false;
                    if (preg_match('#\$\{(.*)[\}]#', $pf->getValeur())) {
                        foreach ($ei_params_versions as $param_version) :
                            if ("\${" . $param_version->getNomParam() . "}" == $pf->getValeur()):
                                $search_val_in_arbo = true;
                                $tmp_path = $path . '/' . $param_version;
                            endif;
                        endforeach;
                        if ($search_val_in_arbo == true) {
                            $dompar = $dom->createElement("xsl:value-of");
                            $dompar->setAttribute("select", $tmp_path);
                            $param_balise_function = $dom->createElement($pf->getKalParam()->getNomParam());
                            $param_balise_function->appendChild($dompar);
                            $function_balise->appendChild($param_balise_function);
                        } else {
                            $param_balise_function = $dom->createElement($pf->getKalParam()->getNomParam());
                            $param_balise_function->appendChild($dom->createTextNode($pf->getValeur()));
                            $function_balise->appendChild($param_balise_function);
                        }
                    } else {
                        $param_balise_function = $dom->createElement($pf->getKalParam()->getNomParam());
                        $param_balise_function->appendChild($dom->createTextNode($pf->getValeur()));
                        $function_balise->appendChild($param_balise_function);
                    }
                    $search_val_in_arbo = false;
                endforeach;
            }
            $version_balise->appendChild($function_balise); //Ajout de l'element fonction
        }
    }
    
    public function getEiScenarioWithStructure($ei_scenario_id){
        return self::getInstance()->createQuery('scr')
                ->leftJoin('scr.EiScenarioStructures str')
                ->where('scr.id = ?', $ei_scenario_id)
                ->orderBy('str.lft')
                ->fetchOne();
    }

    /**
     * Retourne le scénario à partir du routage.
     *
     * @param array $parameters
     * @return mixed
     * @throws sfError404Exception
     */
    public function getFromId(array $parameters){
        $scenario = self::getInstance()->findOneById($parameters["scenario_id"]);

        if( $scenario === null ){
            throw new sfError404Exception("Scenario not found");
        }

        return $scenario;
    }

    /**
     * Retourne la liste des scénarios dont l'utilisateur est ayant droit.
     *
     * @param EiUser $user
     * @return array|null
     */
    public function getScenariosFromUser(EiUser $user){

        // On définit la liste qui sera retournée à null.
        $liste = null;

        // On définit la requête SQL qui va interroger la base de données afin de récupérer les scénarios visibles par
        // l'utilisateur.
        $query = "
                SELECT *
                FROM ei_scenario
                WHERE (project_ref, project_id) IN (
                    SELECT project_ref, project_id
                    FROM ei_project_user
                    WHERE user_ref = ".$user->getRefId()."
                    AND user_id = ".$user->getUserId()."
                );
        ";

        // On récupère sous forme de tableau les scénarios.
        $scenarios = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAll($query);

        // Si le nombre de scénarios est supérieur à zéro, on crée les objets associés.
        if(count($scenarios) > 0){

            foreach( $scenarios as $scenarioArray ){
                $temp = new EiScenario();
                $temp->setArray($scenarioArray);

                $liste[] = $temp;
            }
        }

        return $liste;
    }
    //Recupération de la courbe d'évolution d'un scénario dans le temps
    public function getScenarioStats(EiScenario $ei_scenario,Doctrine_Connection $conn=null ){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        $q="
            SELECT ts.*, SUM(tsf.duree) as scenario_exe_time  
            FROM `ei_test_set` as ts , ei_test_set_function as tsf, ei_scenario as s
            WHERE  ts.id=tsf.ei_test_set_id 
            And project_id=".$ei_scenario->getProjectId()."  And project_ref=".$ei_scenario->getProjectRef()."
            And ts.ei_scenario_id=".$ei_scenario->getId()." 
            GROUP BY ts.id
            ORDER BY ts.created_at ASC
                ";
        return $conn->fetchAll($q);
    }
    
}