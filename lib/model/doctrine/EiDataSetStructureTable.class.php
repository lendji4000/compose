<?php

/**
 * EiDataSetStructureTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EiDataSetStructureTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object EiDataSetStructureTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('EiDataSetStructure');
    }

    //*************************************************************************//
    //**********          REQUETES INTERROGATION DATA LINES          **********//
    //*************************************************************************//

    /**
     * TODO: Implémenter cette fonction permettant de compléter tous les jeux de données d'un scénario.
     *
     * @param $scenarioId
     */
    public function completeAllDataSets($scenarioId)
    {

    }

    /**
     * @param $dataSetId
     * @param $scenarioId
     * @return Doctrine_Collection
     */
    public function findMissingElementsInDataSet($dataSetId, $scenarioId)
    {
        // Préparation de la requête SQL permettant de récupérer les éléments manquants dans le jeu de données.
        $querySql = '
          SELECT *
          FROM ei_data_set_structure ds
          WHERE ds.ei_scenario_id = '.$scenarioId.'
          AND id NOT IN (SELECT ei_data_set_structure_id FROM ei_data_line WHERE ei_data_set_id = '.$dataSetId.')
          ORDER BY lft;
        ';

        // Récupération de tous les éléments.
        $resultats = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAll($querySql);

        // Importation.
        $collection = new Doctrine_Collection("EiDataSetStructure");
        $collection->fromArray($resultats);

        return $collection;
    }

    /**
     * @param $dataSetId
     * @param $structureId
     * @return array
     */
    public function getRelatedDataSetLines($dataSetId, $structureId)
    {
        return Doctrine_Query::create()
            ->select("dl.*")
            ->from("EiDataLine dl")
            ->andWhere('dl.ei_data_set_id = ?', $dataSetId)
            ->andWhere("dl.ei_data_set_structure_id = ?", $structureId)
            ->orderBy("dl.id")
            ->fetchArray()
        ;
    }

    //********************************************************************//
    //**********          REQUETES INTERROGATION ARBRE          **********//
    //********************************************************************//

    /**
     * Méthode qui retourne la liste des noeuds d'un scénario et d'un niveau donnés.
     *
     * @param $eiScenarioId
     * @param $level
     * @return Doctrine_Query
     */
    public function getNodesAtLevelQuery($eiScenarioId, $level) {
        return Doctrine_Query::create()->select('node.*')
            ->from('EiNodeDataSet node')
            ->where('node.level = ?', $level)
            ->andWhere('node.ei_scenario_id = ?', $eiScenarioId);
    }

    /**
     * @param $eiScenarioId
     * @param array $filteredTypes
     * @return Doctrine_Query
     */
    public function getAllTree($eiScenarioId, array $types = array()){

        if( !is_array($types) || (is_array($types) && count($types) == 0) ){
            $types = array(EiDataSetStructure::$TYPE_NODE, EiDataSetStructure::$TYPE_LEAF);
        }

        return Doctrine_Query::create()->select("node.*")
            ->from("EiDataSetStructure node")
            ->where('node.ei_scenario_id = ?', $eiScenarioId)
            ->andWhereIn("node.type", $types)
            ->orderBy("node.lft")
            ;
    }

    /**
     * @param $eiScenarioId
     * @param array $types
     * @return array
     */
    public function getTreeArray($eiScenarioId, array $types = array()){
        return $this->getAllTree($eiScenarioId, $types)->fetchArray();
    }

    /**
     * @param $eiScenarioId
     * @param array $types
     * @return array
     */
    public function getTreeArrayForITree($eiScenarioId, array $types = array()){
        $structures = $this->getTreeArray($eiScenarioId, $types);
        $nodes = array();

        foreach( $structures as $structure ){
            $nodes[] = array(
                "id" => $structure["id"],
                "root_id" => $structure["root_id"],
                "parent_id" => $structure["ei_dataset_structure_parent_id"],
                "name" => $structure["name"],
                "slug" => $structure["slug"],
                "type" => ($structure["root_id"] == $structure["id"]) ? "root":($structure["type"] == "LeafDataSet" ? "leaf":"node"),
                "lft" => $structure["lft"],
                "rgt" => $structure["rgt"]
            );
        }

        return $nodes;
    }

    /**
     * @param EiNodeDataSet $parent
     * @return Doctrine_Collection
     */
    public function getChildrenAccordingToParent($parent){
        $query = Doctrine_Query::create()
            ->select('node.*')
            ->from('EiNodeDataSet node')
            ->where('node.level = ?', $parent->getLevel() + 1)
            ->andWhere('node.ei_dataset_structure_parent_id = ?', $parent->getId())
            ->orderBy('node.lft');

        return $query->execute();
    }

    /**
     * Méthode retournant la racine d'un arbre représenté par le scénario.
     *
     * @param $eiScenarioId
     * @return null
     */
    public function getRoot($eiScenarioId) {

        $root = null;
        $roots = $this->getNodesAtLevelQuery($eiScenarioId, 0)->execute();

        if ($roots)
            $root = $roots->getFirst();

        return $root;
    }

    /**
     * @param $scenarioId
     * @return array
     */
    public function getCountNodeChildren($scenarioId){
        $sql = "
        SELECT id, (SELECT COUNT(*) FROM ei_data_set_structure WHERE ei_scenario_id = ".$scenarioId." AND type = '".EiDataSetStructure::$TYPE_NODE."' AND lft > dss.lft AND rgt < dss.rgt) AS nbNodeChild
        FROM ei_data_set_structure dss
        WHERE ei_scenario_id = ".$scenarioId."
        AND type = '".EiDataSetStructure::$TYPE_NODE."'
        ";

        $elements = Doctrine_Manager::connection()->execute($sql)->fetchAll();
        $values = array();

        foreach( $elements as $element ){
            $values[$element["id"]] = $element["nbNodeChild"];
        }

        return $values;
    }
}