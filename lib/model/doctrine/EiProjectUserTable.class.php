<?php

/**
 * EiProjectUserTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EiProjectUserTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object EiProjectUserTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('EiProjectUser');
    }
    
    public function getEiProjet($project_id,$project_ref, $ei_user){
        $query = "  SELECT projet.*
            
                    FROM ei_projet projet
                    LEFT JOIN ei_project_user puser 
                    
                    ON puser.project_id = projet.project_id AND puser.project_ref = projet.ref_id
                    WHERE puser.user_id =".$ei_user->getUserId(). "
                    AND puser.user_ref =" .$ei_user->getRefId(). "
                    AND projet.project_id = " .$project_id."
                    AND projet.ref_id = ".$project_ref;
  
        $projet = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAll($query);

        if(count($projet) == 0)
            return null;
        
        $projet = $projet[0];
        $eiProjet = new EiProjet();
        $eiProjet->setArray($projet);
        
        return $eiProjet;
    }
    /* Récupération des utilisateurs d'un projet pour le typehead de sélection */
    public function getProjectUsers(EiProjet $ei_project,  Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection();
        $typehead=array(); $u=new sfGuardUser();
         $projectUsers=Doctrine_Core::getTable('sfGuardUser')
                ->createQuery('u')
                ->where('EiUser.guard_id=u.id')
                ->AndWhere('EiProjectUser.user_id=EiUser.user_id And EiProjectUser.user_ref=EiUser.ref_id ')
                ->AndWhere('EiProjectUser.project_id=? And EiProjectUser.project_ref =?',
                        array($ei_project->getProjectId(),$ei_project->getRefId()))
                ->execute();
        //Parse projectUsers for typehead 
        if(count($projectUsers)>0):
            foreach($projectUsers as $user):
            $typehead[]=$user->getEmailAddress();
            endforeach;
        endif;
        return $typehead;
    }
    
    
    public static function rechargerUserProjet($usersprojets, Doctrine_Connection $conn = null) {
        $conn->execute("TRUNCATE TABLE ei_project_user"); //On vide la table pour purger les utilisateurs 
        $userprojet = $usersprojets->getElementsByTagName("user_projet");
        if ($userprojet->length > 0) { //s'il ya au moins une balise trouvé
            $stmt = $conn->prepare("INSERT INTO ei_project_user (project_id, user_id, project_ref,user_ref,role) "
                            ."VALUES (:project_id, :user_id, :project_ref,:user_ref,:role) "
                            ."ON DUPLICATE KEY UPDATE project_id=project_id,user_id=user_id,project_ref=project_ref,user_ref=user_ref,role=:role"); 
            foreach ($userprojet as $u) {
                
                    $project_id = $u->getAttribute("project_id");
                    $user_id = $u->getAttribute("user_id");
                    $project_ref = $u->getAttribute("project_ref");
                    $user_ref = $u->getAttribute("user_ref"); 
                    $role = $u->getElementsByTagName("role")->item(0)->nodeValue;
                //recherche du projet en base
                if ($project_id != null && $project_ref != null) {
                    $q = Doctrine_Core::getTable('EiProjet')->findOneByProjectIdAndRefId($project_id, $project_ref);

                    if ($q && $q != null) {//si le projet existe
                        $stmt->bindValue("project_id", $project_id);
                        $stmt->bindValue("user_id", $user_id);
                        $stmt->bindValue("project_ref", $project_ref);
                        $stmt->bindValue("user_ref", $user_ref);
                        $stmt->bindValue("role", $role); 
                        $stmt->execute(array());
                    }
                }
            }
        }
    }
}