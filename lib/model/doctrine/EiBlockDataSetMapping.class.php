<?php

/**
 * EiBlockDataSetMapping
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    kalifastRobot
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class EiBlockDataSetMapping extends BaseEiBlockDataSetMapping
{
    // Nom des sous-types de la classe EiBlockDataSetMapping.
    public static $TYPE_IN = "SyncInParam";
    public static $TYPE_OUT = "SyncOutParam";
    private $relations = array();

    /**
     * @param EiDataSet $jdd
     * @return string|text
     */
    public function getValueFromJdd($jdd, $index = 1){
        if( $jdd != null && $jdd->getId() != "" ){
            $indice = 1;

            /** @var EiDataLine $line */
            foreach( $jdd->getEiDataLine() as $line ){
                if( $line->getEiDataSetStructureId() == $this->getEiDatasetStructureId() && $indice == $index ){
                    return $line->getValeur();
                }
                elseif( $line->getEiDataSetStructureId() == $this->getEiDatasetStructureId() ){
                    $indice++;
                }
            }
        }

        return "";
    }

    /**
     * Récupération de la valeur du paramètre dans le jeu de données du jeu de test.
     *
     * @param EiTestSet $testSet
     * @param int $index
     * @param EiTestSetBlockParam $parent
     * @return string
     */
    public function getValueFromTestSetJdd(EiTestSet $testSet, $index = 1, $parent){
        $mapId = $this->getEiDatasetStructureId();
        $testSetDS = $testSet->getFilteredEiTestSetDataSet($mapId, $index);
        $nb = $testSetDS->count();

        $logger = sfContext::getInstance()->getLogger();

        if( $nb > 0 ){
            /** @var EiTestSetDataSet $line */
            foreach( $testSetDS as $line ){
                $lineR = $line->getIndexRepetition();
                $matched = true;
                $context = $line->getContext();

                $logger->debug("--------------   DEB CONTEXT   -------------------");
                $logger->debug("--- Line : " . $context);

                if( $parent != null && $context != "" ){
                    $logger->debug("--- Père : " . $parent->getPath() . " / " . $parent->getIndexRepetition());
                    $logger->debug("--- Parent : " . $parent->getBlockContext());
                    $matched = $this->isMatchedContext($parent->getBlockContext(), $context);
                }

                $logger->debug("--------------   FIN CONTEXT   -------------------");

                if( ($parent != null && $matched) || $parent == null ) return $line->getValue();
            }
        }

        return "";
    }

    /**
     * @param EiDataSet $jdd
     * @return int
     */
    public function getCountMappingFromJdd($jdd){
        $count = 0;

        if( $jdd != null && $jdd->getId() != "" ){
            /** @var EiDataLine $line */
            foreach( $jdd->getEiDataLine() as $line ){
                if( $line->getEiDataSetStructureId() == $this->getEiDatasetStructureId() ){
                    $count++;
                }
            }
        }

        return $count;
    }

    /**
     * @param EiTestSet $testSet
     * @param EiTestSetBlockParam $parent
     * @return int
     */
    public function getCountMappingFromTestSetJdd($testSet, $parent = null)
    {
        $count = 0;
        $mapId = $this->getEiDatasetStructureId();
        $testSetDS = $testSet->getFilteredEiTestSetDataSet($mapId);
        $nb = $testSetDS->count();

        if( $nb > 0 )
        {
            $contexteBlock = $parent != null ? $parent->getBlockContext():"";

            /** @var EiTestSetDataSet $line */
            foreach( $testSetDS as $line ){
                // TODO: Améliorer
                $contexteJdd = $line->getContext();

                if( $contexteJdd == $contexteBlock )
                    $count++;
            }
        }

        return $count;
    }

    /**
     * @param $contextBlock
     * @param $contextJdd
     * @return bool
     */
    public function isMatchedContext($contextBlock, $contextJdd)
    {
        $jddContextLength = strlen($contextJdd);
        $blockContextLength = strlen($contextBlock);

        if( $jddContextLength != $blockContextLength)
            $contextBlock = substr($contextBlock, $jddContextLength * -1, $jddContextLength);

        return $contextBlock == $contextJdd;
    }

}