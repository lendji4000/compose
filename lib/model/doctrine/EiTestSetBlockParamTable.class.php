<?php

/**
 * EiTestSetBlockParamTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EiTestSetBlockParamTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object EiTestSetBlockParamTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('EiTestSetBlockParam');
    }

    /**
     * Méthode permettant de récupérer les IDs de tous les paramètres de blocs parents (directs) et frères
     * (or blocs communs, occurences de boucles).
     *
     * @param EiTestSetBlockParam $blockParam
     *
     * @TODO: Améliorer la façon dont la requête est traitée.
     */
    public function getAllParentsId(EiTestSetBlockParam $blockParam){
        // Récupération de la connexion BDD.
        $conn = Doctrine_Manager::connection();
        $parentsIds = array();

        $sqlDirectParents = "
        SELECT id, lft, rgt, level, ei_version_structure_id as vs_id
        FROM ei_test_set_block_param
        WHERE ei_test_set_id = ".$blockParam->getEiTestSetId()."
        AND lft < ".$blockParam->getLft()."
        AND rgt > ".$blockParam->getRgt()."
        ORDER BY lft;
        ";

        $directParents = $conn->execute($sqlDirectParents)->fetchAll();

        if( is_array($directParents) && count($directParents) > 0 ){
            $sqlBrothers = "
            SELECT id, lft, rgt, level, ei_version_structure_id as vs_id
            FROM ei_test_set_block_param
            WHERE ei_test_set_id = ".$blockParam->getEiTestSetId()."
            AND lft < ".$blockParam->getLft()."
            AND type IN (".implode(",", EiVersionStructure::getBlockTypesWithQuotes()).")
            ";

            foreach( $directParents as $directParent ){
                $parentsIds[] = $directParent["id"];
                $sqlBrothers.= "
                    AND NOT(ei_version_structure_id = ".$directParent["vs_id"]." AND level = ".$directParent["level"].")
                ";
            }

            $sqlBrothers.= "
                AND NOT(ei_version_structure_id = ".$blockParam->getEiVersionStructureId()." AND level = ".$blockParam->getLevel().")
            ";

            $sqlBrothers .= "
            ORDER BY lft;
            ";

            $brothers = $conn->execute($sqlBrothers)->fetchAll();

            if( is_array($brothers) && count($brothers) > 0 ){
                foreach( $brothers as $brother ){
                    if( !in_array($brother["id"], $parentsIds) ){
                        $parentsIds[] = $brother["id"];
                    }
                }

            }
        }

        return $parentsIds;
    }

    /**
     * @param EiTestSetBlockParam $blockParam
     * @param EiTestSetBlockStack $parentStack
     * @return EiTestSetDataSet|null
     */
    public function getDataFromDataSet(EiTestSetBlockParam $blockParam, EiTestSetBlockStack $parentStack = null){
        /** @var EiTestSetDataSetTable $tableDSS */
        $tableDSS = Doctrine_Core::getTable("EiTestSetDataSet");
        $mapping = null;

        if( $parentStack == null ){
            $mapping = $blockParam->getEiVersionStructure()->getMappingDataSet(EiBlockDataSetMapping::$TYPE_IN);
            $mapping != null ? $tableDSS->getRelatedDataFromUniqueDataSetStructure($blockParam->getEiTestSetId(), $mapping):null;
        }

        return $mapping;
    }

    /**
     * @param $testSetId
     * @param $parents
     * @return Doctrine_Query
     */
    public function getSubTree($testSetId, $parents){
        return Doctrine_Query::create()
            ->select("bp.*")
            ->from("EiTestSetBlockParam bp")
            ->where('bp.ei_test_set_id = ?', $testSetId)
            ->andWhereIn('bp.id', $parents)
            ->orWhere("(bp.type = ? AND bp.parent_id IN ?)", array(EiVersionStructure::$TYPE_BLOCK_PARAM, $parents))
            ->orderBy("bp.lft")
            ;
    }

    /**
     * @param $testSetId
     * @param $parents
     * @return array
     */
    public function getSubTreeArray($testSetId, $parents){
        return $this->getSubTree($testSetId, $parents)->fetchArray();
    }

    /**
     * @param $testSetId
     * @param $parents
     * @return array
     */
    public function getSubTreeArrayForITree($testSetId, $parents){
        $structures = $this->getSubTreeArray($testSetId, $parents);
        $nodes = array();

        foreach( $structures as $structure ){
            $nodes[] = array(
                "id" => $structure["id"],
                "root_id" => $structure["root_id"],
                "parent_id" => $structure["parent_id"],
                "name" => $structure["name"],
                "slug" => $structure["slug"],
                "type" => ($structure["root_id"] == $structure["id"]) ? "root":($structure["type"] == "EiBlockParam" ? "leaf":"node"),
                "value" => $structure["value"],
                "lft" => $structure["lft"],
                "rgt" => $structure["rgt"]
            );
        }

        return $nodes;
    }

    /**
     * @param $eiScenarioId
     * @return Doctrine_Query|Doctrine_Tree
     */
    public function getAllTree($testSetId){
        return Doctrine_Query::create()->select("bp.*")
            ->from("EiTestSetBlockParam bp")
            ->where('bp.ei_test_set_id = ?', $testSetId)
            ->orderBy("bp.lft")
        ;
    }

    /**
     * @param $eiScenarioId
     * @return array
     */
    public function getTreeArray($testSetId){
        return $this->getAllTree($testSetId)->fetchArray();
    }

    /**
     * @param $eiScenarioId
     * @return array
     */
    public function getTreeArrayForITree($testSetId){
        $structures = $this->getTreeArray($testSetId);
        $nodes = array();

        foreach( $structures as $structure ){
            $nodes[] = array(
                "id" => $structure["id"],
                "root_id" => $structure["root_id"],
                "parent_id" => $structure["parent_id"],
                "name" => $structure["name"],
                "slug" => $structure["slug"],
                "type" => ($structure["root_id"] == $structure["id"]) ? "root":($structure["type"] == "EiBlockParam" ? "leaf":"node"),
                "value" => $structure["value"],
                "lft" => $structure["lft"],
                "rgt" => $structure["rgt"]
            );
        }

        return $nodes;
    }

    /**
     * Génération des paramètres des blocks à partir du jeu de test et de son jeu de données.
     *
     * @param EiTestSet $testSet
     * @param EiTestSetBlockStack $stack
     * @return EiTestSetBlockParam|void
     */
    public function generate(EiTestSet $testSet, EiTestSetBlockStack $stack, Doctrine_Connection $conn = null)
    {
        $conn = $conn == null ? Doctrine_Manager::connection():$conn;

        $chronometre = new Chronometre();

        // Début mesure.
        $gen = $chronometre->lancerChrono("GENERATION PARAMETRES DE BLOCK", true);

        // On récupère le block à partir de la pile.
        $block = $stack->getEiVersionStructure();

        // Récupération du parent.
        $parent = $block->getNode()->getParent();
        $index = null;
        $path = "";

        if( $parent != null && ($parent instanceof EiTestSetBlockParam || $parent instanceof EiVersionStructure) ){
            /** @var EiTestSetBlockParam $parent */
            $parent = $this->getParentBlock($testSet, $parent);
            $path = $parent->getPath();
            // TODO: Calcul index.
            $index = $stack->getRepetitionIndex();
        }
        else{
            $index = 1;
        }


        // Si le fragment de l'élément de la pile est supérieur à 1 alors le père a déjà été généré et on le récupère.
        if( $stack->getPartIndex() > 1 ){
            $blockParam = Doctrine_Core::getTable("EiTestSetBlockParam")->findOneByEiTestSetIdAndIndexRepetitionAndEiVersionStructureId(
                $testSet->getId(),
                $index,
                $block->getId()
            );

//            var_dump($blockParam->toArray(false));
//            var_dump($stack->toArray(false));
        }
        else{
            // Génération des paramètres du Block.
            $blockParam = $block->generateTestSetParameters($testSet, $parent, $index, $path, false, $conn);
        }

        if( $blockParam != null ){
            // Ajout du block param dans la stack.
            $stack->setEiTestSetBlockParam($blockParam);
            $stack->setPath($blockParam->getPath());
            $stack->save($conn);
        }

        // Fin de la mesure.
        $chronometre->arreterEtAfficherChrono("GENERATION PARAMETRES DE BLOCK", $gen);

        return $blockParam;
    }

    /**
     * @param EiTestSet $testSet
     * @param EiVersionStructure $block
     * @return mixed|null
     *
     * @createdAt 18/08/2015
     * @updatedAt 18/08/2015
     */
    public function getParentBlock($testSet, $block){
        // Récupération de la connexion BDD.
        $conn = Doctrine_Manager::connection();

        try{
            // Définition requête SQL permettant de générer
            $searchSql = "
SELECT id
FROM ".$this->getTableName()."
WHERE ei_version_structure_id = ".$block->getId()."
AND ei_test_set_id = ".$testSet->getId()."
ORDER BY lft DESC
LIMIT 1;";

            // Récupération du block parent.
            $blockId = $conn->execute($searchSql)->fetch();

            if( !is_bool($blockId) && isset($blockId["id"]) ){
                return $this->find($blockId["id"]);
            }
        }
        catch( Exception $exc ){
            return null;
        }
    }
}