<?php

/**
 * EiTreeTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EiTreeTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object EiTreeTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('EiTree');
    }

    //Rechargement des éléments de type EiTree pour un projet 
    public function reload($projets,$project_id, $project_ref, Doctrine_Connection $conn = null, $openNodes) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();

        $items = $projets->getElementsByTagName("ei_trees");
        if ($items->length > 0) {//ya t-il des éléments à traiter?
            $ei_trees = $items->item(0)->getElementsByTagName("ei_tree");

            $collection = new Doctrine_Collection("EiTree");
            if ($ei_trees != null) {
                foreach ($ei_trees as $ei_tree) {

                    $id = $ei_tree->getAttribute("id");
                    //recherche du profil en base
                    if ($id != null) {
                        $q = Doctrine_Core::getTable('EiTree')->findOneById($id);
                    }
                    if ($q && $q != null) {//si l'element existe , on fait une mise à jour
                        
                        $q->name = $ei_tree->getElementsByTagName("name")->item(0)->nodeValue;
                        $q->type = $ei_tree->getElementsByTagName("type")->item(0)->nodeValue;
                        $q->obj_id = $ei_tree->getElementsByTagName("obj_id")->item(0)->nodeValue;
                        $q->ref_obj = $ei_tree->getElementsByTagName("ref_obj")->item(0)->nodeValue;
                        $q->is_root = $ei_tree->getElementsByTagName("is_root")->item(0)->nodeValue;
                        if($ei_tree->getElementsByTagName("path")->length >0):
                        $q->path = $ei_tree->getElementsByTagName("path")->item(0)->nodeValue;
                        endif;
                        $q->project_id = $project_id;
                        $q->project_ref = $project_ref;
                        $q->position = $ei_tree->getElementsByTagName("position")->item(0)->nodeValue;
                        $q->root_id = $ei_tree->getElementsByTagName("root_id")->item(0)->nodeValue;
                        $q->save($conn);
                    } else {//l'élément n'existe pas encore, et dans ce cas on le crée
                        $new_ei_tree = new EiTree();
                        $new_ei_tree->setId($id);
                        $new_ei_tree->name = $ei_tree->getElementsByTagName("name")->item(0)->nodeValue;
                        $new_ei_tree->type = $ei_tree->getElementsByTagName("type")->item(0)->nodeValue;
                        $new_ei_tree->obj_id = $ei_tree->getElementsByTagName("obj_id")->item(0)->nodeValue;
                        $new_ei_tree->ref_obj = $ei_tree->getElementsByTagName("ref_obj")->item(0)->nodeValue;
                        $new_ei_tree->is_root = $ei_tree->getElementsByTagName("is_root")->item(0)->nodeValue;
                        if($ei_tree->getElementsByTagName("path")->length >0):
                        $new_ei_tree->path = $ei_tree->getElementsByTagName("path")->item(0)->nodeValue;
                        endif;
                        $new_ei_tree->project_id = $project_id;
                        $new_ei_tree->project_ref = $project_ref;
                        $new_ei_tree->position = $ei_tree->getElementsByTagName("position")->item(0)->nodeValue;
                        $new_ei_tree->root_id = $ei_tree->getElementsByTagName("root_id")->item(0)->nodeValue;
                        $new_ei_tree->save($conn);
                        
                        if(isset($openNodes) && array_key_exists($new_ei_tree->getId(), $openNodes)){
                            foreach($openNodes[$new_ei_tree->getId()] as $i => $opened){
                                $copy = new EiTreeOpenedBy();
                                $copy->setEiTreeId($id);
                                $copy->setUserId($opened->getUserId());
                                $copy->setRefId($opened->getRefId());
                                $copy->save($conn);   
                            }
                        }
                    }
                }
                 
                return 1;
            }
            return null;
        }
    }

    
    public function openNode($ref_obj, $obj_id, $project_id, $project_ref, $type, $user){
        $noeud = self::getInstance()
                ->findOneByRefObjAndObjIdAndProjectIdAndProjectRefAndType($ref_obj, $obj_id, $project_id, $project_ref, $type);
        
        if($noeud){
            $opened = Doctrine_Core::getTable('EiTreeOpenedBy')
                ->findOneByUserIdAndRefIdAndEiTreeId($user->getUserId(), $user->getRefId(),  $noeud->getId());
        
            if($opened == null){
                $opened = new EiTreeOpenedBy();
                $opened->setRefId($user->getRefId());
                $opened->setUserId($user->getUserId());
                $opened->setEiTreeId($noeud->getId());
                $opened->save();
            }
        }
        
        return $noeud;
    }
    
    //Fonction permettant d'ouvrir un noeud et tous les noeuds parent du noeud en question
    public function RecursivelyOpenNode($noeud, $user){
          while($noeud){
            $this->openNode($noeud->getRefObj(), $noeud->getObjId(), $noeud->getProjectId(), 
                    $noeud->getProjectRef(), $noeud->getType(), $user);
            $noeud=$noeud->getNodeParent();
        }
    }
    
    /* Suppression des noeuds d'un projet donné  (noeuds de fonctions ou vues provenant de script ) */
    public function deleteProjectNodes($project_id, $project_ref , Doctrine_Connection $conn = null){ 
        if ($conn == null)  $conn = Doctrine_Manager::connection();
            $conn->getTable('EiTree')->createQuery('t')
                ->delete()
                ->where('t.project_id=? And t.project_ref=?',
                        array($project_id,$project_ref)) 
                ->execute();  
    }
    
    //Récupération des fils d'un noeuds avec les nombre d'enfants de chaque fils 
    //Tout ca ordonnée par nom 
    public function getNodesWithChildsInf($tree_id , Doctrine_Connection $conn = null) { 
        $result=array();
        if($tree_id==null) return $result;
        if($conn==null) $conn = Doctrine_Manager::connection();
        //Requête de sélection
        $q='select t.* , (select COUNT(t1.id) as nbchilds  from ei_tree t1 where t1.root_id=t.id) as nbchilds
            from ei_tree t 
            where t.root_id= '.$tree_id.' Order By t.position ASC '; 
        
        return $conn->fetchAll($q);  
            
    }
  
    public function insertJsonFunction($arraytab,$type="EiFunction" ,Doctrine_Connection $conn = null){
        if($conn==null) $conn = Doctrine_Manager::connection();
        //Si l'id du noeud ou du projet n'est pas renseigné 
        if(!isset($arraytab['t_id'])  || !isset($arraytab['p_id']) || !isset($arraytab['p_ref']) ) return null;
        $stmt = $conn->prepare("INSERT INTO ei_tree (id, name, type,obj_id,ref_obj,is_root,project_id,project_ref,position,path,root_id,created_at,updated_at) "
                            ."VALUES (:id, :name, :type,:obj_id,:ref_obj,:is_root,:project_id,:project_ref,:position,:path,:root_id,:created_at,:updated_at) "
                            ."ON DUPLICATE KEY UPDATE id=id, obj_id=obj_id, ref_obj=ref_obj,is_root=:is_root,name=:name,position=:position,path=:path,root_id=:root_id,created_at=:created_at,updated_at=:updated_at"); 
            
                    $stmt->bindValue("id", $arraytab['t_id']);
                    $stmt->bindValue("name", $arraytab['t_name']);
                    $stmt->bindValue("type", $arraytab['t_type']);
                    if($type=="EiFunction"):
                    $stmt->bindValue("obj_id", $arraytab['f_id']);
                    $stmt->bindValue("ref_obj", $arraytab['f_ref']);
                    endif;
                    if($type=="EiView"):
                    $stmt->bindValue("obj_id", $arraytab['v_id']);
                    $stmt->bindValue("ref_obj", $arraytab['v_ref']);
                    endif;
                    $stmt->bindValue("is_root", $arraytab['t_is_root']);
                    $stmt->bindValue("project_id", $arraytab['p_id']);
                    $stmt->bindValue("project_ref", $arraytab['p_ref']);
                    $stmt->bindValue("position", $arraytab['t_pos']);
                    $stmt->bindValue("path", $arraytab['t_path']);
                    $stmt->bindValue("root_id", $arraytab['t_root']); 
                    $stmt->bindValue("created_at", $arraytab['t_creat']);
                    $stmt->bindValue("updated_at", $arraytab['t_updat']);
                    $stmt->execute(array());
                    return 1;
    }
}