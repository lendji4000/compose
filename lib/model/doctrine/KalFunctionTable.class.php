<?php

/**
 * KalFunctionTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class KalFunctionTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object KalFunctionTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('KalFunction');
    }
    
    /*
     * Récupération des commandes d'une fonction par rapport au profil
     */
    public function getCmdsForProfile($function_id,$function_ref,EiProfil $ei_profile=null){
        if($function_id==null ||  $function_ref==null || $ei_profile==null) return null;
        
    }
    //Recherche des campagnes de tests d'une fonction
    public function getFunctionCampaigns($function_id,$function_ref,  Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        return $conn->createQuery()->from('EiFunctionCampaigns fc')   
                ->innerJoin('fc.EiCampaign c')
                ->where('fc.function_id= ? And fc.function_ref = ?',array($function_id,$function_ref))
                ->execute();
    }
    //Récupération de la dernière execution d'une fonction
    public function getLastExec($function_id,$function_ref,  Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        return $conn->fetchAll("select * from ei_test_set_function tf inner join ei_test_set_state ts on UCASE(ts.state_code)=UCASE(tf.status)  where tf.function_id=".$function_id." And tf.function_ref=".$function_ref." Order by tf.date_debut desc limit 1");
    } 
    public function getAllFunctionExecs($function_id,$function_ref,  Doctrine_Connection $conn=null){
        return "select * from ei_test_set_function where function_id=".$function_id." And function_ref=".$function_ref;
    }
    //Récupération de toutes les executions de la fonction
    public function getFunctionExecs($function_id,$function_ref,  Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        return $conn->fetchAll($this->getAllFunctionExecs($function_id, $function_ref,$conn)." Order by date_debut desc");
    }
    public function getAbortedFunctionExecs($function_id,$function_ref,  Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        return $conn->fetchAll($this->getAllFunctionExecs($function_id, $function_ref,$conn)." And status <> 'ok' And status<> 'ko' Order by date_debut desc");
    }
    public function getSuccessFunctionExecs($function_id,$function_ref,  Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        return $conn->fetchAll($this->getAllFunctionExecs($function_id, $function_ref,$conn)." And status = 'ok' Order by date_debut desc");
    }
    public function getKoFunctionExecs($function_id,$function_ref,  Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        return $conn->fetchAll($this->getAllFunctionExecs($function_id, $function_ref,$conn)." And status = 'ko' Order by date_debut desc");
    }
    //Recherche des sujets d'une fonction
    public function getFunctionSubjects($function_id,$function_ref,  Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection();  
        $q=  $conn->createQuery()->select('s.*,
               sc.subject_id as sc_subject_id, sc.campaign_id as sc_campaign_id,
               a.id as author_id,a.username as author_username,a.email_address as author_email,
               tnr.id as tnr_id , tnr.name as tnr_name, tnr.coverage as tnr_coverage,
               d.id as d_delivery_id, d.name as delivery_name,
               st.id as st_id, st.name as st_name,
               p.id as p_id, p.name as p_name,
               t.id as t_id, t.name as t_name,
               as.guard_id as as_assign_user,as.subject_id as as_subject_id, as.author_id as as_author_assign_id,
               ass.id as ass_author_id , ass.username as ass_username,
               sf.subject_id as sf_subject_id, sf.function_id as sf_function_id,sf.function_ref as sf_function_ref, sf.automate as sf_automate,
               fs.campaign_id as fs_campaign_id, fs.subject_id as fs_subject_id, fs.state as fs_state,fs.description as fs_description')
                ->from('EiSubject s,
                            s.sfGuardUser a,
                            s.subjectCampaigns sc WITH sc.subject_id=s.id And sc.is_tnr=1,
                            sc.EiCampaign tnr   ,
                            s.EiDelivery d ,
                            s.EiSubjectState st ,
                            s.EiSubjectPriority p ,
                            s.EiSubjectType t ,
                            s.subjectAssignments as ,
                            as.AssignmentUser as ass,
                            s.subjectFunctions sf, 
                            s.flagSubjects as fs')
                ->where('sf.function_id= ? And sf.function_ref = ?',array($function_id,$function_ref));
        
            return $q->fetchArray();
        
    } 
    
    /* Récupération des paramètres de fonction (paramètres d'entrée et sortie */
    public function getKalParams(KalFunction $ei_function, $param_type=null){
        if($param_type==null)
            return Doctrine_Core::getTable('EiFunctionHasParam')
                ->findByFunctionRefAndFunctionId(
                        $ei_function->getFunctionRef(),
                        $ei_function->getFunctionId());
        
        return Doctrine_Core::getTable('EiFunctionHasParam')
                ->findByFunctionRefAndFunctionIdAndParamType(
                        $ei_function->getFunctionRef(),
                        $ei_function->getFunctionId(),
                        $param_type);
    }
    
    //Récupération des scénarios dans lesquels la fonction est utilisée 
    public function getScenariosFunction($function_id ,$function_ref,$project_id,$project_ref, Doctrine_Connection $conn = null){ 
        if ($conn == null)
            $conn = Doctrine_Manager::connection(); 
        $q="SELECT distinct(vw.v_id),
                 (select count(fonction_id) from ei_scenarios_function_vw where v_id=vw.v_id and kf_function_id=vw.kf_function_id and kf_function_ref=vw.kf_function_ref group by v_id) as nb_occurences,
                 v_libelle,s_nom_scenario,kf_function_id,kf_function_ref,kf_project_id,kf_project_ref,s_id,s_ei_node_id
                 FROM ei_scenarios_function_vw vw  ";
        if($project_id!=null && $project_ref!=null):
            $q.=" Where vw.kf_project_id =".$project_id." And vw.kf_project_ref=".$project_ref;
            if($function_id!=null && $function_ref!=null):
                 $q.=" And vw.kf_function_id =".$function_id." And vw.kf_function_ref=".$function_ref;
            endif;
        endif;
        return $conn->fetchAll($q);
    }
    
    //Rechargement des éléments de type KalFunction pour un projet 
    public function reload($projets,$project_id, $project_ref, Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        //Création de la collection d'objet KalFunction à ajouter
        $collection = new Doctrine_Collection("KalFunction");
        
        $items = $projets->getElementsByTagName("ei_functions");
        if ($items->length > 0) {//ya t-il des éléments à traiter?
            $ei_functions = $items->item(0)->getElementsByTagName("ei_function");


            if($ei_functions->length > 0){
                foreach ($ei_functions as $ei_function) {

                    $function_id = $ei_function->getAttribute("function_id");
                    $function_ref = $ei_function->getAttribute("function_ref");
                    //recherche de la fonction  en base
                    if ($function_id != null && $function_ref != null) {
                        $q = Doctrine_Core::getTable('KalFunction')->findOneByFunctionIdAndFunctionRef($function_id, $function_ref);

                        if ($q && $q != null) {//si l'element existe , on fait une mise à jour
                            $q->setDescription($ei_function->getElementsByTagName("description")->item(0)->nodeValue);
                            $q->setIsActive($ei_function->getElementsByTagName("is_active")->item(0)->nodeValue); 
                            $q->save($conn);
                            //On supprime toutes les commandes associées à la fonction
                            Doctrine_Core::getTable('EiFunctionHasCommande')
                                    ->deleteAssociatedCmd($q,$conn);
                        } else {//l'élément n'existe pas encore, et dans ce cas on le crée
                            $new_ei_function = new KalFunction();
                            $new_ei_function->setFunctionId($function_id);
                            $new_ei_function->setFunctionRef($function_ref);
                            $new_ei_function->setProjectId($project_id);
                            $new_ei_function->setProjectRef($project_ref);
                            $new_ei_function->setDescription($ei_function->getElementsByTagName("description")->item(0)->nodeValue);
                            $new_ei_function->setIsActive($ei_function->getElementsByTagName("is_active")->item(0)->nodeValue);
                            $collection->add($new_ei_function);
                        }
                    }
                }
                if($collection->getFirst()) $collection->save($conn); //Sauvegarde de la collection
                return 1;
            }
            return null;
        }
    }
     

    //Suppression des fonctions inactives
    public function deleteInactiveFunctions(EiProjet $ei_project, Doctrine_Connection $conn){
        if ($ei_project==null) return null;
        
        //Suppression de l'objet EiFonction
        $conn->createQuery()
                ->from('EiFonction f')
                ->where('KalFunction.function_id=f.function_id And KalFunction.function_ref=f.function_ref')
                ->andWhere('KalFunction.project_id=? And KalFunction.project_ref=? And KalFunction.is_active = false',
                        array($ei_project->getProjectId(),$ei_project->getRefId()))
                ->execute()->delete();
        
        //Suppression de la fonction sous Script
        $conn->createQuery()->delete() 
                ->from('KalFunction f')
                ->where('f.project_id=? And f.project_ref=? And f.is_active = false',
                        array($ei_project->getProjectId(),$ei_project->getRefId()))
                ->execute();
    }
    
    public function chargerFonctions($KalFunctions , Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection();
        if($KalFunctions!=null){
            foreach($KalFunctions as $KalFunction){
                    $function_id=null;    $function_ref=null;$project_ref=null;    $project_id=null;  $name=null;
                    $description=null;      $created_at=null ; $updated_at=null;
                    if($KalFunction->getElementsByTagName("function_id")){$function_id=$KalFunction->getElementsByTagName("function_id")->item(0)->nodeValue ;}
                    if($KalFunction->getElementsByTagName("function_ref")){$function_ref=$KalFunction->getElementsByTagName("function_ref")->item(0)->nodeValue ;}
                    if($KalFunction->getElementsByTagName("project_ref") ){$project_ref= $KalFunction->getElementsByTagName("project_ref")->item(0)->nodeValue ;}
                    if($KalFunction->getElementsByTagName("project_id") ){$project_id= $KalFunction->getElementsByTagName("project_id")->item(0)->nodeValue ;}
                    if($KalFunction->getElementsByTagName("name") ){$name= $KalFunction->getElementsByTagName("name")->item(0)->nodeValue ;}
                    if($KalFunction->getElementsByTagName("description") ){$description= $KalFunction->getElementsByTagName("description")->item(0)->nodeValue ;}
                    if($KalFunction->getElementsByTagName("created_at") ){$created_at= $KalFunction->getElementsByTagName("created_at")->item(0)->nodeValue ;}
                    if($KalFunction->getElementsByTagName("updated_at") ){$updated_at= $KalFunction->getElementsByTagName("updated_at")->item(0)->nodeValue ;}
                    if($KalFunction->getElementsByTagName("delta") ){$delta= $KalFunction->getElementsByTagName("delta")->item(0)->nodeValue ;}
                    //recherche de la fonction en base
                    if($function_id!=null && $function_ref!=null){
                        $q=Doctrine_Core::getTable('KalFunction')->findOneByFunctionIdAndFunctionRef($function_id,$function_ref);
                    }
                        if($q && $q!=null){//si l'element existe , on fait une mise à jour
                            $q->name=$name;
                            $q->description=$description;
                            $q->function_ref=$function_ref;
                            $q->function_id=$function_id;
                            $q->project_id=$project_id;
                            $q->project_ref=$project_ref;
                            //$q->setDelta($delta);
                            $q->save();
                        }
                    else{//le projet n'existe pas encore et dans ce cas on le crée
                        $ei_KalFunction=new KalFunction();
                        $ei_KalFunction->name=$name;
                        $ei_KalFunction->description=$description;
                        $ei_KalFunction->function_ref=$function_ref;
                        $ei_KalFunction->function_id=$function_id;
                        $ei_KalFunction->project_id=$project_id;
                        $ei_KalFunction->project_ref=$project_ref;
                        //$ei_KalFunction->setDelta($delta);
                        $ei_KalFunction->save();
                    }
            }
        }
        return null;
    }
    public static function getListe($ref = 1001, $id = -1, $avec_params = false)
    {
        $a = self::getInstance()->createQuery()->addWhere("project_ref = ".$ref);
        $a = $a->execute();
        $liste = array();
        $liste[""] = "Sélectionner";

        if( $a != null ):
            foreach( $a->getData() as $func ):
                $liste[$func->function_ref . "_" . $func->function_id] = $func;
            endforeach;
        endif;

        return $liste;
    }

    
    
    
    //Rechargement d'une fonction
    
    public function getFunctionAndReload( $delta , $id_projet,$ref_projet,$function_id,$function_ref,$login_syst,$pwd_syst,$login_user ,  Doctrine_Connection $conn =null){
        if($conn==null) $conn = Doctrine_Manager::connection();
        $resultReloadInterface= $this->reloadInterfaceTable( $delta,$id_projet,$ref_projet,$function_id,$function_ref,$login_syst,$pwd_syst,$login_user ,$conn );
        //Traitement des erreurs recues pour le renvoie du résultat
                
                if($resultReloadInterface ==10) $resultReloadInterface="La version est à jour";
                if($resultReloadInterface ==-10) $resultReloadInterface="Le fichier n'a pas pu etre chargé , erreur de connexion  ou de parsing";
                if($resultReloadInterface ==-9) $resultReloadInterface="La fonction n'a pas été retrouvé dans le système central";
                if($resultReloadInterface ==-8) $resultReloadInterface="Echec de connexion : Login ou mot de passe erroné";
                if($resultReloadInterface ==-7) $resultReloadInterface="Erreur : un  paramètre est manquant au web service";
                return $resultReloadInterface;
    }
    
    //Rechargement des tables d'interface liées à la fonction
    public function reloadInterfaceTable($delta ,$id_projet,$ref_projet,$function_id,$function_ref,$login_syst,$pwd_syst,$login_user ,Doctrine_Connection $conn =null){
        if($conn==null) $conn = Doctrine_Manager::connection();
        // Vérification du delta de la fonction //peut faire tomber le webservice
        if($delta==null) $delta=0;
        $xmlfile = ServicesWeb::loadResultOfWebService(MyFunction::getPrefixPath() . "serviceweb/" .
                        $id_projet . "/" . $ref_projet. "/" . $function_id. "/" . $function_ref .
                         "/". $login_syst . "/". $pwd_syst ."/".$login_user. "/". $delta ."/reloadFunction.xml");
        if(!$xmlfile) return -10;
        //Récupération des données du fichier
        $dom = new DOMDocument();
        $load_result=$dom->loadXML($xmlfile);
        if($load_result==false) return -10; //Erreur de chargement du fichier
        $dom->save('interface.xml');  
        //Vérification  du contenu du fichier 
        
        $racine=$dom->documentElement; 
        if(!($racine=$dom->documentElement)) return -10; //Le fichier n'a pas pu etre chargé , erreur de connexion  ou de parsing
        
        //Verification de l'état de l'objet à mettre à jour
        if($dom->getElementsByTagName("version_a_jour")->length>0 ) return 10; //La version est à jour
        //Récupération des erreurs éventuelles de chargment du fichier et/ou de la fonction
        if($dom->getElementsByTagName("unlocate_function")->length>0 ) return -9; //La fonction n'a pas été retrouvé dans le système central         
        if($dom->getElementsByTagName("connect_error")->length>0 )  return -8; //Echec de connexion : Login ou mot de passe erroné
        if($dom->getElementsByTagName("param_error")->length>0 )  return -7; //Erreur : un  paramètre est manquant au web service
        
        //Recupération des informations de fonction 
        if ($dom->documentElement && $dom->documentElement->getElementsByTagName("info")->length>0) {
            $resultReloadInterfaceFunction = Doctrine_Core::getTable('ScriptEiFunction')
                    ->ReloadInterfaceFunction($dom->documentElement->getElementsByTagName("info")->item(0), $conn);
            
            }
            //Recupération des commandes de la fonction 
        if ($dom->documentElement && $dom->documentElement->getElementsByTagName("ei_commandes")->length>0) {
            $resultReloadInterfaceCommandes = Doctrine_Core::getTable('ScriptEiFunctionHasCommande')
                    ->ReloadInterfaceCommandes( $function_id, $function_ref,$dom->documentElement->getElementsByTagName("ei_commandes")->item(0),$conn);
            } 
            
            //Recupération des liaisons script-version 
        if ($dom->documentElement && $dom->documentElement->getElementsByTagName("ei_script_versions")->length>0) {
            $resultReloadInterfaceScriptVersions = Doctrine_Core::getTable('ScriptEiScriptVersion')
                    ->ReloadInterfaceScriptVersions ($function_id,$function_ref,$dom->documentElement->getElementsByTagName("ei_script_versions")->item(0),$conn);
            } 
            
       //Recupération des scripts de fonction     
        if ($dom->documentElement && $dom->documentElement->getElementsByTagName("ei_scripts")->length>0) {
            $resultReloadInterfaceScripts =  Doctrine_Core::getTable('ScriptEiScript')
                    ->ReloadInterfaceScripts($function_id, $function_ref,$dom->documentElement->getElementsByTagName("ei_scripts")->item(0),$conn);
            }     
        //Recupération de la notice de la fonction et des éléments de notice (versionNotice, NoticeProfil ,ImgProfil)    
        if ($dom->documentElement && $dom->documentElement->getElementsByTagName("ei_notice")->length>0) {
            $resultReloadInterfaceNotice =  Doctrine_Core::getTable('ScriptEiNotice')
                    ->ReloadInterfaceNotice ($function_id, $function_ref,$dom->documentElement->getElementsByTagName("ei_notice")->item(0),$conn);
            }    
            return 1;
    }
    
    //Rechargement des données récupérées par web service dans les tables utilisées sur test
    
    public function getFunctionAndReloadInTest($KalFunction,$scriptfunction,  Doctrine_Connection $conn =null){
        //Recupération des informations de fonction 
        
            $resultReloadFunctionInTest = $this->ReloadFunctionInTest($KalFunction,$scriptfunction,$conn);
            
            //Recupération des commandes de la fonction 
            $resultReloadCommandesInTest = Doctrine_Core::getTable('EiFunctionHasCommande')->ReloadCommandesInTest($KalFunction,$scriptfunction,$conn);
            
            
            //Recupération des liaisons script-version 
            $resultReloadScriptVersionsInTest = Doctrine_Core::getTable('EiScriptVersion')->ReloadScriptVersionsInTest ($KalFunction,$scriptfunction,$conn);
            
            //Recupération des scripts de fonction     
            $resultReloadScriptsInTest =  Doctrine_Core::getTable('EiScript')->ReloadScriptsInTest($KalFunction,$scriptfunction,$conn);
            
            //Recupération de la notice de fonction et de ses objets liés     
            $resultReloadNoticeInTest =  Doctrine_Core::getTable('EiNotice')->ReloadNoticeInTest($scriptfunction,$conn);

            //Traitement des resultats obtenus
            if( $resultReloadFunctionInTest ==1 && $resultReloadScriptsInTest==1 && $resultReloadCommandesInTest==1 && 
                    $resultReloadScriptVersionsInTest==1 && $resultReloadNoticeInTest==1) return 1;
            else return  0;
    }
    
    //Rechargement des informations de la fonction sous test
    
    public function ReloadFunctionInTest($KalFunction ,$scriptfunction ,  Doctrine_Connection $conn =null){
        if($conn==null) $conn = Doctrine_Manager::connection();
        if( $scriptfunction==null) throw new Exception('fonction du système central introuvable: Contactez l administrateur');
        $conn->update($conn->getTable('KalFunction'), array(
            'name' => $scriptfunction->getName(),
            'description' => $scriptfunction->getDescFonction(),
            'function_id' => $scriptfunction->getFunctionId(),
            'function_ref' => $scriptfunction->getFunctionRef(),
            'project_id' => $scriptfunction->getProjectId(),
            'project_ref' => $scriptfunction->getProjectRef(),
            'delta' => $scriptfunction->getDelta(),
            'deltaf' => $scriptfunction->getDeltaf(),
        ),
                array('function_id' => $KalFunction->getFunctionId(),'function_ref' =>$KalFunction->getFunctionRef()));
        
        return 1;
    }
    
    public function insertJsonFunction($arraytab,  Doctrine_Connection $conn = null){
        if($conn==null) $conn = Doctrine_Manager::connection();
        //Si l'id de la fonction ou du projet n'est pas renseigné 
        if(!isset($arraytab['f_id']) || !isset($arraytab['f_ref']) || !isset($arraytab['p_id']) || !isset($arraytab['p_ref']) ) return null;
        $stmt = $conn->prepare("INSERT INTO kal_function (function_id, function_ref, project_id,project_ref,description,is_active,delta,deltaf,created_at,updated_at) "
                            ."VALUES (:function_id, :function_ref, :project_id,:project_ref,:description,:is_active,:delta,:deltaf,:created_at,:updated_at) "
                            ."ON DUPLICATE KEY UPDATE function_id=function_id,function_ref=function_ref,description=:description,is_active=:is_active,delta=:delta,created_at=:created_at,updated_at=:updated_at"); 
            
                    $stmt->bindValue("function_id", $arraytab['f_id']);
                    $stmt->bindValue("function_ref", $arraytab['f_ref']);
                    $stmt->bindValue("project_id", $arraytab['p_id']);
                    $stmt->bindValue("project_ref", $arraytab['p_ref']);
                    $stmt->bindValue("description", $arraytab['f_desc']);
                    $stmt->bindValue("is_active", $arraytab['f_act']);
                    $stmt->bindValue("delta", $arraytab['f_delt']);
                    $stmt->bindValue("deltaf", $arraytab['f_delt_f']);
                    $stmt->bindValue("created_at", $arraytab['f_creat']);
                    $stmt->bindValue("updated_at", $arraytab['f_updat']);
                    $stmt->execute(array());
                    return 1;
    }
    
    /* Récupération des bugs d'une fonction */
    
    public function getFunctionBugs(){
        $q="select t.id , t.name , t.obj_id as t_obj_id, t.ref_obj as t_ref_obj , sb.id as sb_id , sb.name as sb_name, sb.created_at as sb_creat  from ei_tree t
            inner join kal_function k on t.obj_id=k.function_id and t.ref_obj=k.function_ref
            left join ei_script s on k.function_id=s.function_id and k.function_ref=s.function_ref
            left join ei_subject sb on sb.package_id=s.ticket_id and sb.package_ref=s.ticket_ref
            where k.function_id=546 and k.function_ref=88


            union 

            select t.id , t.name , t.obj_id as t_obj_id, t.ref_obj as t_ref_obj ,sb.id as sb_id ,sb.name as sb_name, sb.created_at as sb_creat from ei_tree t
            inner join kal_function k on t.obj_id=k.function_id and t.ref_obj=k.function_ref 
            left join ei_subject_functions as sf on sf.function_id=k.function_id and sf.function_ref=k.function_ref
            left join ei_subject sb on sb.id=sf.subject_id
            where k.function_id=546 and k.function_ref=88

            order by sb_creat desc";
    }
     
    /* Récupération des fonctions modifiées  dans le cadre d'une livraison et executées/ou non  */
    public function getModifyAndExecDelFunctions(EiDelivery $ei_delivery=null , EiSubject $ei_subject=null,  KalFunction $kal_function=null,$executed=true,  Doctrine_Connection $conn = null ){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        
        $q="select COUNT(DISTINCT(lf.ei_scenario_id)) as nbScenario ,COUNT(DISTINCT(fc.campaign_id)) as nbCamp, MAX(tsf.date_debut) as last_ex,
            df.* , tsf.* from ei_delivery_impacted_functions_vw df 
            left join ei_test_set_function tsf on tsf.function_id=df.t_obj_id and tsf.function_ref=df.t_ref_obj
            left join eifunction_campaigns fc on fc.function_id=df.t_obj_id  and fc.function_ref=df.t_ref_obj
            left join ei_log_function lf on lf.ei_test_set_function_id = tsf.id ";
        /* On vérifie que la livraison est renseignée et on ajoute le critère de sélection*/
        if($ei_delivery!=null):
            $q.=" where (df.s_delivery_id = ".$ei_delivery->getId()." or df.s2_delivery_id = ".$ei_delivery->getId().") "; 
            /*Si on recherche les fonctions modifiées et non executées */
            if(!$executed):
                $q.=" And tsf.id IS NULL";
            else:
                $q.=" And tsf.id IS NOT NULL";
            endif;
        endif;
        /* Si on recherche les fonctions pour un bug , alors :*/
        if($ei_subject!=null):
             $q.=" where ( (df.s_id=".$ei_subject->getId().") or  (df.s2_id=".$ei_subject->getId().")) ";
        endif; 
        /* Si on a spécifié la fonction concernée , alors on rajoute le critère */
        if($ei_subject!=null && $kal_function!=null):
            $q.=" and df.t_obj_id=".$kal_function->getFunctionId()." and df.t_ref_obj=".$kal_function->getFunctionRef();
        endif;
        /* On complète la requête */
            $q.=" group by df.t_id order by tsf.date_debut desc  ";  
            //throw new Exception($q);
            return $conn->fetchAll($q);
             
    }
    /* Fonctions executées  ou pas sur un projet */
    public  function getExFunctions(EiProjet $ei_project, array $criterias ,  Doctrine_Connection $conn = null){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        /* Construction de notre requête */
        $q=" select tsf.status ,tsf.date_debut ,tsf.date_fin,k.criticity, t.* ,COUNT(Distinct(tsf.id)) as nbEx , COUNT(DISTINCT(lf.ei_scenario_id)) as nbScenario ,COUNT(DISTINCT(fc.campaign_id)) as nbCamp, MAX(tsf.date_debut) as last_ex , COUNT(distinct(tsf.id)) as nbTestSet 
            from ei_tree t 
           inner join kal_function k on t.obj_id=k.function_id and t.ref_obj=k.function_ref
           left join eifunction_campaigns fc on fc.function_id=k.function_id and fc.function_ref=k.function_ref
           left join ei_test_set_function tsf on tsf.function_id=k.function_id and tsf.function_ref=k.function_ref
           left join ei_log_function lf on lf.ei_test_set_function_id = tsf.id 
           where t.project_id=".$ei_project->getProjectId()." and t.project_ref =".$ei_project->getRefId()."  
            ";
        /*On vérifie les critère de tri récupérés dans notre tableau */
        if( !(isset($criterias['all']) && $criterias['all'])):
            //Ici on rajoute le critère de récupération des fonctions exécutées  
            $suppCriteria="";
                if (isset($criterias['success']) && $criterias['success']):
                    $suppCriteria.="and ( "; 
                    $q.="and ( ";
                    $q.= " tsf.status like '%ok%' ";
                endif;
                if (isset($criterias['failed']) && $criterias['failed']):
                    if($suppCriteria==""): 
                        $suppCriteria.="and ( "; 
                        $q.="and ( ";
                        else:
                        $q.=" or ";
                    endif;
                    $q.= "   tsf.status like '%ko%' ";
                endif; 
            //Ici on a les fonctions non exécutées
            if (isset($criterias['never_plan']) && $criterias['never_plan']):
                if($suppCriteria==""):
                    $suppCriteria.="and ( "; 
                    $q.="and ( ";
                        else:
                        $q.=" or ";
                    endif;
                $q.= "  tsf.id IS   NULL  "; 
                endif;
           // Rien que les fonctions  aborted 
                if (isset($criterias['aborted']) && $criterias['aborted']):
                    if($suppCriteria==""): 
                        $suppCriteria.="and ( "; 
                        $q.="and ( ";
                        else:
                        $q.=" or ";
                    endif;
                    $q.= "  tsf.status like '%Blank%'  ";
                endif; 
                
              /* On vérifie que des critères on été reseigné */
              if($suppCriteria!=""):
                  $suppCriteria.=" ) ";
                  $q.=" ) ";
              endif;  
                
            /* Gestion des intervalles d'exécutions */
            if (isset($criterias['min_date']) && $criterias['min_date'] != null):
                $min_date=$criterias['min_date'] ; $min_date.=" 00:00:00";
                $q.= " And tsf.date_debut >= '" .$min_date . "' and tsf.date_fin >='" .$min_date."'";
            endif;
            if (isset($criterias['max_date']) && $criterias['max_date'] != null):
                $max_date=$criterias['max_date'] ; $max_date.=" 00:00:00";
                $q.= " And tsf.date_debut <= '" . $max_date."'";
            endif;
            /* On vérifie si l'utilisateur a filtrer par rapport au nombre de semaine passées */
            if (isset($criterias['weekPassed']) && $criterias['weekPassed'] != null):
                $q.=" And tsf.date_debut >=  DATE_SUB(CURDATE(), INTERVAL " . $criterias['weekPassed'] . " WEEK)";
            endif;
        endif;
        /* Gestion de la criticité des fonctions */
        if(isset($criterias["criticity"]) && count($criterias["criticity"])>0):
            $q.=" And ("; $k=count($criterias["criticity"]);  
            foreach($criterias["criticity"] as $criticity ):  
                $k--;
                  $q.=" k.criticity like '%".$criticity."%'"; 
                if($k!=0): $q.=" OR"; endif;
            endforeach;
            $q.=")";
        endif;
        /* On ordonne les résultats */
        $q.=" group by t.id 
              order by tsf.date_debut desc , updated_at desc";
        //throw new Exception ($q);
        return $conn->fetchAll($q);
    }
}