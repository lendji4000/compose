<?php

/**
 * EiFunctionHasCommande
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    kalifastRobot
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class EiFunctionHasCommande extends BaseEiFunctionHasCommande
{ 
    
    /**
     * Retourne la chaine de caractères finale d'interpréation d'un paramètre.
     * En lui fournissant la chaine parsée au niveau des fonctions eiFast, on introduit
     * ce résultat, dans les paramètres de la fonction.
     * Cette fonction effectura se matching sur la chaine a parser qui sera soit la valeur, soit la
     * cible des commandes sélénium
     * 
     * @author Grégory Elhaimer
     * 
     * @param type $strToParse  La chaine à parser
     * @param array $params     Les paramètres a rechercher
     * @return string 
     */
    public function parseXSL($strToParse ,array $params = null){
        // récupération des paramètres précédés par un nombre impair de #
        $pattern = "#(?<!\#)(\#\#)*(\#\{[\w./]*})#";
        $nbMatched = preg_match_all($pattern,$strToParse, $matches);
        
        //si on a décecté des paramètres
        if(isset($matches) && $params){
            $toReplace = array();
            //pour chacun des éléments matchés, on vérifique que celui-ci existe
            //dans ceux passés à la fonction.
            foreach($matches[0] as $m => $match){
                $paramFound = substr($matches[2][$m], 2, -1);
                $matches[0][$m] = '#'.preg_quote($match, '#').'#';
                if(key_exists($paramFound, $params)){
                    $toReplace[$m] = $params[$paramFound];
                }
                else{
                    //sinon on le remplace par sa valeur par défaut.q
                    //Le else n'est en théorie jamais atteind.
                    //Le else correspond plutot au cas ou un aurait l'utilisation
                    //d'un paramètre qui n'existe, en fait, pas pour la fonction.
                    $toReplace[$m] = 'Undefined';
                }
            }
            $strToParse = preg_replace($matches[0], $toReplace, $strToParse);
        } 
        
        return preg_replace("#\#\##", "#", $strToParse);
    }
    
    /**
     * Génère l'ensemble de balise selenium après interprétation
     * des paramètres contenus dans chaque commande et cibles.
     * @author Grégory Elhaimer
     * 
     * @param array $params
     * @return string 
     */
    public function generateXSL(DOMDocument $xsl, $parentTag, array $params = null){
        $seleneseTag = $xsl->createElement("selenese");
        $commandeTag = $xsl->createElement("commande");
        
        $targetTag = $xsl->createElement("target");
        $valueTag = $xsl->createElement("value");
        
        $commandeText = $xsl->createTextNode($this->getName());
        $targetText = $xsl->createTextNode($this->parseXSL($this->getCommandTarget(),$params));
        $valueText = $xsl->createTextNode($this->parseXSL($this->getCommandValue(),$params));
        
        $commandeTag->appendChild($commandeText);
        $targetTag->appendChild($targetText);
        $valueTag->appendChild($valueText);
        
        $seleneseTag->appendChild($commandeTag);
        $seleneseTag->appendChild($targetTag);
        $seleneseTag->appendChild($valueTag);
        
        $parentTag->appendChild($seleneseTag);
    }
}
