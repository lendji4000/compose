<?php

/**
 * EiCampaignGraphTypeTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EiCampaignGraphTypeTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object EiCampaignGraphTypeTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('EiCampaignGraphType');
    }
    //Récupération des steps type de campagne pour un projet
    public function getStepTypeForProject($project_id,$project_ref,$conn){
        if($conn==null) $conn = Doctrine_Manager::connection();
        return $conn->createQuery()->from('EiCampaignGraphType')
             ->where('project_id= ? And project_ref=? ',array($project_id,$project_ref)) 
             ->execute();
    }
    //Récupération de la requête pour la liste des steps type de campagne
    public function getProjectCampaignGraphType($project_id,$project_ref,Doctrine_Connection $conn=null ){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        return $q= $conn->createQuery()->from('EiCampaignGraphType d') 
             ->where('project_id= ? And project_ref=? ',array($project_id,$project_ref)); 
    }
    //Création des steps type de campagne  s'ils n'existent pas encore
    public function createDefaultCampaignStepType($project_id, $project_ref,$conn){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        
        $steps=$this->getStepTypeForProject($project_id,$project_ref,$conn);
        
        if(count($steps)==0){  // Alors aucun statut n'existe et dans ce cas on crée ceux par défaut
          $this->createStepType($project_id, $project_ref, 'Manual Action',0,$conn) ;
          $this->createStepType($project_id, $project_ref, 'Test Suite',1,$conn) ;
          return 1;
        }
       return 0;     
    }
    
    //Création d'un step type  de campagne pour un projet donné
    public function createStepType($project_id, $project_ref,$stepType,$automate,$conn){
        if($conn==null) $conn = Doctrine_Manager::connection();
        $conn->insert($this->getInstance(),
                array('name'=>$stepType,
                      'project_id' =>$project_id,
                      'project_ref' => $project_ref,
                      'automate' => $automate
                       ));
    }
}