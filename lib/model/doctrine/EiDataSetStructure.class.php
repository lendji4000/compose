<?php

/**
 * EiDataSetStructure
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    kalifastRobot
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class EiDataSetStructure extends BaseEiDataSetStructure
{
    // Nom des sous-types de la classe EiDataSetStructure.
    public static $TYPE_NODE = "NodeDataSet";
    public static $TYPE_LEAF = "LeafDataSet";

    /**********          GENERATION XML
    /******************************************************************************************************************/

    public function getXMLTag(){
        return MyFunction::sluggifyForXML($this->name);
    }

    /**
     * Retourne la structure sous-forme d'objet DOM.
     *
     * @param $root
     * @return DOMDocument
     */
    public static function createXSD($root)
    {
        // Création du schéma XSD.
        $schema = MyFunction::createSchemaXSD($documentXsd);

        $rootElement = $root->generateXSD($documentXsd);
        $schema->appendChild($rootElement);


        return $documentXsd;
    }

    /**
     * @param EiNodeDataSet $root
     * @return DOMDocument
     */
    public static function createXML($root)
    {
        // Création du document XML.
        $documentXml = new DOMDocument("1.0", "UTF-8");

        // Génération de la structure.
        $root->generateXML($documentXml, $documentXml);


        return $documentXml;
    }

    /**
     * @return bool
     */
    public function isNode(){
        return $this->getType() == self::$TYPE_NODE;
    }

    /**
     * @return bool
     */
    public function isLeaf(){
        return $this->getType() == self::$TYPE_LEAF;
    }

    /**
     * @return bool
     */
    public function isRoot(){
        return $this->getRootId() == $this->getId();
    }

    /**********          GESTION ARBRE
    /******************************************************************************************************************/

    /**
     * Méthode retournant le chemin depuis le scénario.
     *
     * @return mixed|string
     */
    public function getPathTo(){

        $chemin = "";

        if( $this->getEiScenario()->getId() != "" ){
            // Récupération du chemin vers le scénario
            $scenarioPath = "";//$this->getEiScenario()->getPathTo();

            // Retrait de la balise STRONG.
            $chemin = str_replace("</strong>", "", str_replace("<strong>", "", $scenarioPath));

            // Ajout de la structure du jeu de données.
            $chemin.= '<li>Data Sets<span class="divider">/</span></li>';
            $chemin.= '<li><strong>Structure</strong> <span class="divider">/</span></li>';
        }

        return $chemin;
    }

    public function getFirstNodeUp(){
        /** @var EiDataSetStructure $item */
        $item = $this;

        while( $item->getId() != "" && $item->isLeaf() ){
            $item = $item->getEiDataSetStructureParent();
        }

        return $item;
    }

    /**
     * @param $scenarioId
     *
     * @return EiNodeDataSet
     */
    public function getRoot($scenarioId = null){

        // Initialisation du résultat.
        $root = null;

        // On vérifie si le scénario n'est pas nul.
        if( $scenarioId != null ){
            $root = $this->getTable()->getRoot($scenarioId);
        }

        return $root;
    }

}