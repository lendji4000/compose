<?php

/**
 * EiTestSetBlockStack
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    kalifastRobot
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class EiTestSetBlockStack extends BaseEiTestSetBlockStack
{
    public function getContext(){
        /** @var Doctrine_Node_NestedSet $node */
        $node = $this->getEiTestSetBlockParam()->getNode();
        // Définition du contexte initial.
        $contexte = "1";
        /** @var Doctrine_Node_NestedSet[] $ancetres */
        $ancetres = $node->getAncestors();

        if( $ancetres !== false )
        {
            // Définition du contexte initial.
            $contexteA = array("1");
            // Récupération du mapping lié à l'objet structure.
            $myMapping = $this->getEiVersionStructure()->getMappingDataSet(EiBlockDataSetMapping::$TYPE_IN);
            // Récupération du data set structure lié à la version structure.
            $myStr = $myMapping != null ? $myMapping->getEiDataSetStructureMapping():null;

            /** @var EiTestSetBlockParam $ancetre */
            foreach( $ancetres as $ancetre ){
                // Récupération du mapping de l'ancêtre.
                $ancesterMapping = $ancetre->getEiVersionStructure()->getMappingDataSet(EiBlockDataSetMapping::$TYPE_IN);
                // Récupération du data set structure lié si l'ancêtre n'est pas nul.
                $ancesterStr = $ancesterMapping != null ? $ancesterMapping->getEiDataSetStructureMapping():null;

                if( $node->isDescendantOf($ancetre) && $ancesterStr != null && $myStr != null && $myStr->getNode()->isDescendantOf($ancesterStr) ){
                    $contexteA[] = $ancetre->getIndexRepetition();
                }
            }

            if( $myMapping != null )
                $contexteA[] = $this->getRepetitionIndex();

            $contexte = implode("-", $contexteA);
        }

        return $contexte;
    }

    public function getDataSetPath(){
        /** @var Doctrine_Node_NestedSet $node */
        $node = $this->getEiTestSetBlockParam()->getNode();
        // Définition du contexte initial.
        $contexte = "/Root";
        /** @var Doctrine_Node_NestedSet[] $ancetres */
        $ancetres = $node->getAncestors();

        if( $ancetres !== false )
        {
            $contexteA = array("/Root");

            /** @var EiTestSetBlockParam $ancetre */
            foreach( $ancetres as $ancetre ){
                if( $node->isDescendantOf($ancetre) && $ancetre->getEiVersionStructure()->getMappingDataSet(EiBlockDataSetMapping::$TYPE_IN) != null ){
                    $contexteA[] = $ancetre->getName();
                }
            }

            if( $this->getEiVersionStructure()->getMappingDataSet(EiBlockDataSetMapping::$TYPE_IN) != null )
                $contexteA[] = $this->getEiVersionStructure()->getName();

            $contexte = implode("/", $contexteA);
        }

        return $contexte;
    }

    /**
     * @param EiVersionStructure $parent
     * @return $this
     */
    public function getCommonParent(EiVersionStructure $parent){
        if( $parent->getId() == $this->getEiVersionStructureId() ){
            return $this;
        }
        elseif( $this->getEiTestSetBlockStackParent() != null ){
            return $this->getEiTestSetBlockStackParent()->getCommonParent($parent);
        }
        else{
            return null;
        }
    }

    /**
     * Retourne la taille de la boucle.
     *
     * @return int
     */
    public function getLoopSize()
    {
        return $this->getTable()->getLoopSize($this);
    }

    /**
     * @param array $viewed
     * @return EiTestSetBlockStack|bool
     */
    public function hasParentNotComplete($viewed = array()){
        $parent = $this->getEiTestSetBlockStackParent();

        $isPresent = in_array($this->getEiVersionStructureId(), $viewed) == true;

        if( $this->isComplete() ){
            $viewed[] = $this->getEiVersionStructureId();
        }

//        var_dump("Who ? " . $this->getPath() . " (".$this->getId().")");
//        var_dump("Present ? " . ($isPresent ? 1:0));
//        var_dump("Complete ? " . ($this->isComplete() ? 1:0));

        return $parent != null && $parent->getId() != "" && ($this->isComplete() || $isPresent) ?
            $parent->hasParentNotComplete($viewed):(!$this->isComplete() && !in_array($this->getEiVersionStructureId(), $viewed) ? $this:true);
    }

    /**
     * @return bool
     */
    public function isComplete(){
        $exists = $this->getTable()->elementExists($this);
//        var_dump("Existe (".$this->getPath()." | ".$this->getPartIndex()." / ".$this->getPartsCount().") ? " . ($exists ? "Oui":"Non"));

        return $this->getPartIndex() == $this->getPartsCount() && $exists;
    }

    /**
     * @return bool
     */
    public function isFinished(){
        $res = false;
        $vsElt = $this->getEiVersionStructure();
        $repIndex = $this->getRepetitionIndex();

        if( $vsElt->isEiLoop() ){
            $loopSize = $this->getLoopSize();

            if( $vsElt->getType() == EiVersionStructure::$TYPE_FOREACH ){
                $res = !($repIndex < $loopSize || ($repIndex <= $loopSize && !$this->isComplete()));
            }
            else{
                $res = true;
            }
        }
        else{
            $res = $this->isComplete();
        }

        return $res;
    }

    /**
     * @return mixed
     */
    public function getFragmentsFunctions(){
        return $this->getTable()->getNextVersionStructureFragments($this);
    }

    /**
     * @return mixed
     */
    public function firstFragmentElementIsFunction(){
        return $this->getTable()->firstFragmentElementIsFunction($this);
    }

    /**
     * @return bool
     */
    public function isPreviousStackCurrentFragment(){
        $previous = $this
            ->getTable()
            ->findOneByEiTestSetIdAndPosition($this->getEiTestSetId(), $this->getPosition()-1);

        return $this
            ->getTable()
            ->isPreviousStackCurrentFragment($this, !is_bool($previous) ? $previous:null);
    }

    /**
     * @return mixed
     */
    public function nextFragmentElementIsFunction(){
        return $this->getTable()->nextFragmentElementIsFunction($this);
    }

    /**
     * TODO: Factoriser avec EiVersion
     *
     * @return string
     * @throws Exception
     */
    public function generateXSLForTestSet($functionsList) {
        $xsl = new DOMDocument("1.0", "utf-8");
        $xsl->formatOutput = true;
        $xslStyleSheet = $xsl->createElement("xsl:stylesheet");

        $xslStyleSheet->setAttribute("xmlns:xsl", "http://www.w3.org/1999/XSL/Transform");
        $xslStyleSheet->setAttribute("version", "1.0");

        $xslOutput = $xsl->createElement("xsl:output");
        $xslOutput->setAttribute("method", "xml");

        $xslTemplate = $xsl->createElement("xsl:template");
        $xslTemplate->setAttribute("match", "/");

        //Si cette balise est omise, alors le XML généré par le XSL n'aura pas de noeud racine
        //provoquant une erreur.
        $rootNodeForFinalXML = $xsl->createElement('TestSet');
        $xslTemplate->appendChild($rootNodeForFinalXML);

        $xslStyleSheet->appendChild($xslOutput);
        $xslStyleSheet->appendChild($xslTemplate);

        $xsl->appendChild($xslStyleSheet);

        $path = str_replace("/".$this->getEiVersionStructure()->getName(), "", preg_replace("/(\[[0-9]+\])/", "", $this->getPath()));

        if ($this->getEiVersionStructure()) {
            $this->getEiVersionStructure()->generateXSLForTestSet($xsl, $rootNodeForFinalXML, true, $path, false, $functionsList, $this->getPath());
        } else {
            throw new Exception("Un problème s'est produit durant la génération du XSL. Aucune EiVersionStructure racine trouvée pour la version #" . $this->getId());
        }

        return $xsl->saveXML();
    }

    /**
     * @return string
     */
    public function generateBlockParametersXML(){
        /** @var EiTestSetBlockParamTable $tableBlockParam */
        $tableBlockParam = Doctrine_Core::getTable("EiTestSetBlockParam");
        // Récupération des ids des parents du block param de la stack.
        $parents = $tableBlockParam->getAllParentsId($this->getEiTestSetBlockParam());
        $parents[] = $this->getEiTestSetBlockParam()->getId();

        // Récupération de la structure des block params.
        $structures = $tableBlockParam->getSubTreeArrayForITree($this->getEiTestSetId(), $parents);

        $treeViewer = new TreeViewer("EiTestSetBlockParam");
        $treeViewer->import($structures);

        return $treeViewer->generateXML();
    }
}