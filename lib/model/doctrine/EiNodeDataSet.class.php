<?php

/**
 * EiNodeDataSet
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    kalifastRobot
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class EiNodeDataSet extends BaseEiNodeDataSet implements ISluggableXML, ITree
{
    private $leaves = array();

    /**********          GENERATION XML
    /******************************************************************************************************************/

    public function getXMLTag(){
        return MyFunction::sluggifyForXML($this->name);
    }

    /**
     * @return mixed
     */
    public function getPath()
    {
        return $this->getNode()->getPath(' > ', true);
    }

    /**
     * @param DOMDocument $documentXsd
     * @param DOMElement $container
     * @return DOMElement
     */
    public function generateXSD($documentXsd = null, $container = null)
    {
        // Création de l'élément XML relatif au noeud.
        $element = MyFunction::generateXSDElement($documentXsd, array(
            "name" => $this->getXMLTag()
        ));

        // On récupère le noeud où inserer les noeuds fils.
        $insertIn = $element->firstChild->firstChild;

        /** @var EiLeafDataSet $leaf */
        foreach( $this->getLeaves() as $leaf)
        {
            // On génère l'élément XSD relatif à la feuille.
            $leafElement = $leaf->generateXSD($documentXsd);
            $insertIn->appendChild($leafElement);
        }

        // On crée la séquences de noeuds fils.
        $sequence = $documentXsd->createElement("xs:sequence");

        $sequence->setAttribute('minOccurs', 0);
        $sequence->setAttribute('maxOccurs', "unbounded");

        // On parcours les fils.
        /** @var EiNodeDataSet $child */
        foreach($this->getChildren() as $child){
            // On génère l'élément XSD relatif au noeud fils.
            $childElement = $child->generateXSD($documentXsd, $element);
            // Puis on l'insert dans la séquence.
            $sequence->appendChild($childElement);
        }

        // On insert ensuite la séquence.
        $insertIn->appendChild($sequence);

        if( $container == null ){
            $documentXsd->appendChild($element);
        }
        else{
            $container->appendChild($element);
        }

        return $element;
    }

    /**
     * @param DOMDocument $documentXml
     * @param DOMDocument $parent
     */
    public function generateXML($documentXml, $parent)
    {
        $element = $documentXml->createElement($this->getXMLTag());

        /** @var EiLeafDataSet $leaf */
        foreach( $this->getLeaves() as $leaf)
        {
            $leaf->generateXML($documentXml, $element);
        }

        $parent->appendChild($element);

        // On parcours les fils.
        /** @var EiNodeDataSet $child */
        foreach($this->getChildren() as $child){
            // On génère l'élément XSD relatif au noeud fils.
            $child->generateXML($documentXml, $element);
        }
    }

    /**********          GESTION DES JEUX DE DONNEES
    /******************************************************************************************************************/

    /**
     * // TODO: Corriger, ne fonctionne pas très bien.
     * Création des lignes de jeux de données.
     *
     * @param null $ds
     * @param null $parent
     * @param bool $depth
     */
    public function createEmptyDataLines($ds = null, $parent = null, $depth = true){

        $line = new EiDataLine();
        $line->setEiDataSet($ds);
        $line->setLft($this->getLft());
        $line->setRgt($this->getRgt());
        $line->setLevel($this->getLevel());
        $line->setEiDataLineParent($parent);
        $line->setEiDataSetStructureId($this->getId());

        if( $parent == null && $depth == false ){
            $line->setLft(1);
            $line->setRgt(2);

            $ds->setRootStr($line);
        }
        elseif( $parent == null ){
            $ds->setRootStr($line);

            foreach( $this->getNode()->getDescendants(1) as $node ){
                $node->createEmptyDataLines($ds, $line);
            }
        }
    }

    /**********          GESTION DE L'ARBRE
    /******************************************************************************************************************/

    /**
     * Méthode retournant l'arbre d'un node.
     *
     * @return mixed
     */
    public function getTree(){

        $nodes = Doctrine_Core::getTable('EiNodeDataSet')
            ->getTree()
            ->fetchTree(array('root_id' => $this->getId()));

        $leaves = Doctrine_Core::getTable('EiLeafDataSet')
            ->getTree()
            ->fetchTree(array('root_id' => $this->getId()));

        $j = 0;
        $res = "";
        $count = count($leaves);

        if($leaves)
            /** @var EiNodeDataSet $node */
            foreach($nodes as $i => $node){

                while($j <= $count && $leaves[$j]->getEiDatasetStructureParentId() == $node->getId()){
                    $node->addLeaf($leaves[$j]);
                    $res .= $leaves[$j]->getName();
                    $j++;
                }
            }

        return $nodes;
    }

    /**
     * Méthode permettant de retourner la liste des noeuds fils d'un noeud.
     */
    public function getChildren(){
       return $this->getTable()->getNodeChildren($this->getId());
    }

    /**
     * Méthode permettant d'ajouter une feuille à un noeud.
     *
     * @param EiLeafDataSet $leaf
     */
    public function addLeaf(EiLeafDataSet $leaf){
        $this->leaves[] = $leaf;
    }

    /**
     * @return EiLeafDataSet[]
     */
    public function getLeaves(){
        return $this->getTable()->getLeaves($this->getId());
    }

    /**********          GESTION DES JDDs
    /******************************************************************************************************************/

    /**
     * Créer une nouvelle ligne de données vide pour le block
     * @param type $ei_data_set_id
     * @return \EiDataLine
     */
    public function createEiDataLine($ei_data_set_id, $root_id = null)
    {
        $ei_data_line = new EiDataLine();
        $ei_data_line->setEiDataSetStructureId($this->getId());
        $ei_data_line->setEiDataSetId($ei_data_set_id);
        $ei_data_line->setRootId($root_id);
        $params = $this->getLeaves();

        $ei_data_lines = new Doctrine_Collection('EiDataLine');

        foreach($params as $p => $param)
        {
            $param_line = new EiDataLine();
            $param_line->setEiDataLineParent($ei_data_line);
            $param_line->setEiDataSetStructureId($param->getId());
            $param_line->setEiDataLineRoot($ei_data_line->getEiDataLineRoot());
            $param_line->setEiDataSetId($ei_data_set_id);
            $param_line->setRootId($root_id);
            $ei_data_lines->add($param_line);
        }

        $ei_data_line->setEiDataLines($ei_data_lines);

        return $ei_data_line;
    }

    /**********          ELEMENTS GRAPHIQUES
    /******************************************************************************************************************/

    /**
     * @param $node_redirect_class
     * @param bool $active
     * @param $profile_name
     * @param $profile_id
     * @param $profile_ref
     * @return string
     */
    public function createLiElem($url_tab,$node_redirect_class, $active = false) {

        $eidatasetstructure_edit_node_uri=$url_tab;
        $eidatasetstructure_edit_node_uri['ei_scenario_id']=$this->getEiScenarioId();
        $eidatasetstructure_edit_node_uri['ei_root_node_id']=$this->getId(); 
        if($active){
            $active = "current_datasetstructure_node active";
            $arrow = '<i class="icon-chevron-right"></i>';
        }
        else {
            $active = "";
            $arrow = "";
        }

        if($this->getNode()->isRoot()){
            $imgs = "";
            $padding = "padding-left";
        }
        else{
            $padding = '';
            $imgs = '
           <img class="open_datasetstructure_node" title="Open" alt="" src="/images/icones/fleche-droite.png">
           <img class="close_datasetstructure_node " title="Close" alt="" src="/images/icones/fleche-bas.png">';
        }

        $return = sprintf('<li ei_datasetstructure_node="%d" class="%s">
            <div class="'. $active . ' '.$padding.'">'
                .$imgs.
                '<i class="icon-inbox"></i> %s '. $arrow . ' ' .
            '</div>',
            $this->id,
            "sortable",

            link_to2($this->name, 'eidatasetstructure_edit_node',$eidatasetstructure_edit_node_uri, array(
                'class' => "go_to_block_".$node_redirect_class,
                'title' => "Open " . $this->name . " panel"
            ))
        );

        return $return;
    }

    public static function getFormNameFormat()
    {
        $form = new EiNodeDataSetForm();

        return $form->getWidgetSchema()->getNameFormat();
    }

    public function save(Doctrine_Connection $conn = null)
    {
        $this->setSlug($this->getXMLTag());

        if( ($this->getEiScenarioId() == null || $this->getProjectId() == null) && $this->getEiDataSetStructureParent() != null){

            $this->setEiScenarioId($this->getEiDataSetStructureParent()->getEiScenarioId());
            $this->setProjectId($this->getEiDataSetStructureParent()->getProjectId());
            $this->setProjectRef($this->getEiDataSetStructureParent()->getProjectRef());
            $this->setRootId($this->getEiDataSetStructureParent()->getRootId());
        }

        parent::save($conn); // TODO: Change the autogenerated stub
    }


}