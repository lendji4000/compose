<?php

/**
 * EiFunctionHasParamTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EiFunctionHasParamTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object EiFunctionHasParamTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('EiFunctionHasParam');
    }
    //Rechargement des éléments de type EIFunctionHasParam pour un projet 
    public function reload($projets,$project_id, $project_ref, Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        
        //Création de la collection d'objet EiFunctionHasParam à ajouter
        $collection = new Doctrine_Collection("EiFunctionHasParam");
        Doctrine_Core::getTable('ScriptEiFunctionHasParam')->emptyTmpTable($conn);
        
        $list_id=array();
        
        $items = $projets->getElementsByTagName("ei_function_has_params");
        if ($items->length > 0) {//ya t-il des éléments à traiter?
            
            $ei_function_has_params = $items->item(0)->getElementsByTagName("ei_function_has_param");
            //Enregistrement de tous les paramètres à rajouter dans la table temporaire
            Doctrine_Core::getTable('ScriptEiFunctionHasParam')->insertTmpData($ei_function_has_params,$conn);
            

            if ($ei_function_has_params != null) {
                foreach ($ei_function_has_params as $ei_function_has_param) {
                    
                    $param_id = $ei_function_has_param->getAttribute("param_id");
                    $list_id[]=$param_id;
                    //recherche du paramètre  en base
                    if ($param_id != null) {
                        $q = Doctrine_Core::getTable('EiFunctionHasParam')->findOneByParamId($param_id);
                    
                    if ($q && $q != null) {//si l'element existe , on fait une mise à jour
                        $q->setParamType($ei_function_has_param->getElementsByTagName("param_type")->item(0)->nodeValue);
                        $q->setName($ei_function_has_param->getElementsByTagName("name")->item(0)->nodeValue);
                        $q->setDescription($ei_function_has_param->getElementsByTagName("description")->item(0)->nodeValue);
                        $q->setDefaultValue( $ei_function_has_param->getElementsByTagName("default_value")->item(0)->nodeValue);
                        $q->setIsCompulsory($ei_function_has_param->getElementsByTagName("is_compulsory")->item(0)->nodeValue);
                        
                        $q->save($conn);
                        
                    } else {//l'élément n'existe pas encore,  on le crée

                        $new_ei_function_has_param = new EiFunctionHasParam();
                        $new_ei_function_has_param->setParamId($param_id);
                        $new_ei_function_has_param->setFunctionId($ei_function_has_param->getElementsByTagName("function_id")->item(0)->nodeValue);
                        $new_ei_function_has_param->setFunctionRef($ei_function_has_param->getElementsByTagName("function_ref")->item(0)->nodeValue);
                        $new_ei_function_has_param->setParamType($ei_function_has_param->getElementsByTagName("param_type")->item(0)->nodeValue);
                        $new_ei_function_has_param->setName($ei_function_has_param->getElementsByTagName("name")->item(0)->nodeValue);
                        $new_ei_function_has_param->setDescription($ei_function_has_param->getElementsByTagName("description")->item(0)->nodeValue);
                        $new_ei_function_has_param->setDefaultValue( $ei_function_has_param->getElementsByTagName("default_value")->item(0)->nodeValue);
                        $new_ei_function_has_param->setIsCompulsory($ei_function_has_param->getElementsByTagName("is_compulsory")->item(0)->nodeValue);
                        $new_ei_function_has_param->save($conn);

                        //On crée les paramètres associés à ce derniers pour les fonctions concernées
                        //Avant on vérifie que le paramètre en question est un paramètre d'entrée . 
                        if($new_ei_function_has_param->getParamType()=='IN')
                            $this->createNewEiParams($new_ei_function_has_param,$conn);
                    }
                    }
                }
                //Suppression des paramètres n'existants plus du coté de script
                $this->deleteNotFoundParams($conn);
                return $list_id;
            }
            
            return $list_id;
        }
        //Suppression des paramètres n'existants plus du coté de script
                $this->deleteNotFoundParams($conn);
        return $list_id;
    }
    
    public function createNewEiParams(EiFunctionHasParam $p,Doctrine_Connection $conn){
        
        if($p==null || $conn==null) return null;

        if($p->getFunctionId()==null || $p->getFunctionRef()==null) return null;
        $ei_functions=Doctrine_Core::getTable('EiFonction')->findByFunctionIdAndFunctionRef(
                $p->getFunctionId(),$p->getFunctionRef());
        //Si on trouve des fonctions utilisant le nouveau paramètre, alors on crée les paramètres asscociés sur kalifast
        if($ei_functions->getFirst()){
            foreach($ei_functions as $ei_function){
                $ei_param=new EiParam();
                $ei_param->setIdFonction($ei_function->getId());
                $ei_param->setParamId($p->getParamId());
                $ei_param->setValeur($p->getDefaultValue());
                $ei_param->save($conn);
            }
        }
            
    }
    
    //Suppression des paramètres inexistant sur la plate forme de rédaction des scripts (store.kalifast.com)
    public function deleteNotFoundParams( Doctrine_Connection $conn=null){
                //throw new Exception('badd');
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        $q="
            delete FROM `ei_function_has_param` 
            WHERE 
             param_id Not In ( select  param_id from script_ei_function_has_param where 1)
            And 

            (function_id,function_ref) 
             In 
            (SELECT function_id , function_ref from script_ei_function where 1 ) ";
        $conn->execute($q);
    }
    
    
    public function getKalParamByFunctionId($id_fonction){
        if($id_fonction==null) return null;
        return Doctrine_Query::create()
                ->select('*')
                ->from('EiFunctionHasParam p')
                ->leftJoin('p.EiParams p2')
                ->where('p2.param_id=p.param_id And p2.id_fonction=?',array($id_fonction))
                ->execute();
    }
    
    public function insertJsonFunction($arraytab, Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        //Si l'id du noeud ou du projet n'est pas renseigné 
        if (!isset($arraytab['fp_id']) || !isset($arraytab['f_id']) || !isset($arraytab['f_ref']))
            return null;
        $stmt = $conn->prepare("INSERT INTO ei_function_has_param (param_id, function_ref, function_id, param_type, name, description, default_value,is_compulsory,created_at,updated_at) "
                . "VALUES (:param_id, :function_ref, :function_id, :param_type, :name, :description, :default_value,:is_compulsory,:created_at,:updated_at) "
                . "ON DUPLICATE KEY UPDATE param_id=param_id,function_id=:function_id,function_ref=:function_ref,param_type=:param_type,name=:name,description=:description,default_value=:default_value,is_compulsory=:is_compulsory,created_at=:created_at,updated_at=:updated_at");


        $stmt->bindValue("param_id", $arraytab['fp_id']);
        $stmt->bindValue("function_id", $arraytab['f_id']);
        $stmt->bindValue("function_ref", $arraytab['f_ref']);
        $stmt->bindValue("param_type", $arraytab['fp_typ']);
        $stmt->bindValue("name", $arraytab['fp_name']);
        $stmt->bindValue("description", $arraytab['fp_desc']);
        $stmt->bindValue("default_value", $arraytab['fp_defv']);
        $stmt->bindValue("is_compulsory", $arraytab['fp_iscomp']);  
        $stmt->bindValue("created_at", $arraytab['fp_creat']);
        $stmt->bindValue("updated_at", $arraytab['fp_updat']);
        $stmt->execute(array());
         
        return 1;
    }
}