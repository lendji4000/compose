<?php

/**
 * EiSubject
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    kalifastRobot
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class EiSubject extends BaseEiSubject {

    public function __construct($table = null, $isNewEntry = false, EiProjet $ei_project = null) {

        parent::__construct($table, $isNewEntry);
        if ($ei_project != null)
            $this->setProject($ei_project);
    }

    /* Recuépération du package d'un bug */
    public function getEiPackage(){
        if($this->getPackageId()==null || $this->getPackageRef()==null){
            $this->save(); 
        }
        return Doctrine_Core::getTable('EiTicket')->findOneByTicketIdAndTicketRef($this->getPackageId(),$this->getPackageRef());
    }
    //Récupération d'un package pour un bug
    public function getPackage(Doctrine_Connection $conn = null) {
        
        $conn2 = Doctrine_Manager::connection();
        $conn2->execute("update ei_subject s left join ei_ticket t 
                            on s.package_id =t.ticket_id and s.package_ref=t.ticket_ref
                            set s.package_id =NULL and s.package_ref=NULL
                            where CONCAT('Package_S',s.id)!=t.name");
        $conn2->execute("update ei_subject s  left join ei_ticket t on s.package_id=t.ticket_id and s.package_ref=t.ticket_ref
            set package_id=NULL , package_ref=NULL 
            where   t.ticket_id IS   NULL OR   t.ticket_ref is   NULL ");
        
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        /* Le package existe déjà mais on procède aux vérifications permettant d'avoir l'unicité d'un bug pour un package.
          En effet un Package doit être lié à un bug au plus.
         */
        
        if ($this->getPackageId() != null && $this->getPackageId() != 0 && $this->getPackageRef() != null && $this->getPackageRef() != 0):
            $package_bugs_links = $conn->fetchAll("select t.ticket_id , t.ticket_ref, s.id  
                        from  ei_ticket t 
                        inner join  ei_subject s on s.package_id=t.ticket_id and s.package_ref=t.ticket_ref
                        where t.ticket_id= " . $this->getPackageId() . " and t.ticket_ref=" . $this->getPackageRef());
        else:
            $package_bugs_links = array();
        endif;


        if (count($package_bugs_links) == 0): //Le ticket du bug est null ou n'existe pas : on le crée par le web service
            //Si le package du bug est   null 
            if ($this->getPackageId() != null && $this->getPackageRef() != null):
                $conn->execute("update ei_subject set package_id=NULL And package_ref=NULL where package_id=" . $this->getPackageId() . " And package_ref=" . $this->getPackageRef());
            endif;
            /* On recharge le projet si nécessaire */
            $ei_project = $this->getEiProject();
            if ($ei_project->needsReload()):
                $xml = $ei_project->downloadKalFonctions();
                if ($xml != null): $ei_project->transactionToLoadObjectsOfProject($xml);
                endif;
            endif;
            /* Préparation des données de création du web service de création de l'intervention */
            $guard = MyFunction::getGuard();
            $data = array(
                'package_name' => 'Package_S' . $this->getId(),
                'guard_id' => $guard->getId()
            );
            /* Création de l'intervention */
            $pack = EiTicket::createDistantPackage($this->getEiProject(), json_encode($data));
            if (is_array($pack) && isset($pack['package_id']) && isset($pack['package_ref'])):
                return array(
                    "package_id" => $pack['package_id'],
                    "package_ref" => $pack['package_ref']
                );
            else: //Echec de la création de l'intervention du bug. 
                throw new Exception("Fatal error . Failed to create  intervention package! Contact administrator...");
            //$conn->execute("update ei_subject set package_id=" . $pack['package_id'] . " , package_ref=" . $pack['package_ref'] . " , updated_at='" . date('Y-m-d H:i:s') . "' where id=" . $this->getId());
            //$package = Doctrine_Core::getTable('EiTicket')->findOneByTicketIdAndTicketRef($pack['package_id'], $pack['package_ref']);
            endif;
        elseif (count($package_bugs_links) > 1): //Le ticket est lié à plusieurs bugs : On génère une exception et on alerte l'administrateur
            throw new Exception("Fatal error . Many interventions for a package! Contact administrator...");
        else: //Le package du bug/intervention est bien définit et l'objet EiTicket associé existe. 
            return array(
                "package_id" => $this->getPackageId(),
                "package_ref" => $this->getPackageRef()
            );
        endif;
    }

    public function __toString() {
        return sprintf('%s', $this->getName());
    }

    public function save(\Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        $isNew=false;
        try {
            $conn->beginTransaction();
            $guard = sfContext::getInstance()->getUser()->getGuardUser();
            if ($this->isNew()): $isNew=true;
            endif;
            parent::save($conn); //Pour avoir un id definit pour l'intervention
            /* On renseigne le package du bug */
            $tabPackage = $this->getPackage($conn);
            $this->setPackageId($tabPackage['package_id']);
            $this->setPackageRef($tabPackage['package_ref']);              
             parent::save($conn);
            
            if ($isNew): //On assigne le bug au créateur   
                $this->createDefaultAssignment($guard, $conn);
                //On crée le "TNR" par défaut du bug
                $this->createDefaultTnr($conn);

            endif;
            $conn->commit();
            return true;
        } catch (Exception $e) {
            $conn->rollback();
            throw $e;
        }
    }

    /**
     * Retourne le nom du sujet raccourci.
     * @param int $size la taille totale de la chaine à retourner.
     * @return string
     * @throws InvalidArgumentException
     */
    public function getTroncatedName($size = 17) {

        if ($size <= 0)
            throw new InvalidArgumentException('Invalid size value to troncate subject name. ' . $size . ' is not a valid value.');

        $name = $this->getName();
        if (strlen($name) > $size):
            return substr($name, 0, $size - 3) . '...';
        else:
            return $name;
        endif;
    }

    /* Setter projet pour le sujet */

    public function setProject(EiProjet $ei_project) {
        $this->setProjectId($ei_project->getProjectId());
        $this->setProjectRef($ei_project->getRefId());
    }

    /* getter projet pour le sujet */

    public function getEiProject() {
        return Doctrine_Core::getTable('EiProjet')->findOneByProjectIdAndRefId(
                        $this->getProjectId(), $this->getProjectRef());
    }

    //Création du TNR par défaut d'un bug 
    public function createDefaultTnr(Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        $guard = sfContext::getInstance()->getUser()->getGuardUser();
        $default_tnr = new EiCampaign(null, null, $this->getEiProject());
        $default_tnr->setName('ValidationTests_S' . $this->getId());
        $default_tnr->setAuthorId($guard->getId());
        $default_tnr->save($conn);

        //Association du tnr par défaut au bug
        $default_tnr_relation = new EiSubjectHasCampaign(null, null, $this, $default_tnr);
        $default_tnr_relation->setIsTnr(true);
        $default_tnr_relation->save($conn);
    }

    //Récupération des contextes d'un sujet/bug
    public function getContexts(Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        return Doctrine_Core::getTable('EiSubject')->getContexts($this->getId(), $conn);
    }

    public function getSubjectDetails(Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        return $this->getTable()->getSubjectDetails($this->getId(), $conn);
    }

    /* Récupération de l'historique des assignations sur un bug */

    public function getAssignmentsHistory(Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        return $this->getTable()->getAssignmentsHistory($this->getId(), $conn);
    }

    public function getSubjectSolution(Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        return $this->getTable()->getSubjectSolution($this->getId(), $conn);
    }

    public function getSubjectMigration(Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        return $this->getTable()->getSubjectMigration($this->getId(), $conn);
    }

    /**
     * Retourne le nom du sujet raccourci.
     * @param int $size la taille totale de la chaine à retourner.
     * @return string
     * @throws InvalidArgumentException
     */
    public function getTroncatedDescription($size = 55) {

        if ($size <= 0)
            throw new InvalidArgumentException('Invalid size value to troncate description name. ' . $size . ' is not a valid value.');

        $description = $this->getDescription();
        if (strlen($description) > $size):
            return substr($description, 0, $size - 3) . '...';
        else:
            return $description;
        endif;
    }

    //Récupération du tableau des ids d'utilisateurs assignés au sujet
    public function getArrayKeyOfAssignUsers($assignUsers) {
        $assignRelations = array();
        if (count($assignUsers) > 0):
            foreach ($assignUsers as $assignUser):
                $assignRelations[] = $assignUser->getId();
            endforeach;
        endif;

        return $assignRelations;
    }

    //Récupération des utilisateurs assignés au sujet
    public function getAssignUsers(Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        return $this->getTable()->getAssignUsers($this->getId(), $conn);
    }

    //Récupération des utilisateurs non-assignés au sujet
    public function getNonAssignUsers($assignUsers, Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        return $this->getTable()->getNonAssignUsers($this->getArrayKeyOfAssignUsers($assignUsers), $conn);
    }

    //Recherche des campagnes de tests d'un sujet
    public function getSubjectCampaigns() {
        return $this->getTable()->getSubjectCampaigns($this->getId());
    }

    //Recherche des fonctions d'un sujet
    public function getSubjectFunctions() {
        return $this->getTable()->getSubjectFunctions($this->getId());
    }

    //Recherche des fonctions d'un sujet 
    public function getSubjectFunctionsAsArray() {
        return $this->getTable()->getSubjectFunctionsAsArray($this->getId());
    }

    //Sauvegarde d'un des champs  tinyMCE d'un sujet ( migration , solution ou details)
    public function updateTinyMceField($field_type, $field_value, Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        if ($field_type == 'Migration')
            $field = 'migration';
        if ($field_type == 'Details')
            $field = 'details';
        if ($field_type == 'Solution')
            $field = 'solution';
        $conn->createQuery()->update('EiSubject')
                ->set($field, '?', $field_value)
                ->where('id= ?', array($this->getId()))
                ->execute();
    }

    public function createDefaultAssignment(sfGuardUser $guard, Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();

        return Doctrine_Core::getTable('EiSubjectAssignment')->createAssignment(
                        $guard->getId(), $this->getId(), $guard->getId(), $conn);
    }

    /* Fonction modifiées dans le cadre d'un bug   et executées ou non */

    public function getExFunctions($exec, Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        return Doctrine_Core::getTable("KalFunction")->getModifyAndExecDelFunctions(null, $this, null, $exec, $conn);
    }

    /* Parsing du resultat d'un listing de sujets pour regrouper les assignments   */

    public static function parseSubjects(Array $res) {
        $tabRes = array();
        if (count($res) == 0)
            return $tabRes;
        /* Parsing du resultats pour regrouper les assignments user */
        foreach ($res as $ei_subject):
            $tmp = $ei_subject;
            $tmp['assignments'] = array();
            if (!isset($tabRes[$ei_subject['id']])):
                if ($ei_subject['assign_id'] != null): //S'il y'a un utilisateur assigné au sujet
                    $tmp['assignments'][$ei_subject['assign_id']] = $ei_subject['assign_name'];
                endif;
                unset($tmp['assign_id']);
                unset($tmp['assign_name']);
                $tabRes[$ei_subject['id']] = $tmp;
            else : // La clé est déjà créee
                $tabRes[$ei_subject['id']]['assignments'][$ei_subject['assign_id']] = $ei_subject['assign_name'];
            endif;

        endforeach;
        return $tabRes;
    }

}
