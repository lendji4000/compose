<?php

/**
 * EiScenario
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    kalifast
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class EiScenario extends BaseEiScenario {

    private $eiScenarioStructure; 
    private $ei_user_default_package;
    public function getEiUserDefaultPackage(){
        return $this->ei_user_default_package;
    }
    public function setDefaultPackage(EiUserDefaultPackage $ei_user_default_package){
        $this->ei_user_default_package=$ei_user_default_package;
    }
    public function __construct($table = null, $isNewEntry = false, EiProjet $ei_project=null) {
         
        parent::__construct($table, $isNewEntry);
        if($ei_project!=null) $this->setProject ($ei_project); 
       
    } 
    
    public function getPathTo(array $breadcrumb ,EiProjet $ei_project,EiProfil $ei_profile) {
        $chemin = $this->getNode()->getPathTo(); 
        $base_uri=array(
            'project_id' =>$ei_project->getProjectId(),
            'project_ref' =>$ei_project->getRefId(),
            'profile_id' =>$ei_profile->getProfileId(),
            'profile_ref' =>$ei_profile->getProfileRef(),
            'profile_name' =>$ei_profile->getName()
        ); 
        foreach ($chemin as $i => $node) {
            if($node->getType()=='EiFolder'): 
                $path_folder=$base_uri;
                $path_folder['folder_id']=$node->getObjId();
                $path_folder['node_id']=$node->getId();
                $path_folder['action']='edit';
                $uri=  url_for2('path_folder', $path_folder);
                $logo= ei_icon('ei_folder', null, null, null, 'ei-folder'); 
            else:
                $logo= ei_icon('ei_scenario');
                $projet_new_eiversion=$base_uri;
                $projet_new_eiversion['ei_scenario_id']=$node->getObjId();
                $projet_new_eiversion['action']='editVersionWithoutId';
                $uri=  url_for2('projet_new_eiversion', $projet_new_eiversion); 
            endif;
            $breadcrumb[] = array(
            'logo' => $logo,
            'title' => $node,
            'uri' => $uri,
            'active' => false,
            'is_last_bread' => false); 
        } 
        
        return $breadcrumb;
    }
    /* Setter projet pour le scénario */
    public function setProject(EiProjet $ei_project){
        $this->setProjectId($ei_project->getProjectId());
        $this->setProjectRef($ei_project->getRefId());
    }
//Fonction de récupération de la version d'un scénario correspondant à un profil donné
    public function getAssociateVersionForProfile(EiProfil $ei_profile){
        $profil_scenario = Doctrine_Core::getTable("EiProfilScenario")->findOneByEiScenarioIdAndProfileIdAndProfileRef(
                    $this->getId(), $ei_profile->getProfileId(), $ei_profile->getProfileRef());

            /* Si le profil a été récemment ajouté sur script, alors il n'est affecté à aucune version ,
             *  du coup on affecte le profil à la première version rencontrée
             */
            if ($this->profil_scenario == null) {
                $pf = Doctrine_Core::getTable("EiProfilScenario")
                        ->findByEiScenarioId($this->ei_scenario->getId())
                        ->getFirst();
                $profil_scenario = new EiProfilScenario();
                $profil_scenario->setEiScenarioId($this->ei_scenario->getId());
                $profil_scenario->setProfileId($this->ei_profile->getProfileId());
                $profil_scenario->setProfileRef($this->ei_profile->getProfileRef());
                $profil_scenario->setEiVersionId($pf->getEiVersionId());
                $profil_scenario->save();
                
            } 
            return $profil_scenario;
    }
    
    public function generateXSD(){
        $xsd = new DOMDocument();
        $xsd->formatOutput = true;
        
        $schema = $xsd->createElement("xs:schema");
        
        $schema->setAttribute('xmlns:xs', "http://www.w3.org/2001/XMLSchema");
        
        $xsd->appendChild($schema);
        
        $root = Doctrine_Core::getTable('EiVersionStructure')
                ->getRootStructure($this->getId());
        
        $rootXSD = $root->generateXSD($xsd);
        
        $schema->appendChild($rootXSD);
        
        return $xsd->saveXML();
    }

    public function save(Doctrine_Connection $conn = null, $is_clone = null) {
        
        if ($conn == null)
            $conn = Doctrine_Manager::connection();

        $conn->beginTransaction();

        if ($this->isNew()) {
            if ($this->project_id != null) {
                $this->nb_joue = 0;
            }
            //mise à jour du projet
            try {
                $ret = parent::save($conn);
                $ei_project = $this->updateProject($conn);
                if ($is_clone == null) {//Si ce n'est pas un clone alors on crée les versions par défaut

                    $ei_version_id = $this->createDefaultVersion($this->getEiUserDefaultPackage(),$conn);
                    $this->saveProfilsForVersions($ei_project, $ei_version_id, $conn);
                    $this->createDefaultEiDataSetFolder($conn);

                    // Création du bloc racine du jeu de données.
                    $rootDataSetStructure = new EiNodeDataSet();
                    $rootDataSetStructure->setName("Root");
                    $rootDataSetStructure->setEiScenario($this);
                    $rootDataSetStructure->setProjectId($this->project_id);
                    $rootDataSetStructure->setProjectRef($this->project_ref);
                    $rootDataSetStructure->save($conn);

                    $treeObject = Doctrine_Core::getTable("EiDataSetStructure")->getTree();
                    $treeObject->createRoot($rootDataSetStructure);
                }
                $conn->commit();
            } catch (Exception $e) {
                $conn->rollback();
                throw $e;
            }
        } else {
            try {
                $ret = parent::save($conn);
                $node = $this->getNode();
                $node->setName($this->getNomScenario());
                $node->save($conn);
                $this->ei_node_id = $node->getId();
                //$this->createDefaultEiDataSetFolder($conn);
                $conn->commit();
            } catch (Exception $e) {
                $conn->rollback();
                throw $e;
            }
        }
        return $ret;
    }
    
    /**
     * Créer le noeud contenant les dataSetFolders et les dataSets du scenario.
     * @param Doctrine_Connection $conn
     * @return $folder Le dossier nouvelle créé.
     */
    public function createDefaultEiDataSetFolder(Doctrine_Connection $conn){
        $folder = new EiNode();
        
        $folder->setIsRoot(false);
        $folder->setName('Data sets');
        $folder->setProjectId($this->getProjectId());
        $folder->setProjectRef($this->getProjectRef());
        $folder->setType('EiDataSetFolder');
        $folder->setPosition(1);
        
        $folder->save($conn);
        $folder->setObjId($folder->getId());
        $folder->setRootId($this->ei_node_id);
        $folder->save($conn);
        
        return $folder;
    }

    //Récupération du noeud parent du scénario
    public function getNode() {
        return Doctrine_Core::getTable('EiNode')->findOneByObjIdAndType($this->getId(), 'EiScenario');
    }

    /**
     * Méthode permettant de récupérer la version associée
     * au profil passé en paramètres.
     * @param type $profile_id
     * @return type
     * @throws Exception 
     */
    public function getVersionForProfil(EiProfil $ei_profile) { 
        $versions = Doctrine_Query::create()->from('EiVersion v ')
                ->where('EiProfilScenario.ei_scenario_id=v.ei_scenario_id And EiProfilScenario.ei_version_id=v.id')
                ->AndWhere('EiProfilScenario.ei_scenario_id=? And
                            EiProfilScenario.profile_id=? And EiProfilScenario.profile_ref=?', 
                        array($this->getId(), $ei_profile->getProfileId(), $ei_profile->getProfileRef()))
                ->execute();
        if (!$versions->getFirst())
            return null;
        return $versions->getFirst();
    }

    public function getEiProjet() {
        return Doctrine_Core::getTable('EiProjet')->findOneByRefIdAndProjectId($this->getProjectRef(), $this->getProjectId());
    }
    
    //Récupération des campagnes du scénario
    public function getCampaigns(){
        return Doctrine_Core::getTable('EiScenario')->getScenarioCampaigns($this->getId());
    }
    /**
     * Met à jour le projet pour le scenario que l'on sauvegarde
     * La fonction retourne alors le projet mis à jour.
     * 
     * @return EiProjet 
     */
    public function updateProject($conn) {
        // mise à jour du champs update
        $ei_project = $this->getEiProjet();
        $ei_project->updated_at = $this->updated_at;
        $ei_project->save($conn);
        return $ei_project;
    }

    /**
     * Retourne la version racine du scenario
     * @param ei_version_id Id de la version root
     * @return type 
     */
    public function getRootVersion($ei_version_id) {
        $version = Doctrine_Core::getTable('EiVersion')
                ->findOneByEiScenarioIdAndId($this->getId(), $ei_version_id);

        return $version;
    }

    /**
     * Créer la version par defaut pour le scénario en cours de création et 
     * en retourne son identifiant.
     * 
     * @return integer
     */
    public function createDefaultVersion(EiUserDefaultPackage $ei_user_default_package=null,Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        
        //creation de la version par defaut du scénario
        $def_version = new EiVersion();
        $def_version->ei_scenario_id = $this->getId();
        $def_version->libelle = 'S' . $this->getId() . '-version1';
        $def_version->save($conn);
        if($ei_user_default_package!=null):
        //Création de la relation entre la version du scénario et le package
        $ei_scenario_package=new EiScenarioPackage();
        $ei_scenario_package->setEiScenarioId($this->getId());
        $ei_scenario_package->setPackageId($ei_user_default_package->getTicketId());
        $ei_scenario_package->setPackageRef($ei_user_default_package->getTicketRef());
        $ei_scenario_package->setEiVersionId($def_version->getId());
        $ei_scenario_package->save($conn);     
        endif;
        
        $ei_version_structure = new EiVersionStructure();
        $ei_version_structure->setName("Root");
        $ei_version_structure->setEiVersion($def_version);
        $ei_version_structure->setType(EiVersionStructure::$TYPE_BLOCK);

        $ei_version_structure->save($conn);

        $treeObject = Doctrine_Core::getTable('EiVersionStructure')->getTree();
        $treeObject->createRoot($ei_version_structure);

        return $def_version->getId();
    }

    /**
     * Sauvegarde, pour tous les profils du projet passé en paramètres, 
     * les relations ei_profil_scenario afin que tous les profils soit associé à
     * à la version par défaut.
     * 
     * @param EiProjet $ei_project 
     */
    public function saveProfilsForVersions(EiProjet $ei_project, $def_version, $conn) {
        $profils = $ei_project->getProfils();
        $toSave = new Doctrine_Collection('EiProfilScenario');
        foreach ($profils as $profil) {
            $profil_scenario = new EiProfilScenario();
            $profil_scenario->setProfileId($profil->getProfileId());
            $profil_scenario->setProfileRef($profil->getProfileRef());
            $profil_scenario->setEiScenario($this);
            $profil_scenario->setEiVersionId($def_version);
            $toSave->add($profil_scenario);
        }
        $toSave->save($conn);
    }

    public function __toString() {
        return sprintf('%s', $this->getNomScenario());
    }

    /**
     * Copie le noeud du scenario.
     * @param EiScenario $copie
     * @param type $conn
     * @throws Exception
     */
    private function createNodeCopie(EiScenario $copie, $conn) {
        try {
            $root_folder = $this->getNode();
            $ei_node = new EiNode();
            $ei_node->setProjectId($this->getProjectId());
            $ei_node->setProjectRef($this->getProjectRef());
            $ei_node->setName($copie->getNomScenario());
            $ei_node->setPosition(Doctrine_Core::getTable('EiNode')->getLastPositionInNode(
                            $this->getProjectId(), $this->getProjectRef(), $root_folder->getRootId()));
            $ei_node->setIsRoot(false);
            $ei_node->setIsShortcut(false);
            $ei_node->setRootId($root_folder->getRootId());
            $ei_node->setType("EiScenario");

            $copie->setEiNode($ei_node);
            
            $copie->save($conn, true);
            //$copie->createDefaultEiDataSetFolder($conn);

            $ei_node->setObjId($copie->getId());
            $copie->save($conn, true);
        } catch (Exception $e) {
            throw $e;
        }
    }

    private function createEiVersionsCopies($copie, $conn)
    {
        /** @var EiVersion $version */
        foreach ($this->getEiVersions() as $version) {
            $copie_version = $version->createCopie($version->getLibelle(), $conn, $copie->getId());
        }
    }

    //Création de la copie d'un scénario 
    public function createCopie($new_name, $conn = null) {
        //Récupération de la variable de connexion pour éffectuer les transactions
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        //Récupération du noeud associé au scénario


        try {
            $conn->beginTransaction();

            $copie = new EiScenario();

            $copie->setProjectId($this->getProjectId());
            $copie->setProjectRef($this->getProjectRef());
            $copie->setNomScenario($new_name);
            $copie->setNbJoue(0);
            $copie->setDescription($this->getDescription());

            $this->createNodeCopie($copie, $conn);

            $this->createEiVersionsCopies($copie, $conn);

            $this->createProfilScenarioForClone($copie, $conn);

            $conn->commit();

            //return $copie;
        } catch (Exception $e) {
            $conn->rollback();
            throw $e;
        }

        return $copie;
    }

    public function reloadFromScript($login = null, $pwd = null) {
        foreach ($this->getEiVersions() as $v => $version) {
            $version->reloadFromScript($login, $pwd);
        }
    }

    // Duplication d'un scénario  et de ses objets liés
    public function createClone($new_name) {


        $conn = Doctrine_Manager::connection();

        // Tout est dans une transaction pour eviter d'effectuer une partie des opérations

        try {
            $conn->beginTransaction();

            //Copie du scénario
            $copie = $this->createCopie($new_name, $conn);
            //Pour chaque version racine du scénario, on clone la version racine et ensuite on change les ei_scenario_id par l'id_clone
            $root_versions = Doctrine_core::getTable('EiVersion')->findByEiScenarioId($this->getId());
            //throw new Exception($copie->getId());
            if ($root_versions->getFirst()) {//S'il existe un version racine
                foreach ($root_versions as $root_version) {

                    $root_version->createClone($root_version->getLibelle(), null, $conn, $copie->getId());
                }
            }

            $this->createProfilScenarioForClone($copie, $conn);

            $conn->commit();

            return $copie;
        } catch (Exception $e) {
            $conn->rollBack();
            throw $e;
        }
        return null;
    }

    public function createProfilScenarioForClone($copie, Doctrine_Connection $conn) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        //Attribution des profils scenario à la première version trouvée
        if ($copie != null) {
            $clones_version = $conn->getTable('EiVersion')->findByEiScenarioId($copie->getId());

            if (count($clones_version) > 0) {
                $first_clone_version = $clones_version->getFirst();
                foreach ($this->getEiProjet()->getProfils() as $pf) {
                    $profil_scenario = new EiProfilScenario();
                    $profil_scenario->setProfileId($pf->getProfileId());
                    $profil_scenario->setProfileRef($pf->getProfileRef());
                    $profil_scenario->setEiVersionId($first_clone_version->getId());
                    $profil_scenario->setEiScenarioId($copie->getId());
                    $profil_scenario->setCreatedAt($first_clone_version->getCreatedAt());
                    $profil_scenario->setUpdatedAt($first_clone_version->getUpdatedAt());
                    $profil_scenario->save($conn);
                }
            }
        }
    }
  
    public function delete(\Doctrine_Connection $conn = null) {
        try {
            if ($conn == null)
                $conn = Doctrine_Manager::getInstance()->getCurrentConnection();

//            foreach ($this->getEiVersions() as $v)
//                $v->delete($conn);

            parent::delete($conn);
        } catch (Exception $e) {
            $conn->rollback();
        }
    }
    
    public function generateXMLStructure($root_structure){
        $xml = new DOMDocument();
        
        $root = $xml->createElement($root_structure->getName());
        $xml->appendChild($root);
        
        $root_structure->generateXML($xml, $root);
        
        return $xml->saveXML();
    }

    public function getScenarioStats(Doctrine_Connection $conn = null){
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        return $this->getTable()->getScenarioStats($this,$conn);
    }
    /* Recherche d'un version d'un scénario pour un package donné */
    public function findVersionForPackage(EiTicket $ei_package , Doctrine_Connection $conn = null){
        return $conn->createQuery()->from('EiVersion v')   
                ->leftJoin('v.EiVersionPackage sp')
                ->where('sp.package_id='.$ei_package->getTicketId().' And sp.package_ref='.$ei_package->getTicketRef().' And sp.ei_scenario_id='.$this->getId())
                ->execute();
    }
}

