<?php

/**
 * KalFunction
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    kalifastRobot
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class KalFunction extends BaseKalFunction {

    public function __toString() {
        return sprintf('%s', $this->getNodeTree()->getName());
    }

    public function getConcatId() {
        return $this->getFunctionId() . '-' . $this->getFunctionRef();
    }

    public function returnCriticity() {
        $criticity = $this->getCriticity();
        if ($criticity == null)
            return 'Blank';
        return $criticity;
    }

    //Changement de la criticité d'une fonction
    public function changeCriticity() {
        switch ($this->getCriticity()) {
            case 'Blank': $this->setCriticity('Low');
                break;
            case 'Low': $this->setCriticity('Medium');
                break;
            case 'Medium': $this->setCriticity('High');
                break;
            case 'High': $this->setCriticity('Blank');
                break;
            default: $this->setCriticity('Low');
                break;
        }
        $this->save();
        return true;
    }

    /* Dernière execution d'une fonction*/
    public function getLastExec(){
        return $this->getTable()->getLastExec($this->getFunctionId(),$this->getFunctionRef());
    }
    /* Récupération de toutes les executions de la fonction */
    public function getFunctionExecs(){
        return $this->getTable()->getFunctionExecs($this->getFunctionId(),$this->getFunctionRef());
    }
    public function getAbortedFunctionExecs(){ 
        return $this->getTable()->getAbortedFunctionExecs($this->getFunctionId(),$this->getFunctionRef());
    }
    public function getSuccessFunctionExecs(){
        return $this->getTable()->getSuccessFunctionExecs($this->getFunctionId(),$this->getFunctionRef());
    }
    public function getKoFunctionExecs(){
        return $this->getTable()->getKoFunctionExecs($this->getFunctionId(),$this->getFunctionRef());
    }
    /* Scénarios dans lesquels la fonction est utilisée */
    public function getScenariosFunction(){
        return $this->getTable()->getScenariosFunction($this->getFunctionId() ,$this->getFunctionRef(),$this->getProjectId(),$this->getProjectRef());
    }
    //Recherche des campagnes de tests d'une fonction
    public function getFunctionCampaigns() {
        return $this->getTable()->getFunctionCampaigns($this->getFunctionId(), $this->getFunctionRef());
    }

    //Recherche des sujets d'une fonction
    public function getFunctionSubjects() {
        return $this->getTable()->getFunctionSubjects($this->getFunctionId(), $this->getFunctionRef());
    }

    public function getNotice() {
        return Doctrine_Core::getTable('EiNotice')->findOneByFunctionIdAndFunctionRef(
                        $this->getFunctionId(), $this->getFunctionRef());
    }

    //Récupération des paramètres d'entrée et de sortie  de la fonction
    public function getKalParams() {
        return Doctrine_Core::getTable('EiFunctionHasParam')->findByFunctionIdAndFunctionRef($this->getFunctionId(), $this->getFunctionRef());
    }

    //Récupération des paramètres d'entrée de la fonction
    public function getInKalParams() {
        return $this->getTable()->getKalParams($this, 'IN');
    }

    //Récupération des paramètres d'entrée de la fonction
    public function getOutKalParams() {
        return $this->getTable()->getKalParams($this, 'OUT');
    }

    //Récupération des paramètres de la fonction
    public function getEiParams() {
        return Doctrine::getTable('EiFunctionHasParam')->findByFunctionRefAndFunctionId($this->getFunctionRef(), $this->getFunctionId());
    }

    //Récupération des scripts de la fonction
    public function getEiScripts() {
        return Doctrine::getTable('EiScript')->findByFunctionRefAndFunctionId($this->getFunctionRef(), $this->getFunctionId());
    }

    //Récupération de la fonction dans l'arbre
    public function getNodeTree() {
        if ($this->getFunctionRef() == null || $this->getFunctionId() == null)
            return null;
        return Doctrine_Core::getTable('EiTree')->findOneByRefObjAndObjIdAndType($this->getFunctionRef(), $this->getFunctionId(), 'Function');
    }

    //récupération des noeuds de vue ciblée par la fonction
    public function getNodeViews() {
        return Doctrine_Core::getTable('EiTree')->findByRootIdAndType(
                        $this->getNodeTree()->getId(), 'View');
    }

    //Récupération des raccourcis de la fonction
    public function getfunctionShortCuts() {
        return Doctrine_Core::getTable('EiTree')->findByRootIdAndType(
                        $this->getNodeTree()->getId(), 'ShortCut');
    }

    //Récupération des fonctions cibles de la fonction mère
    public function getFunctionChilds() {
        return Doctrine_Core::getTable('EiTree')->findByRootIdAndType(
                        $this->getNodeTree()->getId(), 'Function');
    }

    //Récupération des éléments d'une fonction (raccourcis , vues cibles et fonctions cibles) 
    public function getFunctionNode() {
        return Doctrine_Core::getTable('EiTree')->findByRootId(
                        $this->getNodeTree()->getId());
    }

    public function reloadFromScript($login_syst, $pwd_syst, $login_user) {
        //on récupère le fichier de fonction sous script si la version y a évoluée
        $resultProcess = $this->getFunctionAndReload($login_syst, $pwd_syst, $login_user);

        //Si la fonction n'a pas été retrouvé dans le système central, alors on la désactive ou la supprime
        if ($resultProcess == -9) {
            $this->delete();
            //Cette suppréssion impactera tous les objets utilisants cette dernière (fonction sous test, paramètres ,scripts et commandes
        } elseif ($resultProcess == 1)
        //Si tout s'est bien passé, on recharge les données sur les tables utilisées par test
            $resultProcess = $this->getFunctionAndReloadInTest();
        return $resultProcess;
    }

    //Rechargement des tables d'interface de l'objetprint_r($sequences);

    public function getFunctionAndReload($login_syst, $pwd_syst, $login_user) {
        $conn = Doctrine_Manager::connection();
        try {
            $conn->beginTransaction();
            $ret = Doctrine_Core::getTable('KalFunction')
                    ->getFunctionAndReload($this->getDeltaf(), $this->getProjectId(), $this->getProjectRef(), $this->getFunctionId(), $this->getFunctionRef(), $login_syst, $pwd_syst, $login_user, $conn);
            //Si tout se passe bien , on valide la transaction
            if ($ret == 1)
                $conn->commit();
            return $ret;
        } catch (Exception $e) {
            //Sinon on annule la transaction
            $conn->rollback();
            throw $e;
        }
    }

    //Rechargement de la table de fonction et de ses tables liées

    public function getFunctionAndReloadInTest() {
        $conn = Doctrine_Manager::connection();
        try {
            $conn->beginTransaction();
            $ret = Doctrine_Core::getTable('KalFunction')->getFunctionAndReloadInTest($this, Doctrine_Core::getTable('ScriptEiFunction')->findOneByFunctionRefAndFunctionId($this->getFunctionRef(), $this->getFunctionId()), $conn);
            //Si tout se passe bien , on valide la transaction
            if ($ret == 1)
                $conn->commit();
            return $ret;
        } catch (Exception $e) {
            //Sinon on annule la transaction
            $conn->rollback();
            throw $e;
        }
    }

    //Renvoie de l'objet sous forme de tableau

    public function asArray() {
        return array(
            'function_id' => $this->getFunctionId(),
            'function_ref' => $this->getFunctionRef(),
            'name' => $this->getNodeTree()->getName(),
            'description' => $this->getDescription(),
            'created_at' => $this->getCreatedAt(),
            'updated_at' => $this->getUpdatedAt(),
        );
    }

    //Récupération des commandes d'une fonction

    public static function getCommandesTable(KalFunction $ei_function, EiProfil $profil = null) {

        $cmds = Doctrine_Core::getTable('EiFunctionHasCommande')->getCommandesFunction($ei_function, $profil);
        if (count($cmds) > 0) {
            $commandes = array();
            foreach ($cmds as $cmd) {
                $commandes[$cmd['ordre']] = array(
                    "command_target" => $cmd['command_target'],
                    "default_value" => $cmd['default_value'],
                    "name" => $cmd['name']
                );
            }
            return $commandes;
        }
        return null;
    }

    /**
     * Méthode retournant les commandes associées à la fonction.
     * 
     * @author Grégory Elhaimer
     * 
     * @return type 
     */
    public function getCommandes() {
        return Doctrine_Core::getTable('EiFunctionHasCommande')
                        ->findByFunctionRefAndFunctionId($this->getFunctionRef(), $this->getFunctionId());
    }

    //Génération du xsl d'une fonction kalifast sous test

    public function getXmlOrXslFunction(sfWebRequest $request, EiProfil $kal_profil, EiProjet $ei_project,EiUser $ei_user) {
        $commands = Doctrine_Core::getTable('EiFunctionHasCommande')
                ->getCommandesFunction($this, $kal_profil);
        //Si le profil est associé à plusieurs scripts à la fois , on lance un warning
        if (!($commands instanceof Doctrine_Collection) && $commands == -2)
            return -2;

        return ServicesWeb::creerXSL($request, $ei_project,$ei_user, $kal_profil, $commands);
    }

    /* Création d'une fonction sur la plate forme centrale */

    public static function createDistantFunction(EiProjet $ei_project,$data,  EiUserDefaultPackage $defPack , EiTree $ei_parent_tree=null , Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        try {
            $conn->beginTransaction(); //Début de la transaction
            //$result_file = new DOMDocument(); 
            $ei_subject=Doctrine_Core::getTable("EiSubject")->findOneByPackageIdAndPackageRef($defPack->getTicketId(),$defPack->getTicketRef());
            if($ei_subject==null):
                return false;
            endif;
            $result_update = MyFunction::loadResultOfWebServiceByPostJson(
             MyFunction::getPrefixPath(null) . "serviceweb/project/function/create.json", array('project_id' => $ei_project->getProjectId(),
                        'project_ref' => $ei_project->getRefId(), 
                        'ticket_id' => $defPack->getTicketId(),
                        'ticket_ref' => $defPack->getTicketRef(),
                        'package_name' => "Package_S".$ei_subject->getId(),
                        'parent_id' => $ei_parent_tree!=null?$ei_parent_tree->getId():null,
                        'user_id'=> $defPack->getUserId(),
                        'user_ref'=> $defPack->getUserRef(),
                        'data' => $data));  
            $array_result= json_decode(html_entity_decode($result_update) ,true);            
            //Récupération du projet pour traitement
            if (count($array_result) == 0):
                 return false;
            endif;
            
            if (array_key_exists("error", $array_result) ): 
                return false;
            endif;
            if (!$array_result[0]):
                return false;
            endif; 
            
                //Rechargement d'une fonction
                KalFunction::reload($array_result,$conn); 
                $conn->commit();
                return true; 
        } catch (Exception $e) {
            $conn->rollback();
            //return false;
            throw $e;
        }
    }
    
    
    //Rechargement d'une fonction
    public static function reload($array_result,$conn){
        if(count($array_result)>0): //var_dump($array_result);
            Doctrine_Core::getTable("KalFunction")->insertJsonFunction($array_result[0],$conn); //Chargement de la fonction
            Doctrine_Core::getTable("EiTree")->insertJsonFunction($array_result[0],"EiFunction",$conn); //Chargement du noeud associé
            $scriptsIds=array();   $cmdsIds=array(); $paramsIds=array(); $scriptVersionIds=array(); $noticeIds=array();$noticeVersionIds=array();$noticeProfileIds=array();
            /* Suppression des paramètres si la fonction existe */ 
            $conn->execute("delete FROM `ei_function_has_param` 
                WHERE function_id=".$array_result[0]['f_ref']." and function_ref=".$array_result[0]['f_ref'] );
           /*Suppression des relations script- profil inexistant sur la plate forme de rédaction des scripts (script.kalifast.com)*/  
            $conn->execute("delete FROM  ei_script_version  WHERE  script_id In (select script_id from ei_script where 
                    function_id=".$array_result[0]['f_id']." and function_ref=".$array_result[0]['f_ref'].")");
            
            /* Suppression des notices inexistantes sur script */
            $q1=" delete FROM ei_notice_profil   WHERE  
            (notice_id, notice_ref)  IN   (select notice_id, notice_ref FROM ei_notice where function_id=".$array_result[0]['f_ref']." and function_ref=".$array_result[0]['f_ref'].") ";
            $conn->execute($q1);
        
        //Supression des versions de notice concernées
        $q2=" delete FROM ei_version_notice  WHERE  
            (notice_id, notice_ref) IN (select notice_id, notice_ref FROM ei_notice where function_id=".$array_result[0]['f_ref']." and function_ref=".$array_result[0]['f_ref'].") ";
        $conn->execute($q2);
         
        
        //Supression de la notice en soit
       $conn->execute("  delete FROM ei_notice where function_id=".$array_result[0]['f_ref']." and function_ref=".$array_result[0]['f_ref']);
            
            foreach($array_result as $res):
            //Gestion des scripts de la fonction 
                if(!in_array($res['s_id'], $scriptsIds)) :
                    Doctrine_Core::getTable("EiScript")->insertJsonFunction($res,$conn); //Chargement du script  
                    $scriptsIds[]=$res['s_id'];
                endif; 
                if(!in_array($res['fc_id'], $cmdsIds)) :
                    Doctrine_Core::getTable("EiFunctionHasCommande")->insertJsonFunction($res,$conn); //Chargement des commandes  
                    $cmdsIds[]=$res['fc_id'];
                endif; 
                if(!in_array($res['fp_id'], $paramsIds)) :
                    Doctrine_Core::getTable("EiFunctionHasParam")->insertJsonFunction($res,$conn); //Chargement des paramètres  
                    $paramsIds[]=$res['fp_id'];
                endif; 
                if(!in_array($res['s_id'].$res['sv_pid'].$res['sv_pref'], $scriptVersionIds)) :
                    Doctrine_Core::getTable("EiScriptVersion")->insertJsonFunction($res,$conn); //Chargement des relations script-profil  
                    $scriptVersionIds[]=$res['s_id'].$res['sv_pid'].$res['sv_pref'];
                endif; 
                if(!in_array($res['n_id'].$res['n_ref'], $noticeIds)) :
                    Doctrine_Core::getTable("EiNotice")->insertJsonFunction($res,$conn); //Chargement des notices  
                    $noticeIds[]=$res['n_id'].$res['n_ref'];
                endif; 
                if(!in_array($res['n_id'].$res['n_ref'].$res['vn_id'].$res['vn_lang'], $noticeVersionIds)) :
                    Doctrine_Core::getTable("EiVersionNotice")->insertJsonFunction($res,$conn); //Chargement des notices  
                    $noticeVersionIds[]=$res['n_id'].$res['n_ref'].$res['vn_id'].$res['vn_lang'];
                endif; 
                if(!in_array($res['np_vn_id'].$res['n_id'].$res['n_ref'].$res['sv_pid'].$res['sv_pref'], $noticeProfileIds)) :
                    Doctrine_Core::getTable("EiNoticeProfil")->insertJsonFunction($res,$conn); //Chargement des notices  
                    $noticeProfileIds[]=$res['np_vn_id'].$res['n_id'].$res['n_ref'].$res['sv_pid'].$res['sv_pref'];
                endif;          
            endforeach;
            
            /* Mise à jour du delta projet */ 
            $conn->execute("update ei_projet set version_courante=".$array_result[0]['p_vers']." , version_kalifast=".$array_result[0]['p_vers']." , updated_at='".$array_result[0]['p_updat']."'  
                    where project_id=".$array_result[0]['p_id']." and ref_id=".$array_result[0]['p_ref']); 
        endif;
    }
            
}
