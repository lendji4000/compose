<?php

/**
 * EiIterationTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EiIterationTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object EiIterationTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('EiIteration');
    }

    /* Recherche des itérations d'une livraison groupées par profils */

    public function getDeliveryIterationsGroupByProfiles(EiProjet $ei_project, EiDelivery $ei_delivery, Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        /* Requête de récupération des itérations d'une livraison groupées par profil. On récupère également les itérations actives en même temps */
        $q = "
            SELECT p.*,g.id as guard_id ,g.username, i.id as iteration_id,i.delivery_id as i_delivery_id, i.description as i_desc,i.created_at as i_created_at,i.updated_at as i_updated_at,
            ai.iteration_id as active_iteration_id  FROM ei_profil p
            left join ei_iteration i on i.profile_id =p.profile_id and i.profile_ref=p.profile_ref And (i.delivery_id=" . $ei_delivery->getId()." or i.delivery_id is NULL)
            left join sf_guard_user g on g.id=i.author_id    
            left join ei_active_iteration ai on ai.iteration_id=i.id
            WHERE p.project_id= " . $ei_project->getProjectId() . " and p.project_ref=" . $ei_project->getRefId()  ; 
        $tabRes = $conn->fetchAll($q);         
        $arrayRes = array();
        if (count($tabRes) > 0):
            foreach ($tabRes as $res):
                if (!array_key_exists($res['profile_id'] . '-' . $res['profile_ref'], $arrayRes)):
                    $arrayRes[$res['profile_id'] . '-' . $res['profile_ref']] = array(
                        'profile_name' => $res['name'],
                        'profile_id' => $res['profile_id'],
                        'profile_ref' => $res['profile_ref'],
                        'base_url' => $res['base_url'],
                        'iterations' => array());
                endif;
                if (array_key_exists($res['profile_id'] . '-' . $res['profile_ref'], $arrayRes) && $res['iteration_id'] != null):
                    $arrayRes[$res['profile_id'] . '-' . $res['profile_ref']]['iterations'][] = array(
                        'iteration_id' => $res['iteration_id'],
                        'delivery_id' => $res['i_delivery_id'],
                        'username' => $res['username'],
                        'description' => $res['i_desc'],
                        'created_at' => $res['i_created_at'],
                        'updated_at' => $res['i_updated_at'],
                        'is_active' => (isset($res['active_iteration_id']) && $res['active_iteration_id'] != null) ? true : false
                    );
                endif;
            endforeach; 
        endif;
        return $arrayRes;
    }
 
    /* Enregistrement de l'itération active sur un profil  */
    public function saveActiveIteration($iteration_id,EiProjet $ei_project,EiProfil $ei_profile,Doctrine_Connection $conn = null){
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        $itLink=New EiActiveIteration();
            $itLink->setProjectId($ei_project->getProjectId());
            $itLink->setProjectRef($ei_project->getRefId());
           $itLink->setProfileId($ei_profile->getProfileId());
           $itLink->setProfileRef($ei_profile->getProfileRef());
           $itLink->setIterationId($iteration_id);
           $itLink->save($conn);
    }
    /* Récupération des authors d'itérations pour un projet donné . (sert pour les recherches ) */
    public function getIterationAuthorsForProject(EiProjet $ei_project,  Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection();
        $typehead=array();
        $iterationAuthors=$conn->createQuery()->from('sfGuardUser u')  
                ->select('u.username')
                ->leftJoin('u.iterationAuthor d')
                ->where('project_id= ? And project_ref=? ',
                        array($ei_project->getProjectId(),$ei_project->getRefId()))
                ->execute();
        //Parse iteration author for typehead 
        if(count($iterationAuthors)>0):
            foreach($iterationAuthors as $iterationAuthor):
            $typehead[]=$iterationAuthor->getUsername();
            endforeach;
        endif;
        return $typehead;
    }
    
    /* Récupération des itérations avec les livraisons, utilisateurs, profils et liaisons permettant de savoir si ces dernières sont actives ou non */
    public function getIterations($project_id,$project_ref,  Doctrine_Connection $conn=null ){
        if($conn==null) $conn = Doctrine_Manager::connection();
        return "select i.*,ai.iteration_id as ai_iteration_id,g.username ,d.name as delivery_name ,pr.name as profile_name from ei_iteration i ".
                                    " left join sf_guard_user g on g.id=i.author_id ".
                                    " left join ei_delivery d on d.id=i.delivery_id ".
                                    " left join ei_active_iteration ai on ai.iteration_id=i.id and ai.profile_id=i.profile_id and ai.profile_ref=i.profile_ref ".
                                    " left join ei_profil pr on pr.profile_id=i.profile_id and pr.profile_ref=i.profile_ref ".
                                    " where i.project_id=".$project_id. " and i.project_ref=".$project_ref;
    }
    /* Récupération d'une liste d'itérations diverses */
    public function getManyIterations($project_id,$project_ref,array $ei_iterations,  Doctrine_Connection $conn=null ){
        if($conn==null) $conn = Doctrine_Manager::connection();
        if(count($ei_iterations)==0):
            return  null;
        else:
            return $conn->fetchAll($this->getIterations($project_id,$project_ref)." And i.id IN (".implode(',',$ei_iterations).")");
        endif;
    }
    /* Récupération de la dernière itération d'une livraison */
    public function  getLastIterationForProfile($project_id,$project_ref,$delivery_id,$profile_id,$profile_ref, Doctrine_Connection $conn=null ){
        if($conn==null) $conn = Doctrine_Manager::connection();
        $q=$this->getIterations($project_id, $project_ref, $conn);
        if($delivery_id!=null):
            $q.=" and i.delivery_id =".$delivery_id;
        endif;
        if($profile_id!=null && $profile_ref!=null):
            $q.=" and i.profile_id =".$profile_id." and i.profile_ref=".$profile_ref;
        endif;
        /* On ordonne par ordre de création d'itération décroissante et on récupère la première */
        $q.=" order by i.created_at desc limit 1";
        //throw new Exception($q);
        return $conn->fetchAll($q);
    }
    /* Récupération d'un ensemble d'itération relativement à des critères de recherche pour le retour des statistiques d'une livraison */
    public function getManyIterationsByCriterias($project_id,$project_ref,array $criterias, Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection();
         $q=$this->getIterations($project_id, $project_ref, $conn);
         /* Filtre sur les critères renseignés dans le formulaire de recherche */
         /* Filtre sur l'auteur (createur) de l'iteration */ 
      if(isset($criterias['author']) && $criterias['author']!=null):
          $q.=" and username ='".$criterias['author']."'";
      endif; 
        /* Filtre sur la livraison*/ 
      if(isset($criterias['delivery']) && $criterias['delivery']!=0 ):
          $q.=" and i.delivery_id =".$criterias['delivery'];
      endif;
      /* Filtre sur l'environnement*/ 
      if(isset($criterias['environment'])):
          $q.=" and i.profile_id =".$criterias['environment']['profile_id']." and i.profile_ref=".$criterias['environment']['profile_ref'];
      endif;
      /* Filtre sur l'iteration active*/ 
      if(isset($criterias['is_active']) && $criterias['is_active'] ):
          $q.=" and ai.iteration_id IS NOT NULL" ;
      endif;
      //throw new Exception($q);
      return $conn->fetchAll($q);
    }
    
}
