<?php

/**
 * EiNode
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    kalifastRobot
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class EiNode extends BaseEiNode
{
    /** @var string Noeud de type dossier de JDD. */
    public static $TYPE_DATASET_FOLDER = "EiDataSetFolder";
    /** @var string Noeud de type scénario. */
    public static $TYPE_SCENARIO = "EiScenario";
    /** @var string Noeud de type dossier. */
    public static $TYPE_FOLDER = "EiFolder";
    /** @var string Noeud de type template de JDD. */
    public static $TYPE_DATASET_TEMPLATE = "EiDataSetTemplate";
    /** @var string Noeud de type version de template de JDD. */
    public static $TYPE_DATASET_VERSION = "EiDataSet";

    public function __toString() {
        
        return sprintf('%s', $this->getName());
    }
    
    public function save(\Doctrine_Connection $conn = null) {
        $isNew = $this->isNew();
        parent::save($conn);
        
        if($this->getType() == EiNode::$TYPE_DATASET_FOLDER && $isNew){
            $this->setObjId($this->getId());
            $this->save($conn);
        }
    }

    /**
     * @param $parent
     * @param EiProjet $projet
     * @param $nom
     */
    public function createEmpty($parent, EiProjet $projet, $nom){
        $this->project_id = $projet->getProjectId();
        $this->project_ref = $projet->getRefId();
        $this->name = $nom;
        $this->root_id = $parent;
    }
    
    /**
     * Récupère le nom tronqué du projet.
     * 
     */
    public function getTroncatedName($size = 10){
        if($size <= 0)
            throw new InvalidArgumentException('Invalid size value to troncate project name. '. $size . ' is not a valid value.');
        
        if (strlen($this->getName()) > $size):
            return substr($this->getName(), 0, $size-3) . '...';
        else:
            return $this->getName();
        endif;
    }
    
    //Récupération du projet d'un noeud
    public function getProject(){
        return Doctrine_Core::getTable('EiProjet')->findOneByProjectIdAndRefId(
                $this->getProjectId(),$this->getProjectRef());
    }
    
    /*Récupération du scénario d'un jeu de données ou dossier de jeux de données.
     * On parcours les parents à partir du noeud en question jusqu'a retrouvé un noeud de type EiScénario
     */
    public function getEiScenarioNode(){
        //Si le noeud n'est pas de type 'EiDataSet ou EiDataSetFolder' on retourne null
        $ei_node=$this;
        $type=$ei_node->getType();
        if(!in_array($type, array(self::$TYPE_DATASET_FOLDER, self::$TYPE_DATASET_TEMPLATE, self::$TYPE_DATASET_VERSION))) return null;
        While ($type!='EiScenario'):
            $ei_node=$ei_node->getParent();
            $type=$ei_node->getType();
        endwhile;
        //A la sortie, on a le scénario souhaité
        return $ei_node;
    }
    
    //Récupération des éléments ordonnés d'un noeud (raccourcis ,Dossiers , Scénarios)
    // TODO: Adaptation aux templates de JDD. Modification du second argument et ajout du troisième.
    public function getNodes($also_data_set_folder=false, $also_data_set_template=false, $also_data_set=false){
        $q = Doctrine_Core::getTable('EiNode')->createQuery('n')->where('n.root_id=?',$this->getId());
        //Retour des dossiers de jeux de données
        if(!$also_data_set_folder) $q = $q->andWhere('n.type != ?', self::$TYPE_DATASET_FOLDER);
        //Retour des  jeux de données
        if(!$also_data_set_template) $q = $q->andWhere('n.type != ?', self::$TYPE_DATASET_TEMPLATE);
        //Retour des  jeux de données
        if(!$also_data_set) $q = $q->andWhere('n.type != ?', self::$TYPE_DATASET_VERSION);

        return $q->orderBy('n.position ASC')
                ->execute(); 
    }

    /**
     * @param EiNode $parent
     * @return EiNode[]
     */
    public function getStructure(EiNode $parent = null){
        /** @var EiNode[] $structure */
        $structure = array();
        $parent = $parent !== null ? $parent:$this;

        $this->setName($this->getProject()->getName());

        $query = Doctrine_Core::getTable('EiNode')->createQuery('n')->where('n.root_id=?',$parent->getId());
        // TODO: Adaptation aux templates de JDD.
        $query = $query->andWhere('n.type != ?', self::$TYPE_DATASET_FOLDER);
        $query = $query->andWhere('n.type != ?', self::$TYPE_DATASET_TEMPLATE);
        $query = $query->andWhere('n.type != ?', self::$TYPE_DATASET_VERSION);

        $oChilds = $query->orderBy('n.position ASC')->execute();

        /** @var EiNode $oChild */
        foreach( $oChilds as $oChild ){
            if( $oChild->getType() === "EiFolder" ){
                $structure[] = $this->getStructure($oChild);
            }
            else{
                $structure[] = array(
                    "root" => $oChild->asArray()
                );
            }
        }

        return array(
            "root" => $parent->asArray(),
            "childs" => $structure
        );

    }
    
    public function getIndentedName() {
        return $this['name'];
    }
    
    //Renomage d'un noeud
    public function rename($new_node_name,$conn=null){
        if($new_node_name=="") return null; 
        if($conn==null) $conn = Doctrine_Manager::connection();  
          
            //mise à jour du nom du noeud
            try {
                $conn->beginTransaction();
                
                $this->setName($new_node_name);
                $this->save($conn);
                //Mis à jour du nom de l'objet associé
                
                $nodeTypeObject=$this->getNodeTypeObject();
                if($nodeTypeObject==null)   throw new Exception;
                    Doctrine_Core::getTable($nodeTypeObject)->rename($this->getObjId(),$new_node_name,$conn);
                      
                $conn->commit();
              }catch (Exception $e){
                  $conn->rollback();
                throw $e;
              }
    }
    
    public function getNodeTypeObject(){
        
        switch (($this->getType())) {
                case 'EiScenario': return 'EiScenario';
                    break;
                case 'EiFolder': return 'EiFolder';
                    break; 

                default: return null;
                    break;
            }
    }
    
    public function delete(Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
          
            if ($this->getType() == 'EiFolder')
                $this->deleteFolder($conn);
            
            if ($this->getType() == 'EiScenario')
                $this->deleteScenario($conn);
            
            parent::delete($conn); 
    }
    
    //Supression d'un noeud et de ses fils
    public function deleteNodeDiagram( Doctrine_Connection $conn = null){
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        
        try {
            $conn->beginTransaction(); 
            
            $nodes=$this->getNodes(true,true);
            if($nodes->getFirst()){
                foreach ($nodes as $node){
                    $node->deleteNodeDiagram($conn);
                }
            }
             //Suppression du noeud en question
            $this->delete($conn);
            
            $conn->commit();
        } catch (Exception $e) {
            $conn->rollback();
            throw $e;
        }
    }
    
    public function deleteFolder(Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        Doctrine_Core::getTable('EiFolder')->findOneById($this->getObjId())->delete($conn);
    }
    
    public function deleteScenario(Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        $scenario=Doctrine_Core::getTable('EiScenario')->findOneById($this->getObjId());
        //Suppression des versions du scénario
        foreach ($scenario->getEiVersions() as $v)
                $v->delete($conn);
        //Suppression du scénario en soit
        $scenario->delete($conn);
    }
    
    public function asArray() {
        return
                array(
                    'id' => $this->getId(),
                    'name' => $this->getName(),
                    'type' => $this->getType(),
                    'obj_id' => $this->getObjId(),
                    'is_root' => $this->getIsRoot(),
                    'is_shortcut' => $this->getIsShortcut(),
                    'project_id' => $this->getProjectId(),
                    'project_ref' => $this->getProjectRef(),
                    'position' => $this->getPosition(),
                    'root_id' => $this->getRootId(),
                    'created_at' => $this->getCreatedAt(),
                    'updated_at' => $this->getUpdatedAt(),
        );
    }
    
    public function getParent(){
        if($this->getRootId() == null)
            return null;
        
        return Doctrine_Core::getTable('EiNode')->find($this->getRootId());
        
    }
    
    public function getPathTo(){
        $res = array($this);
        
        if(!$this->getIsRoot()){
            return array_merge($this->getParent()->getPathTo(),$res);      
        }
         
        return $res;
    }
    
    
    /**
     * Créer une nouvelle instance de EiNodeOpenedBy et l'enregistre en base de données.
     * @param type $type Type de noeuf (folder ou scenario)
     * @param type $user
     * @return type
     */
    public function openNode($user) {
        $opened = Doctrine_Core::getTable('EiNodeOpenedBy')
                ->findOneByUserIdAndRefIdAndEiNodeId($user->getUserId(), $user->getRefId(), $this->getId());
        
        if ($opened == null) {
            $opened = new EiNodeOpenedBy();
            $opened->setRefId($user->getRefId());
            $opened->setUserId($user->getUserId());
            $opened->setEiNodeId($this->getId());
            $opened->save();
        }
    }
}
