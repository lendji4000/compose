<?php

/**
 * EiTestSetTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EiTestSetTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object EiTestSetTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('EiTestSet');
    }

    //******************************************//
    //*****     GESTION DE L'EXECUTION     *****//
    //******************************************//

    /**
     * Méthode permettant de synchroniser les paramètres de block à partir d'une position de fonction et pour toute l'arbrorescence.
     *
     * @param EiTestSet $testSet
     * @param string $xpath
     * @param int $positionStart
     * @param array $namesParamsUpdated
     *
     * @created 21/10/2014
     * @updated 21/10/2014
     */
    public function updateParamsFunctionToSynchronize(EiTestSet $testSet, $xpath = "", $positionStart = 1, $namesParamsUpdated = array())
    {
        $implode = implode(",", $namesParamsUpdated);

        if( count($namesParamsUpdated) > 0 && strlen($implode) > 0)
        {
            $sql =
                "
                SELECT tsp.id as id, tsbp.value as val
                FROM ei_test_set_function  tsf, ei_test_set_param tsp, ei_param p, ei_test_set_block_param tsbp
                WHERE tsf.ei_test_set_id = ".$testSet->getId()."
            AND tsf.position > ".$positionStart."
            AND tsp.param_type = 'IN'
            AND p.valeur LIKE '#{%}'
            AND tsf.xpath = '".$xpath."'
            AND tsbp.path = CONCAT(CONCAT(tsf.xpath, '/'), REPLACE(REPLACE(p.valeur, '#{', ''), '}', ''))
            AND p.valeur IN (".$implode.")
            AND tsp.ei_test_set_function_id = tsf.id
            AND tsp.param_id = p.param_id
            AND tsf.ei_fonction_id = p.id_fonction
            AND tsbp.ei_test_set_id = tsf.ei_test_set_id;
            ";

            /** @var EiTestSetParamTable $tableParam */
            $tableParam = Doctrine_Core::getTable("EiTestSetParam");

            $parametres = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAll($sql);
            $count = count($parametres);

            if( $count > 0 )
            {
                foreach( $parametres as $parametre ){

                    /** @var EiTestSetParam $param */
                    $param = $tableParam->find($parametre["id"]);

                    if( !is_null($param) ){
                        $param->setValeur($parametre["val"]);
                        $param->save();
                    }
                }
            }

        }
    }

    //***************************************************//
    //*****     RECHERCHE BLOCK SUIVANT/COURANT     *****//
    //***************************************************//

    /**
     * @param $functionId
     * @param bool $next
     * @return mixed|null
     */
    public function getBlockAtFunction($functionId, $next = false){
        // Récupération de la connexion BDD.
        $conn = Doctrine_Manager::connection();

        // Définition requête SQL permettant de générer
        $searchBlockSql = "
SELECT block.id as id
FROM ei_version_structure child, ei_version_structure parent, ei_version_structure block
WHERE child.ei_fonction_id = ".$functionId."
AND parent.id = child.ei_version_structure_parent_id
AND block.type IN ('EiBlock', 'EiBlockForeach')
AND block.root_id = parent.root_id
AND block.lft >".($next == false ? "=":"")." parent.lft
ORDER BY block.lft
LIMIT 1;";

        try{
            // Récupération du block suivant.
            $blockId = $conn->execute($searchBlockSql)->fetch();

            if( !is_bool($blockId) && isset($blockId["id"]) ){
                return Doctrine_Core::getTable("EiVersionStructure")->find($blockId["id"]);
            }
        }
        catch( Exception $exc ){
            return null;
        }
    }

    /**
     * Méthode permettant de récupérer le block suivant à partir de la dernière fonction exécutée
     * passés en paramètres.
     *
     * @param $functionId
     *
     * @return EiVersionStructure
     *
     * @created 18/08/2015
     */
    public function getCurrentBlock($functionId){
        return $this->getBlockAtFunction($functionId);
    }

    /**
     * Méthode permettant de récupérer le block suivant à partir de la dernière fonction exécutée
     * passés en paramètres.
     *
     * @param $functionId
     *
     * @return EiVersionStructure
     *
     * @created 18/08/2015
     */
    public function getNextBlock($functionId){
        return $this->getBlockAtFunction($functionId, true);
    }

    //**********************************************//
    //*****     RECHERCHE/RECUPERATION JDT     *****//
    //**********************************************//

    /**
     * @param $test_set_id
     * @param bool $fullObj
     * @return EiTestSet|null
     */
    public function findTestSet($test_set_id, $fullObj = false)
    {
        // Création de la requête SQL de récupération
        $sql = "SELECT * FROM ei_test_set_status_vw WHERE id = " . $test_set_id . ";";
        // Récupération des résultats.
        $resultat = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchRow($sql);

        if( $resultat === false ){
            return null;
        }
        elseif( !$fullObj ){
            $jdt = new EiTestSet();
            $jdt->fromArray($resultat);
            $jdt->setStatusName($resultat["status_nom"]);
            $jdt->setStatusColor($resultat["status_color"]);
            $jdt->setDuree($resultat["duree"]);
            $jdt->setNbFct($resultat["nb_fct"]);
            $jdt->setNbFctExecutees($resultat["nb_fct_executees"]);

            return $jdt;
        }
        else{
            $jdt = $this->find($test_set_id);
            $jdt->setStatusName($resultat["status_nom"]);
            $jdt->setStatusColor($resultat["status_color"]);
            $jdt->setDuree($resultat["duree"]);
            $jdt->setNbFct($resultat["nb_fct"]);
            $jdt->setNbFctExecutees($resultat["nb_fct_executees"]);

            return $jdt;
        }
    }

    /**
     * @param $scenario_id
     */
    public function findAllTestSet($scenario_id)
    {
        // Création de la requête SQL de récupération
        $sql = "SELECT * FROM ei_test_set_status_vw WHERE ei_scenario_id = " . $scenario_id . " ORDER BY id DESC ;";
        // Récupération des résultats.
        $resultats = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAll($sql);

        // Création de la collection.
        $collection = new Doctrine_Collection("EiTestSet");

        foreach( $resultats as $resultat ){
            $jdt = new EiTestSet();
            $jdt->fromArray($resultat);
            $jdt->setStatusName($resultat["status_nom"]);
            $jdt->setStatusColor($resultat["status_color"]);
            $jdt->setDuree($resultat["duree"]);
            $jdt->setNbFct($resultat["nb_fct"]);
            $jdt->setNbFctExecutees($resultat["nb_fct_executees"]);

            $collection->add($jdt);
        }

        return $collection;
    }

    /**
     * Retourne le jeu de test à partir du scénario & du profil.
     *
     * @param array $parameters
     * @return mixed
     * @throws sfError404Exception
     */
    public function getLastFromScenarioAndProfil(array $parameters){

        if( isset($parameters["profile_id"]) && isset($parameters["profile_ref"]) ){
            $profileId = $parameters["profile_id"];
            $profileRef = $parameters["profile_ref"];
        }
        elseif( isset($parameters["profil_id"]) && isset($parameters["profil_ref"]) ){
            $profileId = $parameters["profil_id"];
            $profileRef = $parameters["profil_ref"];
        }
        else{
            $profileId = "-1";
            $profileRef = "-1";
        }

        $testset = self::getInstance()->createQuery('test')
            ->where('test.ei_scenario_id = ?', $parameters["scenario_id"])
            ->andWhere('test.profile_id = ?', $profileId)
            ->andWhere('test.profile_ref = ?', $profileRef)
            ->orderBy('test.id DESC')
            ->fetchOne()
        ;

        if( $testset === null ){
            throw new sfError404Exception("Test set not found");
        }

        return $testset;
    }

    /**
     * Retourne le dernier jeu de test exécuté à partir du scénario, du profil et du
     * jeu de données passés en paramètres.
     *
     * @param array $parameters
     * @return mixed
     * @throws sfError404Exception
     */
    public function getLastFromScenarioAndProfilAndDataSet(array $parameters){
        $testset = self::getInstance()->createQuery('test')
            ->where('test.ei_scenario_id = ?', $parameters["scenario_id"])
            ->andWhere('test.profile_id = ?', $parameters["profil_id"])
            ->andWhere('test.ei_data_set_id = ?', $parameters["ei_data_set"])
            ->orderBy('test.id DESC')
            ->fetchOne()
        ;

        if( $testset === null ){
            throw new sfError404Exception("Test set not found");
        }

        return $testset;
    }

    public function getTestSetObjectById(array $parameters){
        $testset = self::getInstance()->createQuery('test')
            ->where('test.id = ?', $parameters["ei_test_set_id"])
            ->orderBy('test.id DESC')
            ->fetchOne()
        ;

        if( $testset === null ){
            throw new sfError404Exception("Test set not found");
        }

        return $testset;
    }

    //************************************************//
    //*****     GESTION DES STATUTS DES JDTs     *****//
    //************************************************//

    /**
     * Création des statuts par défaut pour les projets n'en disposant pas.
     *
     * @param $project_id
     * @param $project_ref
     * @param $conn
     * @return int
     */
    public function createDefaultTestSetStates($project_id, $project_ref,$conn){
        if($conn==null) $conn = Doctrine_Manager::connection();

        $states=$this->getTestSetStatesForProjectQuery($project_id, $project_ref, $conn)->execute();

        if(count($states)==0){  // Alors aucun statut n'existe et dans ce cas on crée ceux par défaut
            // Success
            $this->createState($project_id, $project_ref, 'Success', '#58A155', 'OK', $conn);
            // Failed
            $this->createState($project_id, $project_ref, 'Failed', '#D8473D', 'KO', $conn);
            // Processing
            $this->createState($project_id, $project_ref, 'Processing', '#FFD300', 'NA', $conn);
            // Aborted
            $this->createState($project_id, $project_ref, 'Aborted', '#B9B5AF', 'ABORTED', $conn);
            return 1;
        }
        return 0;
    }

    /**
     * @param $project_id
     * @param $project_ref
     * @param Doctrine_Connection $conn
     * @return Doctrine_Query
     */
    public function getTestSetStatesForProjectQuery($project_id, $project_ref,Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection();
        return $conn->createQuery()->from('EiTestSetState')
            ->where('project_id= ? And project_ref=? ',
                array($project_id,$project_ref)) ;
    }

    /**
     * @param $testSetId
     * @return mixed
     */
    public function calculerStatutTestSet($testSetId = -1)
    {
        $correspondances = array(
            "OK" => StatusConst::STATUS_TEST_OK_DB,
            "KO" => StatusConst::STATUS_TEST_KO_DB,
            "AB" => StatusConst::STATUS_TEST_NA_DB,
            "NA" => StatusConst::STATUS_TEST_PROCESSING_DB
        );

        $sql = "
SELECT
    CASE
        WHEN SUM(CASE WHEN func.status ='ko' THEN 1 else 0 end ) > 0 THEN 'KO'
        WHEN SUM(CASE WHEN func.status ='NA' THEN 1 else 0 end ) > 0 THEN 'AB'
        WHEN SUM(CASE WHEN (func.status ='processing' OR func.status = 'blank') AND ts.termine = 0 THEN 1 else 0 end ) > 0 THEN 'NA'
        WHEN SUM(CASE WHEN (func.status ='processing' OR func.status = 'blank') AND ts.termine = 1 THEN 1 else 0 end ) > 0 THEN 'AB'
        ELSE 'OK'
    END as statut
FROM ei_test_set_function func, ei_test_set ts
WHERE ei_test_set_id = ".$testSetId."
AND ts.id = ei_test_set_id
GROUP BY ei_test_set_id
        ";

        $statut = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchOne($sql);

        return $statut;
    }

    /**
     * @param $project_id
     * @param $project_ref
     * @param $state
     * @param $color_code
     * @param $statut_code
     * @param $conn
     */
    public function createState($project_id, $project_ref, $state, $color_code, $statut_code, $conn)
    {
        if($conn==null) $conn = Doctrine_Manager::connection();

        $conn->insert(Doctrine_Core::getTable("EiTestSetState"),array(
            'name' => $state,
            'color_code' => $color_code,
            'state_code' => $statut_code,
            'project_id' => $project_id,
            'project_ref' => $project_ref,
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s')
        ));
    }

    /**
     * @param EiTestSet $testSet
     * @param EiProjet $project
     */
    public function searchRelatedEiExecutionStackAndTaggedIt(EiTestSet $testSet, EiProjet $project){
        /** @var EiExecutionStack $executionStack */
        $executionStack = Doctrine_Core::getTable("EiExecutionStack")
            ->search(
                $testSet->getEiScenarioId(),
                $testSet->getEiDataSetId(),
                $testSet->getProfileRef(),
                $testSet->getProfileId(),
                $project->getRefId(),
                $project->getProjectId(),
                $testSet->getSfGuardUser()->getId()
            );

        if( $executionStack != null && $executionStack->getId() != "" ){
            $executionStack->setEiTestSetId($testSet->getId());
            $executionStack->save();
        }
    }

    //*******************************************************************//
    //**********     METHODES DE MAJ/EPURATION DES STATUTS     **********//
    //*******************************************************************//

    /**
     * Méthode permettant de passer les exécutions de JDT à terminée si sa dernière mise à jour date de plus de 1 heure.
     */
    public function closeUnterminatedTestSet(){
        $conn = Doctrine_Manager::connection();

        $sql1 = "
        SELECT ei_test_set_id
        FROM ei_test_set_function tsf, ei_test_set
        WHERE termine = 0
        AND ei_test_set_id = ei_test_set.id
        GROUP BY ei_test_set_id
        HAVING MAX(tsf.updated_at) < (NOW() - INTERVAL 30 MINUTE);
        ";

        $ids = $conn->execute($sql1)->fetchAll(PDO::FETCH_COLUMN);

        if( is_array($ids) && count($ids) > 0 ){
            $sql2 = "
                UPDATE ei_test_set
                SET termine = 1
                WHERE id IN (".implode(",", $ids).")
            ";

            $sql3 = "
                UPDATE ei_test_set
                SET status = 'AB'
                WHERE termine = 1 AND status = 'NA'
            ";

            $conn->exec($sql2);
            $conn->exec($sql3);
        }
    }
}