<?php

/**
 * EiFonctionTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EiFonctionTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object EiFonctionTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('EiFonction');
    }
    
    /*
     * Récupération d'une fonction par rapport au scnéario , jeu de test et la position dans le jeu de tests
     */ 
    public function getFunctionByScenarioTestSetAndPosition($position,EiScenario $ei_scenario=null, EiTestSet $ei_test_set=null){
        if($position==null || $ei_scenario==null || $ei_test_set==null ) return null ;
        
        $q = Doctrine_Core::getTable('EiFonction')->createQuery('f')
                        ->where('EiTestSetFunction.ei_fonction_id=f.id And EiTestSetFunction.ei_test_set_id=? And EiTestSetFunction.position=?', 
                                array($ei_test_set->getId(),$position))
                        ->andWhere('EiTestSet.id=EiTestSetFunction.ei_test_set_id And EiTestSet.ei_scenario_id=?',
                                array($ei_scenario->getId()))
                        ->execute();
                
        if(count($q) > 0) return $q->getFirst();
        return null;
    }
    /**
     * Retourne le nom de chacune des fonctions
     * contenues dans $fct. Ce table est indexé de la manière
     * suivante : function_id-function_ref
     */
    public function getNames($fonctions) {
        $res = array();
        //récupération des noms des fonctions.
        $requete = Doctrine_Core::getTable('EiTree')->createQuery('t');

        foreach ($fonctions as $f => $fct)
            $requete->orWhere('t.ref_obj = ? AND t.obj_id = ?', array($fct->getFunctionRef(), $fct->getFunctionId()));

        $names = $requete->execute();

        foreach ($names as $f => $fct) {
            $res[$fct['obj_id'] . '-' . $fct['ref_obj']] = $fct['name'];
        }

        return $res;
    }

    public function getEnabledCallingFunction($id_kalfonction) {
        return Doctrine_Core::getTable('KalFonction')->getEnabledCallingFunction($id_kalfonction);
    }
 

    public function getFonctions() {
        return $this->getInstance()->createQuery('f');
    }
    
    /**
     * Récupère l'ensemble des executions d'une fonction données par 
     * $function_id et $function_ref pour le projet $project_id et $project_ref
     * @param type $project_id
     * @param type $project_ref
     * @param type $function_id
     * @param type $function_ref
     * @return type
     */
    public function getTimeStats($project_id, $project_ref, $function_id, $function_ref){
        $query = self::getInstance()->createQuery('fct')
                ->select('fct.id, l.duree')
                ->leftJoin("fct.EiLogFunction l")
                ->where("fct.function_ref = ?", $function_ref)
                ->andWhere('fct.function_id = ?', $function_id)
                ->andWhere('fct.project_id = ?', $project_id)
                ->andWhere('fct.project_ref = ?', $project_ref)
                ->orderBy('l.date_debut');
        //récupération des éléments sous forme de tableau à 2 dimensions (d1=lignes, d2=attribut)
        $res = $query->execute(array(), Doctrine::HYDRATE_SCALAR);
        
        return $res;
    }

    public function generateXMLForPHP(EiFonction $ei_fonction, KalFunction $kal_function, EiProfil $ei_profile, $ei_params, $profileParams, $request) {
        //reccupération du prefixe d'url suivant l'environnement
        $prefix = MyFunction::getPrefixPath();
        if ($ei_fonction == null || $ei_profile == null || $kal_function == null)
            return null;

        //         $urlxsl = "http://" . $prefix . "eifonction/genererXSL/" . $kal_function->getFunctionId() . "/" . 
        //                 $kal_function->getFunctionRef() . "/" . $ei_profile->getProfileId() . "/" . $ei_profile->getProfileRef() . ".xml";
        // On définit le document.
        $dom = new DomDocument("1.0", "utf-8");
        $dom->formatOutput = true;
        //Génération de l'url du xsl associé à la fonction
        $user = $dom->createElement('user');
        //$user->setAttribute("xsl", $urlxsl);
        $dom->appendChild($user);


        // Ajout du nom de la fonction
        $nom_balise_fonction = $dom->createElement('fonction-' . $kal_function->getFunctionId() . '_' . $kal_function->getFunctionRef());
        $nom_balise_fonction->setAttribute("name", $kal_function);
        $user->appendChild($nom_balise_fonction);

        // Ajout des paramètres de fonctions au xml 
        if ($ei_params->getFirst()) {
            //creation du bloc de balise pour paramètres 
            foreach ($ei_params as $ei_param) {
                $nom_balise_param = $dom->createElement($ei_param->getKalParam()->getName());
                $param_value = $dom->createTextNode($ei_param->getValeur());
                $nom_balise_param->appendChild($param_value);
                $nom_balise_fonction->appendChild($nom_balise_param);
            }
        }

        // Ajout des paramètres de profil au xml 
        if ($profileParams->getFirst()) {
            //creation du bloc de balise pour paramètres 
            foreach ($profileParams as $profileParam) {
                $nom_balise_param = $dom->createElement($profileParam->getStringName());
                $param_value = $dom->createTextNode($profileParam->getValue());
                $nom_balise_param->appendChild($param_value);
                $nom_balise_fonction->appendChild($nom_balise_param);
            }
        }

        $dom->normalizeDocument();

        // Afficher le document XML 
        return $dom->saveXML();
    }

    /**
     * Génère le XML d'une fonction pour le jeu de test.
     * Elle diffère de la fonction generateXMLForPHP dans la mesure où 
     * generateXMLFromTestSet n'utilise que des tableaux pour la fonction.
     * 
     * @param type $ei_fonction
     * @param EiProfil $profile
     * @return type
     */
    public function generateXMLFromTestSet($ei_fonction, EiProfil $profile) {
        $prefix = MyFunction::getPrefixPath();
        // On définit le document.
        $dom = new DomDocument("1.0", "utf-8");
        $dom->formatOutput = true;
        //Génération de l'url du xsl associé à la fonction
        $user = $dom->createElement('user');
        //$user->setAttribute("xsl", $urlxsl);
        $dom->appendChild($user);
        
        $nom_balise_fonction = $dom->createElement('fonction-' . $ei_fonction['function_id'] . '_' . $ei_fonction['function_ref']);
        $nom_balise_fonction->setAttribute("name", $ei_fonction['name']);
        $user->appendChild($nom_balise_fonction);
        //paramètre de la fonction
        foreach($ei_fonction['params'] as $p => $param){
            $nom_balise_param = $dom->createElement($param['name']);
            $param_value = $dom->createTextNode($param['valeur']);
            
            $nom_balise_param->appendChild($param_value);
            $nom_balise_fonction->appendChild($nom_balise_param);
        }
        //paramètres de profil
        foreach($profile->getParams() as $param){
            $nom_balise_param = $dom->createElement($param->getStringName());
            $param_value = $dom->createTextNode($param->getValue());
            
            $nom_balise_param->appendChild($param_value);
            $nom_balise_fonction->appendChild($nom_balise_param);
        }
        
        
        $dom->normalizeDocument();

        // renvoie du fichier XML sous forme de chaine de caractères. 
        return $dom->saveXML();
    }

    public function generateXML($id_fonction) {
        $fonction = Doctrine_Core::getTable('EiFonction')->findOneBy('id', $id_fonction);

        if ($fonction == null)
            return null;
        $doc = "";

        // Ajout la balise 'table' a la racine
        $nom_balise_fonction = 'fonction-' . $fonction->getKalFonction()->function_ref . '_' . $fonction->getKalFonction()->function_id;
        $balise_fonction = '<' . $nom_balise_fonction . '>';
        $doc = $doc . ' ' . $balise_fonction;

        // Ajout des fonctions au tableau
        $params = Doctrine_Core::getTable('EiParam')->findBy('id_fonction', $fonction->id);
        if ($params != null) {
            //creation du bloc de balise pour paramètres
            $balise_param = "";
            foreach ($params as $param) {
                $nom_balise_param = $param->getKalParam()->nom_param;
                $balise_param = $balise_param . '<' . $nom_balise_param . '>' . $param->valeur . '</' . $nom_balise_param . '>';
            }
            $doc = $doc . '  ' . $balise_param;
        }
        $doc = $doc . '     ' . '</' . $nom_balise_fonction . '>';
        return $doc;
    }

    //Fonctions d'un profil 
    public function getFonctionsByProfilAndScenario($profile_id, $profile_ref, $ei_scenario_id) {
        $q = Doctrine_Core::getTable('EiVersion')->createQuery('v')
                        ->where('EiProfilScenario.ei_version_id=v.id And EiProfilScenario.profile_id=? And EiProfilScenario.profile_ref=? And EiProfilScenario.ei_scenario_id=?', Array($profile_id, $profile_ref, $ei_scenario_id))->execute();
        if (!$q->getFirst())
            return null;
        $version = $q->getFirst();
        return $this->getFonctionsByCriteria($version->getId(), $ei_scenario_id, null, null, null, null)->execute();
    }

    //reccupération d'une fonction par paramètre
    public function getFonctionsByCriteria($ei_version_id, $ei_scenario_id, $function_id, $function_ref, $created_at, $updated_at) {
        // si aucune fonction n'existe on n retourne rien

        $q = $this->getFonctions();

        //fonctions d'une version précise
        if ($ei_version_id != null) {
            $q = $q->andWhere('f.ei_version_id = ?', $ei_version_id);
        }

        //fonctions d'un scénario spécifique
        if ($ei_scenario_id != null) {

            $q = $q->andWhere('f.ei_scenario_id = ?', $ei_scenario_id);
        }

        //id de la fonction sous la plate forme de rédaction des scripts
        if ($function_id != null) {
            $q = $q->andWhere('f.function_id= ?', $function_id);
        }
        //référentiel de la fonction sous la plate forme de rédaction des scripts
        if ($function_ref != null) {
            $q = $q->andWhere('f.function_ref= ?', $function_ref);
        }
        //fonctions créées à une date donnée
        if ($created_at != null) {
            $q = $q->andWhere('f.created_at = ?', $created_at);
        }

        //fonctions par date de mise à jour
        if ($updated_at != null) {
            $q = $q->andWhere('f.updated_at= ?', $updated_at);
        }

        return $q->orderBy('f.position');
    }

    public function majPos($tab) {
        $i = 0;
        if (is_array($tab)) :
            return null;
        else :
            $new_tab = explode("|", $tab);
            foreach ($new_tab as $cle => $valeur) {
                //  if(($cle==0)||($cle % 2)==0 ) {
                $tab2 = explode(",", $new_tab[$cle]);
                $tab3['id_fonction'] = $tab2[0];
                $tab3['fonction_position'] = $tab2[1];
                $tab3['count'] = $tab2[2];
                $final_tab[] = $tab3;

                //}
            }
            foreach ($final_tab as $t) {
                Doctrine_Query::create()
                        ->update('EiFonction f')
                        ->set('f.position', '?', $t['count'])
                        ->where('f.id = ?', $t['id_fonction'])
                        ->execute();
            }

        endif;
    }

    public function generateRobotCode($tab, $kalfonction) {

        //Fonction de génération du code à jouer par le robot
        $b = myBrowserFactory::createFunctionalTestBrowserSelenium();
//
        $b->with('selenium')->begin()->setSpeed($tab['vitesse_jeu'])
                //block de fonction
                ->info('Open url')
                ->open($tab['url_depart'])
                ->info('Click a link')
                ->$kalfonction->nom_fonction
                ->isTextPresent('thecodecentral')->info("element retrouvé")
                //->isTextPresent('glob:wildcard test*')
                //->isElementPresent('some selector, check documentation')
                //->isElementPresent('//input[@id="myButton"]')
//        ->typeMany(array(
//        'name' => 'something',
//        'url' => 'something',
//))
                ->info("fin phase1");
        //$block='->'.$kalfonction->nom_fonction.'('.$kalfonction->.')';
        $b->info("debut phase 2");
        $b->getSelenium()->clickAndWait("link=Features");
        $b->info("clic sur le lien features");
        $b->getSelenium()->clickAndWait("link=Blog");
        $b->info("link=Blog");
        $b->getSelenium()->waitForPageToLoad(15000);
        $b->getSelenium()->captureEntirePageScreenshot("/home/capturesKalifast/test4.png", "");
        return null;
    }

    public function getXSLForFunction($id_fonction, $profile_id, $ref_profil, $ref_fonction, $ref_projet, $id_projet) {
        //reccupération du prefixe d'url suivant l'environnement
        $prefix = MyFunction::getPrefixPath();
        //Analyse du fichier xml recu
        // Aucun paramètre ne peut etr null, sinon on sort diretement de la fonction
        if ($id_fonction == null || $profile_id == null || $ref_projet == null || $id_projet == null || $prefix == null)
            return null;
//        $url=$prefix."projet/".$ref_projet."/".$id_projet."/fonctions/download/".$id_fonction."/".$ref_fonction."/".$profile_id."/".$ref_profil.".xml";
        $url = $prefix . "/eifonction/genererXSL/" . $id_fonction . "/" . $ref_fonction . "/" . $profile_id . "/" . $ref_profil . ".xml";


        $cobj = curl_init($url); // créer une nouvelle session cURL
        if ($cobj) { // Si la session est bien créée
            curl_setopt($cobj, CURLOPT_RETURNTRANSFER, 1); //définition des options
            $xml = curl_exec($cobj); //execution de la requete curl
            curl_close($cobj); //liberation des ressources
            //echo $xml;
            $dom = new DOMDocument();
            $dom->loadXML($xml);
            if ($dom->documentElement)
                $urlxsl = $dom->documentElement;
            //reccupération du document généré
            //$urlxsl=$test->saveXML();
            return $urlxsl->nodeValue;
            return null;
        }
    }

    public function getFonction($id_fonction) {
        $query = "  SELECT  fct.*, t.name as fctname, p.valeur as valeur, ep.name as paramname, ep.default_value as paramdefaultvalue,
                            ep.description as paramdescription,
                            p.id as id_eiparam, p.param_id, p.observation
                    FROM ei_fonction fct 
                    
                    LEFT JOIN ei_param p
                    ON p.id_fonction = fct.id
                    
                    LEFT JOIN ei_function_has_param ep
                    ON ep.param_id = p.param_id

                    LEFT JOIN ei_tree t
                    ON fct.function_ref=t.ref_obj  AND fct.function_id=t.obj_id

                    WHERE fct.id=" . $id_fonction;

        $fonction = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAll($query);
        $count = count($fonction);
        $i = 0;
        $params = new Doctrine_Collection('EiParam');
        if (count($fonction) <= 0)
            return null;

        $aux = new EiFonction();
        $aux->setId($fonction[0]['id']);
        $aux->setFunctionId($fonction[0]['function_id']);
        $aux->setFunctionRef($fonction[0]['function_ref']);
        $aux->setDescription($fonction[0]['description']);
        $aux->setProjectId($fonction[0]['project_id']);
        $aux->setProjectRef($fonction[0]['project_ref']);
        $aux->setName($fonction[0]['fctname']);


        while ($i < $count) {
            if ($fonction[0]['param_id'] != null) {
                $param = new EiParam();

                $param->setId($fonction[0]['id_eiparam']);
                $param->setIdFonction($fonction[0]['id']);
                $param->setParamId($fonction[0]['param_id']);
                $param->setValeur($fonction[$i]['valeur']);
                $param->setObservation($fonction[$i]['observation']);
                $param->setName($fonction[$i]['paramname']);
                $param->setDescription($fonction[$i]['paramdescription']);
                $param->setDefaultValue($fonction[$i]['paramdefaultvalue']);
                $params->add($param);
            }
            $i++;
        }

        $aux->setEiParams($params);

        return $aux;
    }

    public function getFullFonctions($ei_version_structure,   $defaultPackage=null)
    {
        /* On s'assure que tout marche bien même si le package par défaut n'est pas renseigné */
        if($defaultPackage==null):
            $defPackId=0;
            $defPackRef=0;
            $defInterventionId=0;
            else:
                $defPackId=$defaultPackage['package_id'];
                $defPackRef=$defaultPackage['package_ref'];
                $defInterventionId=$defaultPackage['subject_id'];
        endif;
        $query = "
        SELECT  fct.*, t.name as fctname,
                ep.param_id as ep_paramid, ep.param_type, ep.name as paramname, ep.default_value as paramdefaultvalue, ep.description as paramdescription,
                p.valeur, p.id as id_eiparam, p.param_id, p.observation,
                mapping.id as id_mapping, mapping.ei_param_function_id, mapping.ei_param_block_id as mapping_ei_param_block_id, mapping.expression as mapping_expression,
                mapping.ei_function_id as mapping_ei_function_id,
                sf.subject_id as sf_subject_id ,sf.function_id as sf_function_id,sf.function_ref as sf_function_ref,
                IF(sc.ticket_id IS NOT NULL and sc.ticket_ref IS NOT NULL,1,IF(sf.automate IS NOT NULL,0,NULL)) as  sf_automate,
                s.id as s_id,s.name as s_name  ,s.package_id as s_package_id   ,s.package_ref as s_package_ref 
        FROM ei_fonction fct

        INNER JOIN ei_version_structure ei_str
        ON ei_str.ei_fonction_id = fct.id

        LEFT JOIN ei_function_has_param ep
        ON fct.function_ref = ep.function_ref AND ep.function_id = fct.function_id

        LEFT JOIN ei_param p
        ON p.param_id = ep.param_id AND p.id_fonction = fct.id

        LEFT JOIN ei_param_block_function_mapping mapping
        ON mapping.ei_function_id = fct.id AND mapping.ei_param_function_id = ep.param_id

        LEFT JOIN ei_tree t
        ON fct.function_ref=t.ref_obj  AND fct.function_id=t.obj_id
        left join ei_script sc on sc.function_id=fct.function_id and sc.function_ref=fct.function_ref and sc.ticket_id=".$defPackId." and sc.ticket_ref=".$defPackRef." 
        left join ei_subject_functions sf on sf.function_id=fct.function_id and sf.function_ref=fct.function_ref  and sf.subject_id=".$defInterventionId." 
        left join ei_subject s on s.id=sf.subject_id and s.id=".$defInterventionId." and s.package_id=".$defPackId." and s.package_ref=".$defPackRef."
            
        WHERE ei_str.ei_version_structure_parent_id = " . $ei_version_structure->getId() . "
        ORDER BY ei_str.lft
        "; 
        
        $fonctions = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAll($query);

        $fctArray = array();
        $count = count($fonctions);
        $i = 0;
        $params = new Doctrine_Collection('EiParamBlockFunctionMapping');
        $mappings = new Doctrine_Collection('EiParamBlockFunctionMapping');
        $paramsRegistered = array();
        $mappingsRegistered = array();
        $subjectFonctions=array();
        while ($i < $count)
        {
            $j = $i;
            $fct = $fonctions[$i];

            while ($j < $count && $fct['id'] == $fonctions[$j]['id'])
            {
                if ($fonctions[$j]['id_eiparam'] != null && !in_array($fonctions[$j]['id_eiparam'], $paramsRegistered)) {
                    $param = new EiParam();
                    $paramsRegistered[] = $fonctions[$j]["id_eiparam"];

                    $param->setId($fonctions[$j]['id_eiparam']);
                    $param->setIdFonction($fonctions[$j]['id']);
                    $param->setParamId($fonctions[$j]['param_id']);
                    $param->setValeur($fonctions[$j]['valeur']);
                    $param->setObservation($fonctions[$j]['observation']);
                    $param->setName($fonctions[$j]['paramname']);
                    $param->setDescription($fonctions[$j]['paramdescription']);
                    $param->setDefaultValue($fonctions[$j]['paramdefaultvalue']);
                    $params->add($param);
                }
                
                if( $fonctions[$j]["id_mapping"] != null && !in_array($fonctions[$j]["id_mapping"], $mappingsRegistered) ){
                    $mapping = new EiParamBlockFunctionMapping();
                    $mappingsRegistered[] = $fonctions[$j]["id_mapping"];

                    $mapping->setId($fonctions[$j]["id_mapping"]);
                    $mapping->setEiParamFunctionId($fonctions[$j]["ei_param_function_id"]);
                    $mapping->setEiFunctionId($fonctions[$j]["mapping_ei_function_id"]);
                    $mapping->setExpression($fonctions[$j]["mapping_expression"]);

                    if( $fonctions[$j]["mapping_ei_param_block_id"] != null ){
                        $mapping->setEiParamBlockId($fonctions[$j]["mapping_ei_param_block_id"]);
                    }

                    $mappings->add($mapping);
                }
                if($fonctions[$j]["sf_automate"] != null  && !in_array($defInterventionId,$subjectFonctions)):
                    $subjectFonctions[]=array(
                        'sf_subject_id' => $defInterventionId,
                        'sf_function_id' => $fonctions[$j]["function_id"] ,
                        'sf_function_ref' => $fonctions[$j]["function_ref"] ,
                        'sf_automate' => $fonctions[$j]["sf_automate"] 
                    );
                endif;
                
                $j++;
            }

            $aux = new EiFonction();
            $aux->setId($fct['id']);
            $aux->setSubjectFunctions($subjectFonctions);
            $aux->setFunctionId($fct['function_id']);
            $aux->setFunctionRef($fct['function_ref']);
            $aux->setDescription($fct['description']);
            $aux->setProjectId($fct['project_id']);
            $aux->setProjectRef($fct['project_ref']);
            $aux->setName($fct['fctname']);
            $aux->setEiVersionStructureId($fct["ei_version_structure_id"]);
            $aux->setEiParams($params);
            $aux->setEiFunctionMapping($mappings);
            $params = new Doctrine_Collection('EiParam');
            $mappings = new Doctrine_Collection('EiParamBlockFunctionMapping');
            $paramsRegistered = array();
            $mappingsRegistered = array();
            $fctArray[] = $aux;
            $i = $j;
            $subjectFonctions=array();
        }

        return $fctArray;
    }

    /**
     * Incrémente de 1 tous les positions des fonctions de la version 
     * $ei_version_id sauf de la fonction $id_fct, pour lesquelles la position
     * est >= $positionInit.
     * 
     * @param type $ei_version_id
     * @param type $id_fct
     * @param type $positionInit
     */
    public function updatePositions($ei_version_id, $id_fct, $positionInit = 0, $incr = true) {
        if ($incr) {
            $operande = '+ 1';
        } else {
            $operande = '- 1';
        }
        Doctrine_Query::create()
                ->update('EiFonction')
                ->set('position', 'position ' . $operande)
                ->where('position >= ?', $positionInit)
                ->addWhere('id != ?', $id_fct)
                ->addWhere('ei_version_id = ?', $ei_version_id)
                ->execute();
    }

}
