<?php

/**
 * EiFunctionHasCommandeTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EiFunctionHasCommandeTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object EiFunctionHasCommandeTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('EiFunctionHasCommande');
    }

    public function getCmdsByScript($script_id, Doctrine_Connection $conn = null) {
        if ($script_id == null)
            return null;
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        return $conn->getTable('EiFunctionHasCommande')->createQuery('f')
                        ->where('f.script_id=' . $script_id)
                        ->orderBy('f.position')
                        ->execute();
    }

    //Rechargement des éléments de type EiFunctionHasCommande pour un projet 
    /* On n'utilise pas les collections pour éviter de saturer la mémoire */
    public function reload($projets, $project_id, $project_ref, Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();

        //Création de la collection d'objet EiFunctionHasCommande à ajouter
        $collection = new Doctrine_Collection("EiFunctionHasCommande");

        $items = $projets->getElementsByTagName("ei_function_has_commandes");
        if ($items->length > 0) {//ya t-il des éléments à traiter?
            $ei_function_has_commandes = $items->item(0)->getElementsByTagName("ei_function_has_commande");


            if ($ei_function_has_commandes != null) {
                $stmt = $conn->prepare("INSERT INTO ei_function_has_commande (id, function_ref, function_id, script_id, command_id, name, position,num_version,selenium_ref,command_target,command_value) "
                        . "VALUES (:id, :function_ref, :function_id, :script_id, :command_id, :name, :position,:num_version,:selenium_ref,:command_target,:command_value) "
                        . "ON DUPLICATE KEY UPDATE id=id,script_id=:script_id,function_id=:function_id,function_ref=:function_ref,command_id=:command_id,name=:name,position=:position,selenium_ref=:selenium_ref,command_target=:command_target,command_value=:command_value");

                foreach ($ei_function_has_commandes as $c) {
                    $id = $c->getAttribute("id");
                    //recherche du profil en base
                    if ($id != null) {
                        //$q = Doctrine_Core::getTable('EiFunctionHasCommande')->findOneById($id); 
                        $stmt->bindValue("id", $id);
                        $stmt->bindValue("function_ref", $c->getElementsByTagName("function_ref")->item(0)->nodeValue);
                        $stmt->bindValue("function_id", $c->getElementsByTagName("function_id")->item(0)->nodeValue);
                        $stmt->bindValue("script_id", $c->getElementsByTagName("script_id")->item(0)->nodeValue);
                        $stmt->bindValue("command_id", $c->getElementsByTagName("command_id")->item(0)->nodeValue);
                        $stmt->bindValue("name", $c->getElementsByTagName("name")->item(0)->nodeValue);
                        $stmt->bindValue("position", $c->getElementsByTagName("position")->item(0)->nodeValue);
                        $stmt->bindValue("num_version", $c->getElementsByTagName("num_version")->item(0)->nodeValue);
                        $stmt->bindValue("selenium_ref", $c->getElementsByTagName("selenium_ref")->item(0)->nodeValue);
                        $stmt->bindValue("command_target", $c->getElementsByTagName("command_target")->item(0)->nodeValue);
                        $stmt->bindValue("command_value", $c->getElementsByTagName("command_value")->item(0)->nodeValue);
                        $stmt->execute(array());
                    }
                }

                return 1;
            }
            return null;
        }
    }

    public function ReloadCommandesInTest($kalfonction, $scriptfunction, Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        if ($conn && $kalfonction && $scriptfunction) {
            //suppression des anciennes  commandes  de la fonction 
            $conn->delete($this->getInstance(), array(
                'function_ref' => $kalfonction->getFunctionRef(),
                'function_id' => $kalfonction->getFunctionId()
            ));
            //On recréè ensuite les commandes de la fonction de la fonction
            $query = "INSERT INTO ei_function_has_commande (function_ref, function_id, script_id ,num_version,  command_id,position, selenium_ref, name, command_target,command_value,delta, created_at, updated_at) 
        (SELECT  function_ref, function_id, script_id ,num_version, command_id,position, selenium_ref, name, command_target,command_value, delta,created_at, updated_at 
        FROM script_ei_function_has_commande c WHERE c.function_ref =" . $kalfonction->getFunctionRef() . " And c.function_id= " . $kalfonction->getFunctionId() . ") ";
            $conn->execute($query);
            return 1;
        }
        return null;
    }

    public function getCommandesFunction(KalFunction $function, EiProfil $profil, Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        if ($function == null || $profil == null)
            return null;

        $scripts_for_profiles = Doctrine_Core::getTable('EiScript')->getScriptsForProfile($function, $profil);

        //On vérifie qu'au plus un script est retrouvé car à un profil on associe au plus un script
        if (is_array($scripts_for_profiles) && count($scripts_for_profiles) > 1)
            return -2;

        if (is_array($scripts_for_profiles)) :
            //Creation du tableau des id de commandes  
            $cmdsTab = array();
            foreach ($scripts_for_profiles as $scripts_for_profile) {
                $cmdsTab[] = $scripts_for_profile['script_id'];
            }


            if (!count($cmdsTab) > 0)
                return null;
            return $this->getInstance()->createQuery('c')
                            ->whereIn('c.script_id', $cmdsTab)
                            ->orderBy('c.position')
                            ->execute();
        endif;
        return null;
    }

    //Suppression des commandes n'existant plus sur script
    public function deleteAssociatedCmd(KalFunction $kal_function, Doctrine_Connection $conn = null) {
        if ($kal_function == null)
            return null;
        Doctrine_Query::create()->delete()
                ->from('EiFunctionHasCommande c')
                ->where('c.function_ref=? And c.function_id=? ', array($kal_function->getFunctionRef(), $kal_function->getFunctionId()))
                ->execute();
    }
    
    public function insertJsonFunction($arraytab, Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        //Si l'id du noeud ou du projet n'est pas renseigné 
        if (!isset($arraytab['fc_id']) || !isset($arraytab['f_id']) || !isset($arraytab['f_ref']))
            return null;
        $stmt = $conn->prepare("INSERT INTO ei_function_has_commande (id, function_ref, function_id, script_id, command_id, name, position,num_version,selenium_ref,command_target,command_value,created_at,updated_at) "
                . "VALUES (:id, :function_ref, :function_id, :script_id, :command_id, :name, :position,:num_version,:selenium_ref,:command_target,:command_value,:created_at,:updated_at) "
                . "ON DUPLICATE KEY UPDATE id=id,script_id=:script_id,function_id=:function_id,function_ref=:function_ref,command_id=:command_id,name=:name,position=:position,selenium_ref=:selenium_ref,command_target=:command_target,command_value=:command_value,updated_at=:updated_at");


        $stmt->bindValue("id", $arraytab['fc_id']);
        $stmt->bindValue("function_id", $arraytab['f_id']);
        $stmt->bindValue("function_ref", $arraytab['f_ref']);
        $stmt->bindValue("script_id", $arraytab['s_id']);
        $stmt->bindValue("command_id", $arraytab['fc_cmd_id']);
        $stmt->bindValue("name", $arraytab['fc_name']);
        $stmt->bindValue("position", $arraytab['fc_pos']);
        $stmt->bindValue("num_version", $arraytab['fc_numv']);
        $stmt->bindValue("selenium_ref", $arraytab['fc_sel_ref']);
        $stmt->bindValue("command_target", $arraytab['fc_cmd_targ']);
        $stmt->bindValue("command_value", $arraytab['fc_cmd_val']);
        $stmt->bindValue("created_at", $arraytab['fc_creat']);
        $stmt->bindValue("updated_at", $arraytab['fc_updat']);
        $stmt->execute(array());

        return 1;
    }

}
