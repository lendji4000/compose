<?php

/**
 * EiTestSetDataSetTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EiTestSetDataSetTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object EiTestSetDataSetTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('EiTestSetDataSet');
    }

    /**
     * @param $testSetId
     * @return array
     */
    public function getLines($testSetId){

        // On récupère toutes les lignes du JDD.
        $sql = "SELECT dl.* FROM ei_test_set_data_set dl WHERE ei_test_set_id = " . $testSetId . " ORDER BY lft;";

        return Doctrine_Manager::connection()->execute($sql)->fetchAll();
    }

    /**
     * @param int $strId
     * @param int $parentLft
     * @param int $parentRgt
     *
     * @return int
     */
    public function getSameElementsCount($tsId = 1, $strId = 1, $parentLft = 1, $parentRgt = 2){

        /** @var Doctrine_Query $query */
        $query = self::getInstance()->createQuery('q')
            ->where('q.ei_test_set_id = ?', $tsId)
            ->andWhere('q.ei_data_set_structure_id = ?', $strId)
            ->andWhere('q.lft > ?', $parentLft)
            ->andWhere('q.rgt < ?', $parentRgt)
        ;

        return $query->count();
    }

    /**
     * @param int $tsId
     * @param int $strId
     * @return mixed
     */
    public function getRelatedDataFromUniqueDataSetStructure($tsId = 0, $strId = 0){
        /** @var Doctrine_Query $query */
        $query = self::getInstance()->createQuery('q')
            ->where('q.ei_test_set_id = ?', $tsId)
            ->andWhere('q.ei_data_set_structure_id = ?', $strId)
        ;

        return $query->fetchOne();
    }

    /**
     * Méthode permettant de récupérer l'élément du jeu de données associé relativement à un contexte donnée.
     *
     * @param $testSetId
     * @param $strId
     * @param $context
     * @param $indexRepetitionNode
     * @return mixed|null
     */
    public function getDataFromContext($testSetId, $strId, $context, $indexRepetitionNode){
        $sql = "SELECT id
FROM (
SELECT node.id as id, node.name, GROUP_CONCAT(parent.index_repetition SEPARATOR '-') as path
FROM ei_test_set_data_set AS node,
ei_test_set_data_set AS parent
WHERE node.lft BETWEEN parent.lft AND parent.rgt
AND node.ei_data_set_structure_id = ".$strId."
AND node.ei_test_set_id = ".$testSetId."
AND parent.ei_test_set_id = ".$testSetId."
AND node.index_repetition = ".$indexRepetitionNode."
GROUP BY node.id, node.name
ORDER BY parent.lft) hit
WHERE path = '".$context."';";

        $dataId = Doctrine_Manager::connection()->execute($sql)->fetch();
        $data = null;

        if( !is_bool($dataId) && isset($dataId["id"]) ){
            $data = $this->find($dataId["id"]);
        }

        return $data;
    }

    /**
     * @param $testSetId
     * @return bool
     */
    public function checkIfDataSetModified($testSetId)
    {
        $sql = "SELECT COUNT(*) as nb FROM " . $this->getTableName() . " WHERE ei_test_set_id = " . $testSetId . " AND is_modified IS TRUE";

        try{
            $resultat = Doctrine_Manager::connection()->execute($sql)->fetch();

            $nombre = $resultat["nb"];

            return $nombre > 0;
        }
        catch( \Exception $exc ){
            return false;
        }
    }

    /**
     * @param $testSetId
     * @return bool
     */
    public function updateTestSetBlockInParams($testSetId)
    {
        $sql1 = "
SELECT MAX(tsbpps.lft) as lft
FROM ei_test_set_block_param tsbpp, ei_test_set_block_param tsbpps
WHERE tsbpp.path = (SELECT xpath FROM ei_test_set_function WHERE ei_test_set_id = ".$testSetId." ORDER BY id DESC LIMIT 1 )
AND tsbpp.ei_test_set_id = ".$testSetId."
AND tsbpps.ei_test_set_id = ".$testSetId."
AND tsbpps.type = '".EiVersionStructure::$TYPE_BLOCK_PARAM."'
AND tsbpp.id = tsbpps.parent_id";

        try{
            $res = Doctrine_Manager::connection()->execute($sql1)->fetch();

            $sql2 = "
UPDATE ei_test_set_block_param tsbp, ei_test_set_data_set tsds, ei_data_set_structure dss, ei_block_data_set_mapping bdsm, ei_test_set_data_set tsds2, ei_test_set_block_param tsbp2
SET tsbp.value = tsds.value
WHERE tsds.ei_test_set_id = ".$testSetId."
AND tsbp.ei_test_set_id = ".$testSetId."
AND tsds2.ei_test_set_id = ".$testSetId."
AND tsbp2.ei_test_set_id = ".$testSetId."
AND tsds2.id = tsds.parent_id
AND tsbp2.id = tsbp.parent_id
AND tsds.is_modified IS TRUE
AND bdsm.type = '".EiBlockDataSetMapping::$TYPE_IN."'
AND tsbp.lft > ".$res["lft"]."
AND tsds.ei_data_set_structure_id = dss.id
AND bdsm.ei_dataset_structure_id = dss.id
AND tsbp.ei_version_structure_id = bdsm.ei_version_structure_id
AND (
tsbp.index_repetition = tsds.parent_index_repetition
OR
(
tsds.parent_index_repetition = tsds.index_repetition
AND
(
SELECT COUNT(*) = 0
FROM ei_block_data_set_mapping bdsm2
WHERE type = '".EiBlockDataSetMapping::$TYPE_IN."'
AND bdsm2.ei_version_structure_id = tsbp2.ei_version_structure_id
AND bdsm2.ei_dataset_structure_id = tsds2.ei_data_set_structure_id
))
);

UPDATE ei_test_set_data_set SET is_modified = FALSE WHERE ei_test_set_id = ".$testSetId.";";

            Doctrine_Manager::connection()->execute($sql2);

            return true;
        }
        catch( \Exception $exc ){
            return false;
        }
    }

    /**
     * @param $testSetId
     * @param $dataSetId
     * @param Doctrine_Connection $conn
     * @throws Exception
     */
    public function copyDataLinesFromDataSet($testSetId, $dataSetId, Doctrine_Connection $conn = null)
    {
        if( $conn == null ) $conn = Doctrine_Manager::connection();

        $sql = "
        INSERT INTO ei_test_set_data_set (ei_test_set_id,ei_data_set_structure_id,parent_index_repetition,index_repetition,type,name,slug,value,is_modified,root_id,lft,rgt,level,created_at,updated_at)
        SELECT ".$testSetId." as ei_test_set_id, dl.ei_data_set_structure_id, 1 as parent_index_repetition, 1 AS index_repetition, dss.type, dss.name, dss.slug, dl.valeur, 0 as is_modified, 0 as root_id, dl.lft, dl.rgt, dl.level, NOW() as created_at, NOW() as updated_at
        FROM ei_data_line dl, ei_data_set_structure dss
        WHERE ei_data_set_id = ".$dataSetId."
        AND dss.id = dl.ei_data_set_structure_id
        ORDER BY dl.lft;
        ";

        // Requête permettant de récupérer la racine du JDD de travail du JDT.
        $sql2 = "SELECT id FROM ei_test_set_data_set WHERE level = 0 AND ei_test_set_id = ".$testSetId;
        // Requête de mise à jour du root_id.
        $sql3 = "UPDATE ei_test_set_data_set set root_id = :id WHERE ei_test_set_id = ".$testSetId;

        try{
            // Copie.
            $conn->execute($sql);

            // Récupération ROOT_ID
            $root_id = $conn->execute($sql2)->fetch();

            // Mise à jour ROOT_ID
            $conn->execute( str_replace(":id", $root_id["id"], $sql3) );
        }
        catch(Exception $exc){
            throw $exc;
        }
    }

    /**
     * @param $dataLines
     * @param $testSetId
     * @param Doctrine_Connection $conn
     * @return int
     */
    public function insertDataLinesFromTab($dataLines, $testSetId, Doctrine_Connection $conn = null)
    {
        if($conn==null) $conn = Doctrine_Manager::connection();

        $stmt = $conn->prepare('INSERT INTO ei_test_set_data_set (ei_test_set_id, ei_data_set_structure_id, parent_index_repetition, '.
            'index_repetition, type, name, slug, value, lft, rgt, level, created_at,updated_at) VALUES (:test_set_id,:structure_id, '.
            ':parent_index_repetition,:index_repetition,:type,:name,:slug,:value,:lft,:rgt,:level,NOW(),NOW())');

        foreach( $dataLines as $dataLine ){
            $stmt->bindValue('test_set_id', $testSetId);
            $stmt->bindValue('structure_id', $dataLine['structure_id']);
            $stmt->bindValue('parent_index_repetition', $dataLine['parent_index_repetition']);
            $stmt->bindValue('index_repetition', $dataLine['index_repetition']);
            $stmt->bindValue('type', $dataLine['type']);
            $stmt->bindValue('name', $dataLine['name']);
            $stmt->bindValue('slug', $dataLine['slug']);
            $stmt->bindValue('value', $dataLine['value']);
            $stmt->bindValue('lft', $dataLine['lft']);
            $stmt->bindValue('rgt', $dataLine['rgt']);
            $stmt->bindValue('level', $dataLine['level']);

            $stmt->execute(array());
        }

        return 1;
    }

    /**
     * @param $dataLines
     * @param $testSetId
     * @param Doctrine_Connection $conn
     * @return int
     */
    public function updateLinesIndexesFromTab($dataLines, $testSetId, Doctrine_Connection $conn = null)
    {
        if($conn==null) $conn = Doctrine_Manager::connection();

        $stmt = $conn->prepare('UPDATE ei_test_set_data_set SET parent_index_repetition = :parent_index_repetition, ' .
            'index_repetition = :index_repetition WHERE id=:id AND ei_test_set_id = :test_set_id');

        foreach( $dataLines as $dataLine ){
            $stmt->bindValue('id', $dataLine["id"]);
            $stmt->bindValue('parent_index_repetition', $dataLine['parent_index_repetition']);
            $stmt->bindValue('index_repetition', $dataLine['index_repetition']);
            $stmt->bindValue('test_set_id', $testSetId);

            $stmt->execute(array());
        }

        return 1;
    }
}