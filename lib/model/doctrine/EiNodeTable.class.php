<?php

/**
 * EiNodeTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EiNodeTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object EiNodeTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('EiNode');
    }

    public function getRootFolder($project_ref, $project_id) {
        if (!$project_id || !$project_ref)
            return null;
        return $this->getInstance()->findOneByProjectIdAndProjectRefAndTypeAndIsRoot(
                        $project_id, $project_ref, 'EiFolder', true);
    }

    /**
     * @param EiNode $parent
     * @param array $types
     * @return array
     */
    public function getStructureDataSets(EiNode $parent = null, $types = array()){
        /** @var EiNode[] $structure */
        $structure = array();
        $types = is_array($types) && count($types) > 0 ? $types:array(EiNode::$TYPE_DATASET_FOLDER, EiNode::$TYPE_DATASET_TEMPLATE);
        $parent = $parent !== null ? $parent:$this;

        $query = Doctrine_Core::getTable('EiNode')->createQuery('n')->where('n.root_id=?',$parent->getId());
        // TODO: Adaptation aux templates de JDD.
        $query = $query->andWhereIn('n.type', $types);

        $oChilds = $query->orderBy('n.position ASC')->execute();

        /** @var EiNode $oChild */
        foreach( $oChilds as $oChild ){
            if( $oChild->getType() === EiNode::$TYPE_DATASET_FOLDER ){
                $structure[] = $this->getStructureDataSets($oChild, $types);
            }
            else{
                $base = array();

                if( $oChild->getType() === EiNode::$TYPE_DATASET_TEMPLATE ){
                    /** @var EiDataSetTemplate $template */
                    $template = Doctrine_Core::getTable("EiDataSetTemplate")->find($oChild->getObjId());

                    if( $template != null && $template->getId() != "" ){
                        $base["data_set_id"] = $template->getEiDataSetRefId();
                        $base["data_set_name"] = $template->getEiDataSet()->getName();
                        $base["data_set_desc"] = $template->getEiDataSet()->getDescription();
                    }
                }

                $structure[] = array(
                    "root" => array_merge($base, $oChild->asArray())
                );
            }
        }

        return array(
            "root" => $parent->asArray(),
            "childs" => $structure
        );

    }

    /**
     * @param EiNode $parent
     * @return EiNode[]
     */
    public function getStructureDataSetFolders(EiNode $parent = null){
        return $this->getStructureDataSets($parent, array(EiNode::$TYPE_DATASET_FOLDER));
    }

    //Mise à jour des positions dans l'arbre des dossiers
    public function updatePosition($tab) {
        if (!is_array($tab))
            return null;
        $conn = Doctrine_Manager::connection();

        try {
            $conn->beginTransaction();
            foreach ($tab as $id_plus_position) {
                $ids = explode('_', $id_plus_position);
                if (is_array($ids)) {
                    //Mise à jour de la position
                    $conn->update($this->getInstance(), array('position' => $ids[1]), array('id' => $ids[0]));
                }
            }
            $conn->commit(); //  validation globale  de la création
        } catch (Exception $e) {
            $conn->rollback();
            throw new Exception('An error occurred while trying to update nodes positions ');
        }
    }

    //Récupération de la dernière position dans le noeud
    function getLastPositionInNode($project_id, $project_ref, $root_id) {
        if (!$project_id || !$project_ref)
            return 0;

        $node = $this->getInstance()->createQuery('n')
                ->select('n.id , Max(n.position) as max_position')
                ->where('n.project_id=? And n.project_ref=? And n.root_id=?', array($project_id, $project_ref, $root_id))
                ->execute();

        if ($node->getFirst()) {
            return $node->getFirst()->getMaxPosition() + 1;
        }
        return 0;
    }

    /**
     * Retourne tous les noeuds enfants de $einode trié
     * par position.
     * @param type $einode
     * @return type
     */
    public function getNodesOrderByPosition($einode) {
        return Doctrine_Query::create()
                        ->from('EiNode n')
                        ->where('n.root_id = ?', $einode->getId())
                        ->orderBy('position');
    }

    /**
     * Reposition l'élément $nodeId et le replace à la position $newPosition
     * @param type $nodeId
     * @param type $newPosition
     */
    public function ReoderElts($node, $newPosition) {
        //aucun traitement a faire si la position est identique.
        if ($newPosition != $node->getPosition()) {
            //si on déplacement plus bas dans le parent.
            if ($newPosition < $node->getPosition()) {
                $max = $node->getPosition();
                $min = $newPosition;
                $operande = '+1';
            } else { 
                $min = $node->getPosition()+1;
                $max = $newPosition;
                $operande = '-1';
            }

            Doctrine_Query::create()
                    ->update('EiNode')
                    ->set('position', "position $operande")
                    ->where('position >= ?', $min)
                    ->addWhere('position <= ?', $max)
                    ->addWhere('id != ?', $node->getId())
                    ->addWhere('root_id = ?', $node->getRootId())
                    ->execute();
            $node->setPosition($newPosition)->save();
        }
    }
    /*
SET @rank=0;
update 
ei_node n 
,(
SELECT   id,@rank := @rank+1 AS rownum 
FROM     ei_node  
where  root_id=1 and (type='EiScenario' or type='EiFolder') 
ORDER BY  position asc) src
set n.position=src.rownum
where  n.root_id=1 and n.id=src.id and (n.type='EiScenario' or n.type='EiFolder') 
     *     */

    public function ChangeNodeParent($current_node_id, $new_parent_id) {
        $conn = Doctrine_Manager::connection();
        try {
            $conn->beginTransaction();
            if ($current_node_id == null || $new_parent_id == null)
                return null;
            /*
             * On vérifie que le parent séléctionné n'est pas le noeud courant 
             */
            if ($current_node_id == $new_parent_id)
                return -9;
            //Recherche du parent du nouveau parent et du noeud courant
            $current_node = $conn->getTable('EiNode')->findOneById($current_node_id);
            $new_parent = $conn->getTable('EiNode')->findOneById($new_parent_id);
            //On vérifie que les deux objets existent
            if ($new_parent == null || $current_node == null) return null;
            /*
             * On vérifie que le noeud parent choisit n'est pas un fils du noeud courant
             */
            if($new_parent->getRootId()==$current_node->getId()) return -8;
            /*
             * On vérifie que le noeud choisit n'est pas un déscendant du noeud courant
             * Pour célà, on recherche les ascendants du noeud choisit, puis on vérifie qu'aucun 
             * ne corresponde au noeud courant
             */
            if($this->isAncestorOf($new_parent,$current_node)) return -7; 
            
            $ei_project = $new_parent->getProject();
            
            //On verifie que le noeud n'est pas racine du projet
            if ($current_node->getIsRoot())
                return -10;

            //On oublie pas de changer la position du noeud chez son nouveau parent
            $conn->update($this->getInstance(), array('root_id' => $new_parent->getId(),
                'position' => $this->getInstance()->getLastPositionInNode($ei_project->getProjectId(), $ei_project->getRefId(), $new_parent->getId())), array('id' => $current_node->getId()));

            //$conn->update($this->getInstance(), array('root_id'=> $new_parent->getId()), array('id' => $current_node->getId())); 
            $conn->commit(); //  validation globale  de la création
        } catch (Exception $e) {
            $conn->rollback();
            throw $e;
        }
        return $ei_project;
    }
    
    /*
     * On vérifie qu'un noeud  n'est pas un déscendant d'un autre noeud
     * Pour célà, on recherche les ascendants du noeud choisit, puis on vérifie qu'aucun 
     * ne corresponde au noeud courant
     */

    public function isAncestorOf(EiNode $new_parent, EiNode $current_node) {
        
        while ($new_parent->getRootId()!=null):
            if($new_parent->getRootId()==$current_node->getId()) return true;
            $new_parent=$new_parent->getParent();
        endwhile;
        
        return false;
    }


}