<?php

/**
 * EiScenarioPackage
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    kalifastRobot
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class EiScenarioPackage extends BaseEiScenarioPackage
{
    /* Sauvegarde d'une relation Scenario-package */
public function save(Doctrine_Connection $conn = null) {
        
        if ($conn == null)
            $conn = Doctrine_Manager::connection();

        $conn->beginTransaction();

        if ($this->isNew()) { 
            try {
                if($this->getEiVersionId()==null)   
                        throw new Exception('Version is not set for Scenario-package relation');
                $stmt = $conn->prepare("INSERT INTO ei_scenario_package (ei_scenario_id, package_id, package_ref,ei_version_id,created_at,updated_at) "
                            ."VALUES (:ei_scenario_id, :package_id, :package_ref,:ei_version_id,:created_at,:updated_at) "
                            ."ON DUPLICATE KEY UPDATE ei_version_id=".$this->getEiVersionId());  
                    $stmt->bindValue("ei_scenario_id", $this->getEiScenarioId());
                    $stmt->bindValue("package_id", $this->getPackageId());
                    $stmt->bindValue("package_ref",$this->getPackageRef());
                    $stmt->bindValue("ei_version_id", $this->getEiVersionId());
                    $stmt->bindValue("created_at", ($this->getCreatedAt()!=null?$this->getCreatedAt():date('Y-m-d H:i:s')));
                    $stmt->bindValue("updated_at", ($this->getUpdatedAt()!=null?$this->getUpdatedAt():date('Y-m-d H:i:s'))); 
                    $stmt->execute(array());
                    $ret=$this;
                $conn->commit();
            } catch (Exception $e) {
                $conn->rollback();
                throw $e;
            }
        } else {
            try {
                $ret = parent::save($conn); 
                $conn->commit();
            } catch (Exception $e) {
                $conn->rollback();
                throw $e;
            }
        }
        return $ret;
    }
}