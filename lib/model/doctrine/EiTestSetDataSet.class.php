<?php

/**
 * EiTestSetDataSet
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    kalifastRobot
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class EiTestSetDataSet extends BaseEiTestSetDataSet
{
    /**
     * @return string
     */
    public function getContext()
    {
        /** @var Doctrine_Node_NestedSet $node */
        $node = $this->getNode();

        // Définition du contexte initial.
        $contexte = "";

        /** @var Doctrine_Node_NestedSet[] $ancetres */
        $ancetres = $node->getAncestors();

        if( $ancetres !== false )
        {
            $contexteA = array();

            /** @var EiTestSetDataSet $ancetre */
            foreach( $ancetres as $ancetre ){
                if( $ancetre->getEiDataSetStructure()->isNode() && $node->isDescendantOf($ancetre) && $ancetre->getLevel() != 0 ){
                    $contexteA[] = $ancetre->getIndexRepetition();
                }
            }

            $contexte = implode("-", $contexteA);
        }

        return $contexte;
    }

    /**********          GENERATION XML
    /******************************************************************************************************************/

    /**
     * @param DOMDocument $documentXml
     * @param DOMDocument $parent
     */
    public function generateXML($documentXml, $parent)
    {
        if( $this->getType() == EiDataSetStructure::$TYPE_NODE )
        {
            $element = $documentXml->createElement($this->getEiDataSetStructure()->getXMLTag());
            /** @var Doctrine_Node_NestedSet $node */
            $node = $this->getNode();
            /** @var EiTestSetDataSet[] $descendants */
            $descendants = $node->getDescendants(1);

            if( $descendants !== false )
            {
                /** @var EiTestSetDataSet $leaf */
                foreach( $descendants as $leaf)
                {
                    if( $leaf->getType() == EiDataSetStructure::$TYPE_LEAF )
                        $leaf->generateXML($documentXml, $element);
                }
            }

            $parent->appendChild($element);

            if( $descendants !== false )
            {
                // On parcours les fils.
                /** @var EiNodeDataSet $child */
                foreach($node->getDescendants(1) as $child){
                    if( $child->getType() == EiDataSetStructure::$TYPE_NODE ){
                        // On génère l'élément XSD relatif au noeud fils.
                        $child->generateXML($documentXml, $element);
                    }
                }
            }
        }
        else
        {
            $element = $documentXml->createElement($this->getEiDataSetStructure()->getXMLTag(), htmlspecialchars($this->getValue()));
            $parent->appendChild($element);
        }
    }
}