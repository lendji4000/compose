<?php

/**
 * EiVersion
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    kalifast
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class EiVersion extends BaseEiVersion {

    /**
     * Propriété définissant les blocks à copier/créer.
     *
     * @var type
     */
    private $ei_scenario_str = false;

    /**
     * @var bool
     */
    private $old_version_id = false;

    public function setEiScenarioBlocks($ei_scenario_str) {
        $this->ei_scenario_str = $ei_scenario_str;
    }

    public function setOldVersionId($version_id){
        $this->old_version_id = $version_id;
    }

    public function __toString() {
        return sprintf('%s', $this->getLibelle());
    }

    /**
     * Retourne -1 si la version est associée à des profils, rien sinon.
     * @param \Doctrine_Connection $conn
     * @return -1 | null
     */
    public function delete(\Doctrine_Connection $conn = null) {
        if ($this->getEiProfilScenarios()->count() != 0)
            return -1;

        parent::delete($conn);
    }

    public function save(\Doctrine_Connection $conn = null) {

        if ($conn == null) {
            $conn = Doctrine_Manager::connection();
        }

        try {
            $isNew = $this->isNew();
            $conn->beginTransaction();
            parent::save($conn);

            if ($isNew && $this->ei_scenario_str) {
                //création des blocks de la version_structure relativement à
                // la liste correspondant au scenario structure.

                //ei_version_structure utilisé à la précédente itération de boucle.
                $ei_version_str_prec = null;

                if ($conn == null) {
                    $conn = Doctrine_Manager::connection();
                }

                $this->createStructureCopy($this, $conn, $this->getEiScenarioId(), EiVersionStructure::getStructureTypes());

                // Déclaration de la table EiVersionStructure.
                /** @var EiVersionStructureTable $tableVersionStr */
                $tableVersionStr = Doctrine_Core::getTable('EiVersionStructure');

                //***********************************//
                //***   MISE A JOUR DES LFT/RGT   ***//
                //***********************************//

                // On récupère l'arbre de la structure de la copie.
                /** @var Doctrine_Tree_NestedSet $versionStructure */
                $versionStructure = $tableVersionStr->getEiVersionTree($this->getId());

                if( $versionStructure->count() > 0 ){

                    $compteur = 1;
                    $index = 0;
                    $listeElts = array();

                    $this->evaluateStructure($listeElts, $compteur, $index, $versionStructure, $versionStructure->getFirst());

                    $tableVersionStr->updateVersionStructureFromTab($listeElts, $this->getId(), $conn);
                }
            }

            $conn->commit();
        } catch (Exception $e) {
            $conn->rollback();;
            throw $e;
        }
    }

    /**
     * @param $listeElts
     * @param $compteur
     * @param $index
     * @param $structure
     * @param EiVersionStructure $elt
     * @param string $parentId
     */
    public function evaluateStructure(&$listeElts, &$compteur, &$index, $structure, $elt){
        $listeElts[$index] = array(
            "id" => "",
            "lft" => $compteur++,
            "rgt" => 0
        );

        $myIndex = $index;

        $listeElts[$myIndex]["id"] = $elt->getId();
        $children = $elt->getNode()->getChildren();

        if( $children && $children->count() > 0 ){
            /** @var EiVersionStructure $child */
            foreach( $children as $child ){
                if( $child->isEiBlock() || $child->isEiBlockParam() ){
//                    var_dump("ok");
                    $this->evaluateStructure($listeElts, $compteur, ++$index, $structure, $child);
                }
            }
        }

        $listeElts[$myIndex]["rgt"] = $compteur++;
    }

    //Affichage des fonctions et sous versions d'une version
    public function printVersion() {
        $objects = $this->getOrderedContent();
        if (count($objects) > 0):
            foreach ($objects as $object):
                if ($object instanceof EiFonction):
                    echo $object . '<br/>';
                else:
                    $object->printVersion();
                endif;
            endforeach;
        endif;
    }

    public function reloadFromScript($login = null, $pwd = null, $loginUser = null) {
        foreach ($this->getEiSousVersions() as $sv => $sousversion)
            $sousversion->reloadFromScript($login, $pwd, $loginUser);

        foreach ($this->getEiFonctions() as $f => $fonction)
            $fonction->reloadFromScript($login, $pwd, $loginUser);
    }

    /**
     * Méthode permettant de créer une copie de la version.
     *
     * @param $new_name
     * @param Doctrine_Connection $conn
     * @param null $ei_scenario_id
     * @return EiVersion|null
     * @throws Exception
     */
    public function createCopie($new_name, Doctrine_Connection $conn = null, $ei_scenario_id = null)
    {
        // Déclaration de la variable représentant l'instance de la version.
        /** @var EiVersion $copie */
        $copie = null;
        /** @var sfLogger $logger */
        $logger = sfContext::getInstance()->getLogger();

        try {
            if ($conn == null) {
                $conn = Doctrine_Manager::connection();
            }

            //Debut de la transaction
            $conn->beginTransaction();

            //********************************************************//
            //**********          CREATION VERSION          **********//
            //********************************************************//

            $logger->info("----------------------------------------------");
            $logger->info("----------     CREATION VERSION     ----------");
            $logger->info("----------------------------------------------");

            // Instanciation de la version
            $copie = new EiVersion();
            // Affectation de son libellé.
            $copie->setLibelle($new_name);

            // On stocke l'identifiant du scénario.
            if ($ei_scenario_id)
                $copie->setEiScenarioId($ei_scenario_id);
            else
                $copie->setEiScenarioId($this->getEiScenarioId());

            // La description
            $copie->setDescription($this->getDescription());

            $this->createStructureCopy($copie, $conn, $ei_scenario_id);

            // Fin de la transaction. Tout s'est bien déroulé, on enregistre.
            $conn->commit();
        }
        catch (Exception $e)
        {
            // En cas d'erreur, on annule l'ensemble de la transaction.
            $conn->rollback();
            throw $e;
        }

        return $copie;
    }

    /**
     * @param EiVersion $copie
     * @param Doctrine_Connection $conn
     * @param null $ei_scenario_id
     * @param array $allowedTypes
     * @return EiVersion
     * @throws Exception
     */
    public function createStructureCopy(EiVersion $copie, Doctrine_Connection $conn = null, $ei_scenario_id = null, array $allowedTypes = array())
    {
        /** @var sfLogger $logger */
        $logger = sfContext::getInstance()->getLogger();

        // Déclaration de la table EiVersionStructure.
        /** @var EiVersionStructureTable $tableVersionStr */
        $tableVersionStr = Doctrine_Core::getTable('EiVersionStructure');

        // Tableau des correspondances.
        $correspondances = array();
        $correspondancesF = array();

        $version_id = $this->old_version_id == false ? $this->getId():$this->old_version_id;

        $allowedTypes = count($allowedTypes) == 0 ? EiVersionStructure::getAllTypes():$allowedTypes;
        $ignored = 0;

        //*******************************************************//
        //**********          COPIE STRUCTURE          **********//
        //*******************************************************//

        $logger->info("--------------------------------------------");
        $logger->info("----------     COPIE SCENARIO     ----------");
        $logger->info("--------------------------------------------");

        // Création d'une collection de structure de version.
        /** @var Doctrine_Collection $nouvelleStructure */
        $nouvelleStructure = new Doctrine_Collection('EiVersionStructure');

        // Variable temporaire contenant le noeud père.
        /** @var EiVersionStructure $ei_version_str_prec */
        $ei_version_str_prec = null;
        // Variable temporaire contenant le niveau où l'on se situait dans l'arbre à la boucle précédente.
        $level_prec = 0;
        // Variables temporaires.
        /** @var EiVersionStructure $parent */
        $root_id = $parent = null;

        // On récupère la structure complète de la version actuelle.
        $currentVersionTree = $tableVersionStr->getEiVersionTree($version_id, $allowedTypes);

        // On parcourt chaque élément.
        /** @var EiVersionStructure $ei_version_str */
        foreach ($currentVersionTree as $i => $ei_version_str)
        {
            $logger->info("----------     PARCOURS ELT STRUCTURE N° ".$ei_version_str->getId()."     ----------");

            if( in_array($ei_version_str->getType(), $allowedTypes) ){
                //*************************************************************//
                //**********          DETERMINATION DU PERE          **********//
                //*************************************************************//

                // Si le niveau précédent est inférieur au niveau parcouru, alors, le parent est la dernière version structure.
                if ($ei_version_str->getLevel() > $level_prec) {
                    $parent = $ei_version_str_prec;
                }
                // Et inversement, si le niveau de l'élément parcouru est inférieur au précédent, il va falloir remonter pour retrouver le père.
                elseif ($ei_version_str->getLevel() < $level_prec)
                {
                    // On réalise la différence entre les deux niveau.
                    $j = $level_prec - $ei_version_str->getLevel();

                    // On remonte d'autant de fois afin de récupérer le père.
                    while ($j > 0) {
                        $parent = $parent->getNode()->getParent();
                        $j--;
                    }
                }

                //*******************************************************************************//
                //**********          ENREGISTREMENT DES INFORMATIONS DE BASE          **********//
                //*******************************************************************************//

                $strElementCopie = new EiVersionStructure();
                $strElementCopie->setRootId($root_id);
                $strElementCopie->setLft($ei_version_str->getLft());
                $strElementCopie->setRgt($ei_version_str->getRgt());
                $strElementCopie->setLevel($ei_version_str->getLevel());
                $strElementCopie->setName($ei_version_str->getName());
                $strElementCopie->setDescription($ei_version_str->getDescription());
                $strElementCopie->setSlug($ei_version_str->getSlug());
                $strElementCopie->setEiVersion($copie);
                $strElementCopie->setType($ei_version_str->getType());

                // Si l'élément possède un père, on le précise.
                if ($parent){
                    $strElementCopie->setEiVersionStructureParentId($parent->getId());
                }

                // On sauvegarde l'élément.
                $strElementCopie->save($conn);

                // Mise à jour du tableau des correspondances.
                $correspondances[$ei_version_str->getId()] = $strElementCopie->getId();

                //**********************************************************//
                //**********          CREATION FONCTION          ***********//
                //**********************************************************//

                // S'il s'agit d'une fonction, on crée la copie.
                if ($ei_version_str->isEiFonction())
                {
                    $logger->info("----------     CREATION FONCTION     ----------");
                    $fct = $ei_version_str->getEiFonction()->createCopie($strElementCopie, $conn);

                    $strElementCopie->setEiFonctionId($fct->getId());

                    $correspondancesF[$ei_version_str->getEiFonctionId()] = $fct->getId();
                }
                // S'il s'agit d'un block, on met à jour la variable contenant l'élément de structure précédent.
                elseif ($ei_version_str->isEiBlock()) {
                    $logger->info("----------     CREATION BLOCK     ----------");
                    $ei_version_str_prec = $strElementCopie;
                }

                $level_prec = $ei_version_str->getLevel();

                if ($i == 0) {
                    $root_id = $strElementCopie->getId();

                    $strElementCopie->setRootId($root_id);
                    $strElementCopie->save($conn);
                }

                $nouvelleStructure->add($strElementCopie);

            }
        }

        foreach( $currentVersionTree as $i => $ei_version_str )
        {
            //**********************************************************//
            //**********          CAS BLOCK FOREACH           **********//
            //**********************************************************//

            if( $ei_version_str->getType() == EiVersionStructure::$TYPE_FOREACH )
            {
                $logger->info("----------     CREATION FOREACH     ----------");
                /** @var EiMappingStructureSyncIn $oldMapping */
                $oldMapping = $ei_version_str->getEiVersionStructureDataSetMapping()->getFirst();


                $mapping = new EiMappingStructureSyncIn();
                $mapping->setEiDatasetStructureId( $oldMapping->getEiDatasetStructureId() );
                $mapping->setEiVersionStructureId( $correspondances[$ei_version_str->getId()] );

                $mapping->save($conn);
            }

            //*********************************************************//
            //**********          CAS BLOCK PARAMS           **********//
            //*********************************************************//

            elseif( $ei_version_str->isEiBlockParam() )
            {
                $logger->info("----------     CREATION BLOCK PARAM     ----------");
                // Copie des mappings IN et OUT.
                /** @var EiBlockDataSetMapping $oldMappingIn */
                $oldMappingIn = $ei_version_str->getMappingDataSet(EiBlockDataSetMapping::$TYPE_IN);
                /** @var EiBlockDataSetMapping $oldMappingOut */
                $oldMappingOut = $ei_version_str->getMappingDataSet(EiBlockDataSetMapping::$TYPE_OUT);

                if( $oldMappingIn != null ){
                    $logger->info("----------     MAPPING IN :  ".$oldMappingIn->getEiDatasetStructureId()." / ".$correspondances[$ei_version_str->getId()]."    ----------");
                    $newMappingIn = new EiMappingStructureSyncIn();
                    $newMappingIn->setEiDatasetStructureId($oldMappingIn->getEiDatasetStructureId());
                    $newMappingIn->setEiVersionStructureId($correspondances[$ei_version_str->getId()]);

                    $newMappingIn->save($conn);
                }

                if( $oldMappingOut != null ){
                    $logger->info("----------     MAPPING OUT :  ".$oldMappingOut->getEiDatasetStructureId()." / ".$correspondances[$ei_version_str->getId()]."    ----------");
                    $newMappingOut = new EiMappingStructureSyncOut();
                    $newMappingOut->setEiDatasetStructureId($oldMappingOut->getEiDatasetStructureId());
                    $newMappingOut->setEiVersionStructureId($correspondances[$ei_version_str->getId()]);

                    $newMappingOut->save($conn);
                }
            }

            //*************************************************************//
            //**********          CAS PARAMS FONCTIONS           **********//
            //*************************************************************//

            elseif ($ei_version_str->isEiFonction() && in_array($ei_version_str->getType(), $allowedTypes))
            {
                $logger->info("----------     CREATION PARAM FONCTION     ----------");
                // Récupération de l'ensemble des paramètres OUT.
                /** @var EiParamBlockFunctionMapping[] $outParams */
                $outParams = $ei_version_str->getEiFonction()->getEiFunctionMapping();

                $logger->info("----------     ".count($outParams)." PARAMS.");

                // Copie de chaque paramètre de mapping OUT.

                /** @var EiParamBlockFunctionMapping $oldMapping */
                foreach( $outParams as $oldMapping ){
                    if( $oldMapping->getEiFunctionId() != "" && $oldMapping->getEiParamFunctionId() != "" )
                    {
                        /** @var EiParamBlockFunctionMapping $mapping */
                        $mapping = new EiParamBlockFunctionMapping();
                        $mapping->setEiParamBlockId($oldMapping->getEiParamBlockId() == "" ? null:$correspondances[$oldMapping->getEiParamBlockId()]);
                        $mapping->setEiFunctionId($correspondancesF[$oldMapping->getEiFunctionId()]);
                        $mapping->setEiParamFunctionId($oldMapping->getEiParamFunctionId());

                        $mapping->save($conn);
                    }
                }
            }
            elseif( !in_array($ei_version_str->getType(), $allowedTypes) ){
                $ignored++;
            }
        }

        // On affecte à la copie la structure complète.
        $copie->setEiVersionStructures($nouvelleStructure);

        // Sauvegarde de la copie de version.
        $copie->save($conn);

        //*****************************************************//
        //**********          VERIFICATIONS          **********//
        //*****************************************************//

        // On récupère l'arbre de la structure de la copie.
        $arbreNouvelleVersion = $tableVersionStr->getEiVersionTree($copie->getId());
        
        // On vérifie que le nombre d'éléments est le même de chaque côté sinon on lève une exception.
        if( count($currentVersionTree) != count($arbreNouvelleVersion) + $ignored)   throw new Exception('Version copie failed');

        return $copie;
    }

    /**
     * TODO: Factoriser avec EiTestSetBlockStack
     *
     * @return string
     * @throws Exception
     */
    public function generateXSLForTestSet() {
        $xsl = new DOMDocument("1.0", "utf-8");
        $xsl->formatOutput = true;
        $xslStyleSheet = $xsl->createElement("xsl:stylesheet");

        $xslStyleSheet->setAttribute("xmlns:xsl", "http://www.w3.org/1999/XSL/Transform");
        $xslStyleSheet->setAttribute("version", "1.0");

        $xslOutput = $xsl->createElement("xsl:output");
        $xslOutput->setAttribute("method", "xml");

        $xslTemplate = $xsl->createElement("xsl:template");
        $xslTemplate->setAttribute("match", "/");

        //Si cette balise est omise, alors le XML généré par le XSL n'aura pas de noeud racine
        //provoquant une erreur.
        $rootNodeForFinalXML = $xsl->createElement('TestSet');
        $xslTemplate->appendChild($rootNodeForFinalXML);

        $xslStyleSheet->appendChild($xslOutput);
        $xslStyleSheet->appendChild($xslTemplate);

        $xsl->appendChild($xslStyleSheet);

        $this->generateAbsoluteXPathTemplate($xsl, $xslStyleSheet);

        /** @var EiVersionStructure $eiVersionStructureRoot */
        $eiVersionStructureRoot = Doctrine_Core::getTable('EiVersionStructure')->getEiVersionStructureRoot($this->getId());

        if ($eiVersionStructureRoot) {
            $eiVersionStructureRoot->generateXSLForTestSet($xsl, $rootNodeForFinalXML);
        } else {
            throw new Exception("Un problème s'est produit durant la génération du XSL. Aucune EiVersionStructure racine trouvée pour la version #" . $this->getId());
        }

        return $xsl->saveXML();
    }

    /**
     * TODO: Factoriser avec EiTestSetBlockStack
     *
     * @param DOMDocument $xsl
     * @param $parentTag
     */
    private function generateAbsoluteXPathTemplate(DOMDocument $xsl, $parentTag) {
        $template = $xsl->createElement("xsl:template");
        $template->setAttribute("name", "generateAbsoluteXpath");

        $param = $xsl->createElement("xsl:param");
        $param->setAttribute("name", "prevXpath");

        $template->appendChild($param);

        $variable = $xsl->createElement("xsl:variable");
        $variable->setAttribute("name", "currentXPath");
        $variable->setAttribute("select", 'concat(\'/\',name(),\'[\',
                count(preceding-sibling::*[name() = name(current())])+1,\']\',$prevXpath)');

        $template->appendChild($param);
        $template->appendChild($variable);
        $foreach = $xsl->createElement("xsl:for-each");
        $foreach->setAttribute("select", "parent::*");

        $templateCall = $xsl->createElement("xsl:call-template");
        $templateCall->setAttribute("name", "generateAbsoluteXpath");

        $withParam = $xsl->createElement("xsl:with-param");
        $withParam->setAttribute("name", "prevXpath");
        $withParam->setAttribute("select", '$currentXPath');

        $templateCall->appendChild($withParam);
        $foreach->appendChild($templateCall);
        $template->appendChild($foreach);
        $condition =  $xsl->createElement("xsl:if");
        $condition->setAttribute("test", "not(parent::*)");

        $xslValue = $xsl->createElement("xsl:value-of");
        $xslValue->setAttribute("select", '$currentXPath');

        $condition->appendChild($xslValue);
        $template->appendChild($condition);

        $parentTag->appendChild($template);

    }

}