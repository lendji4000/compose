<?php

/**
 * EiBlockParam
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    kalifastRobot
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class EiBlockParam extends BaseEiBlockParam implements ITestSetBlockParamGenerator
{
    
    public function createLiElem(){
        return '<li class="padding-left">'. $this->getName() ."</li>";
    }

    /**
     * @param $type
     * @return EiBlockDataSetMapping|null
     */
    public function getMapping($type){

        $mappings = $this->getEiVersionStructureDataSetMapping();
        $result = null;

        /** @var EiBlockDataSetMapping $mapping */
        foreach( $mappings as $mapping ){
            if( $mapping->getType() == $type ){
                $result = $mapping;
            }
        }

        return $result;
    }

    /**
     * Retourne, sous forme de chaine de caractère HTML, le chemin jusqu'au
     * block.
     * @return string
     */
    public function getPathTo() {
        $res = "";
        if ($this->getNode()->hasParent()):
            $nodeAncestors=$this->getNode()->getAncestors();
            if($nodeAncestors):
                foreach ($nodeAncestors as $ei_block):
                    $res .= "<li>" . $ei_block->getName() . '<span class="divider">/</span> </li>';
                endforeach;
            endif;
            
        endif;
            

        $res .= "<li> <strong>" . $this->getName() . '</strong></li>';

        return $res;
    }

    /**
     * @return string
     */
    public function getPathToString(){
        return str_replace(" ", "", "/".strip_tags($this->getPathTo()));
    }
    
    /**
     * Génère le XSD pour le paramètre.
     * @param type $xsd
     * @return type
     */
    public function generateXSD($xsd){
        $element = $xsd->createElement("xs:element");
        $element->setAttribute('name', $this->getName());
        
        return $element;
    }

    /**
     * @param $container
     * @param EiBlock $parent
     * @param $params
     * @return mixed
     */
    public function generateTree($container, $parent, &$params)
    {
        $datas = $this->getLogsFromStructureParentAndBlockName($parent, $params);

        $container["childs"][$this->getId()] = array(
            "id" => $this->getId(),
            "name" => $this->getName(),
            "parent_id" => $this->getEiVersionStructureParentId(),
            "datas" => $datas["params"],
            "type" => $this->getType()
        );

        $container["logs"] = $datas["logs"];

        return $container;
    }

    /**
     * @param EiTestSet $testSet
     * @param EiTestSetBlockParam $parent
     * @param null $index
     * @param string $path
     * @return mixed
     */
    public function generateTestSetParameters(EiTestSet $testSet = null, $parent = null, $index = null, $path = "", $deep = false, Doctrine_Connection $conn = null)
    {
        $conn = $conn == null ? Doctrine_Manager::connection():$conn;
        $path.= "/" . $this->getName();
        $chronometre = new Chronometre();

        $recupStr = $chronometre->lancerChrono("Récupération structure param", true);
        // Vérification si l'élément existe.
        /** @var EiTestSetBlockParam $element */
        $element = EiTestSetBlockParamTable::getInstance()->findOneByEiTestSetIdAndPath($testSet->getId(), $path);
        $chronometre->arreterEtAfficherChrono("Récupération structure param", $recupStr);
        $eltExists = $element == null ? false:true;

        if( !$eltExists ){
            $element = new EiTestSetBlockParam();

            $element->setEiVersionStructureId($this->getId());
            $element->setName($this->getName());
            $element->setSlug($this->getSlug());
            $element->setType($this->getType());
            $element->setEiTestSetId($testSet->getId());
            $element->setIndexRepetition($index);
            $element->setPath($path);

            if( $parent != null ) $element->setParentId($parent->getId());
        }

        $recupMap = $chronometre->lancerChrono("Récupération du mapping", true);
        /** @var EiBlockDataSetMapping $mapping */
        $mapping = $this->getMapping(EiBlockDataSetMapping::$TYPE_IN);

        if( $mapping != null && $parent->getType() == EiVersionStructure::$TYPE_FOREACH )
        {
            /** @var EiMappingStructureSyncIn $iteratorMap */
            $iteratorMap = $parent->getEiVersionStructure()->getIteratorMapping();
            /** @var Doctrine_Node_NestedSet $node */
            $node = $mapping != null ? $mapping->getEiDataSetStructureMapping()->getNode():null;

            $indexToMap = ( !$node->isDescendantOf($iteratorMap->getEiDataSetStructureMapping()) ) ? 1:$index;

            $value = $mapping->getValueFromTestSetJdd($testSet, $indexToMap, $parent);
        }
        elseif( $mapping != null ){
            $value = $mapping->getValueFromTestSetJdd($testSet, $index, $parent);
        }
        else{
            $value = "";
        }
        $chronometre->arreterEtAfficherChrono("Récupération du mapping", $recupMap);

        // Sauvegarde de la valeur de l'élément.
        $element->setValue($value);
        $saveChro = $chronometre->lancerChrono("Sauvegarde paramètre de block", true);
        $element->save($conn);

        if( !$eltExists ){
            if( !$parent->getNode()->getChildren() ){
                $element->getNode()->insertAsFirstChildOf($parent);
            }
            else{
                $element->getNode()->insertAsNextSiblingOf($parent->getNode()->getLastChild());
            }
        }
        $chronometre->arreterEtAfficherChrono("Sauvegarde paramètre de block", $saveChro);

        return $element;
    }

    /**
     *
     *
     * @param EiBlock $parent
     * @param $params
     * @return null
     */
    private function getLogsFromStructureParentAndBlockName($parent, &$params)
    {
        $elts = null;

        foreach( $params as $ind => $param ){
            if( $param["ei_version_structure_id"] == $parent->getId() && $this->getName() == $param["param_name"] ){
                $elts["params"][$param["ei_log_id"]] = array(
                    "name" => $param["param_name"],
                    "value" => $param["param_valeur"],
                    "type" => $param["param_type"],
                    "log_id" => $param["ei_log_id"]
                );

                $elts["logs"][] = $param["ei_log_id"];

                array_splice($params, $ind, 1);
            }
        }

        return $elts;
    }

    public function save(Doctrine_Connection $conn = null)
    {
        $this->setSlug(MyFunction::sluggifyForXML($this->getName()));

        parent::save($conn); // TODO: Change the autogenerated stub
    }


}

?>
