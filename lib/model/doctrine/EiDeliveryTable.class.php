<?php

/**
 * EiDeliveryTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EiDeliveryTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object EiDeliveryTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('EiDelivery');
    }
    //Recherche d'une livraison par son nom ou son Id
    public function searchDeliveryByIdOrName($nameOrId,$project_id,$project_ref,Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        if($nameOrId==null) return null;
       $q= $conn->createQuery()->from('EiDelivery d') 
             ->where('project_id= ? And project_ref=? ',array($project_id,$project_ref))
             ->andWhere('d.id= ? OR d.name LIKE ? ', array($nameOrId , '%'.$nameOrId.'%'))
             ->execute(); 
       if(count($q)>0):
           return $q->getFirst();
       endif;
       return null;
    }
    //Récupération des livraisons ouvertes d'un projet et ordonnées par date 
    public function getOpenDeliveriesQuery(EiProjet  $ei_project ,  $limit =null ){
        $q =$this->getProjectDeliveries($ei_project->getProjectId(), $ei_project->getRefId());  
        $q= $q->andWhere('s.close_state=0') ;
        if($limit!=null):
            $q=$q->limit($limit);
        endif;
       return $q;
    }
    //Récupération des livraisons ouvertes d'un projet et ordonnées par date 
    public function getOpenDeliveries(EiProjet  $ei_project ,  $limit =null ){
        return $this->getOpenDeliveriesQuery($ei_project, $limit)->execute();  
    }
    //Récupération de la requête pour la liste des livraisons d'un projet
    public function getProjectDeliveries($project_id,$project_ref,Doctrine_Connection $conn=null ){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        $closed_states=Doctrine_Core::getTable('EiSubjectState')->findByProjectIdAndProjectRefAndCloseDelState(
                $project_id,$project_ref,1);
        
        if(count($closed_states)>0):
            $str="(";$k=count($closed_states);
        foreach($closed_states as $state):
            $str.=$state->getId();
            $k--;
            if($k!=0) $str.=",";
            
        endforeach;
        $str.=")";        
        else:
            return null;
        endif;
        
     return   $conn->createQuery()->select('d.*,MAX(d.delivery_date) as maxDate ,a.*,s.*, COUNT(distinct  sd.id) as nbSub ,COUNT(distinct  sdc.id) as nbSubOpen')->from('EiDelivery d')  
             ->leftJoin('d.subjectDelivery sdc ON sdc.delivery_id=d.id and sdc.subject_state_id IN '.$str ) 
             //->leftJoin('sdc.EiSubjectState sdcs ON sdc.subject_state_id=sdcs.id And sdcs.close_del_state=0')
             ->leftJoin('d.sfGuardUser a')
             ->leftJoin('d.EiDeliveryState s') 
             ->leftJoin('d.subjectDelivery sd' ) 
             ->where(' project_id= ? And project_ref=? ',array($project_id,$project_ref)) 
             ->groupBy('d.id')
             ->orderBy('maxDate DESC'); 
    }
    
    public function getDashBoardProjDels($project_id,$project_ref,$guard_id,Doctrine_Connection $conn=null ){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        if($project_id==null || $project_ref==null || $guard_id==null ) return array();
        return $conn->fetchAll("select d.id as d_id,d.author_id as d_author_id,d.delivery_state_id as d_delivery_state_id,d.name as d_name,
                        d.delivery_date as d_delivery_date, d.description as d_description,d.created_at as d_created_at,d.updated_at as d_updated_at ,
                        st.id as st_id,st.name as st_name ,st.color_code as st_color_code,st.close_del_state as st_close_del_state,g1.id as g1_id,g1.username as g1_username,
                        (select count(distinct(id)) from ei_subject where  delivery_id=d.id ) as nbSub,
                        (select count(distinct(id)) from ei_subject where  delivery_id=d.id and subject_state_id=st.id) as nbDelSub,
                        (select count(distinct(s.id)) from ei_subject s left outer join ei_subject_assignment sas on s.id=sas.subject_id where  s.delivery_id=d.id and s.subject_state_id=st.id  and sas.guard_id=".$guard_id.") as nbDelUserSub,
                        (select count(distinct(s2.id)) from ei_subject s2 left outer join ei_subject_assignment sas2 on s2.id=sas2.subject_id where  s2.delivery_id=d.id and s2.subject_state_id=st.id and  sas2.guard_id IS NULL) as nbDelUserNoSub
                        from ei_delivery d , sf_guard_user g1,
                        ei_delivery_state ds,ei_subject_state st
                        where d.author_id=g1.id and st.project_id=d.project_id and st.project_ref=d.project_ref
                        and d.delivery_state_id=ds.id and ds.close_state=0 and d.project_id=".$project_id." and d.project_ref=".$project_ref." order by d.delivery_date Desc  ");
    }
    //Récupération des livraisons triés par critères
    public function sortDeliveriesByCriterias($q,$searchDeliveryCriteria){
        $q=$q;
        //Ajout des critères de tri
     if(isset ($searchDeliveryCriteria['title']) && $searchDeliveryCriteria['title']!=null ): 
         $q->andWhere('d.name like ?','%'.$searchDeliveryCriteria['title'].'%'); 
     endif;
      if(isset ($searchDeliveryCriteria['author']) && $searchDeliveryCriteria['author']!=null): 
          $q->andWhere('a.username like ?','%'.$searchDeliveryCriteria['author'].'%'); 
      endif;
      if(isset ($searchDeliveryCriteria['state']) && count($searchDeliveryCriteria['state'])>0): 
          $q->andWhere('s.id IN ?',$searchDeliveryCriteria['state']); 
      endif;
      if(isset ($searchDeliveryCriteria['start_date']) && $searchDeliveryCriteria['start_date']!=null
                && isset ($searchDeliveryCriteria['end_date']) && $searchDeliveryCriteria['end_date']!=null): 
          $q->andWhere('d.delivery_date  >= ?', $searchDeliveryCriteria['start_date'])
            ->andWhere('d.delivery_date <= ?', $searchDeliveryCriteria['end_date'])  ; 
      endif;
      return $q->orderBy('d.delivery_date DESC, d.created_at');
    }
    //Pagination des livraisons 
    public function paginateDeliveries($q , $first_entry,$max_delivery_per_page){
        return $q=$q->offset($first_entry)
             ->limit($max_delivery_per_page ) ;
    }
    
    /* Récupération des authors de livraisons pour un projet donné . (sert pour les recherches ) */
    public function getDeliveryAuthorsForProject(EiProjet $ei_project,  Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection();
        $typehead=array();
        $deliverysAuthor=$conn->createQuery()->from('sfGuardUser u')  
                ->select('u.username')
                ->leftJoin('u.deliveryAuthor d')
                ->where('project_id= ? And project_ref=? ',
                        array($ei_project->getProjectId(),$ei_project->getRefId()))
                ->execute();
        //Parse delivery for typehead 
        if(count($deliverysAuthor)>0):
            foreach($deliverysAuthor as $author):
            $typehead[]=$author->getUsername();
            endforeach;
        endif;
        return $typehead;
    }
    
    /* Récupération des titres  de livraisons pour un projet donné . (sert pour les recherches ) */
    public function getDeliveryTitlesForProject(EiProjet $ei_project,  Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection();
        $typehead=array();
        $deliverys=$conn->createQuery()->from('EiDelivery d')  
                ->select('d.name')
                ->where('project_id= ? And project_ref=? ',
                        array($ei_project->getProjectId(),$ei_project->getRefId()))
                ->orderBy('d.delivery_date DESC')
                ->execute();
        //Parse delivery for typehead 
        if(count($deliverys)>0):
            foreach($deliverys as $delivery):
            $typehead[]=$delivery->getName();
            endforeach;
        endif;
        return $typehead;
    } 
    /* Récupération de la liste déroulante des livraisons  pour la recherche */
    public function getProjectDeliveriesForSearchBox(EiProjet $ei_project,  Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        $deliveryTab=array('0' => null);
        $openDeliveryStates=Doctrine_Core::getTable('EiDeliveryState')->findByProjectIdAndProjectRefAndCloseState(
                $ei_project->getProjectId(),$ei_project->getRefId(),0);
        if(count($openDeliveryStates)>0):
            //On construit le tableau des IDs de statut de livraison ouverte 
            $stateTab=array();
            foreach($openDeliveryStates as $openState):
            $stateTab[]=$openState->getId();
            endforeach;
            $deliveries=$conn->createQuery()->from('EiDelivery d')   
                ->where('project_id= ? And project_ref=? And delivery_state_id  IN ? ',
                        array($ei_project->getProjectId(),$ei_project->getRefId(),$stateTab))
                ->orderBy('d.delivery_date DESC')
                ->execute();
        endif;
        
        
        if(isset($deliveries) && count($deliveries)>0):
            foreach($deliveries as $delivery):
                $deliveryTab[$delivery->getId()]=$delivery->getName().'     /   '.date('Y-m-d', strtotime($delivery->getDeliveryDate()));
            endforeach;
        endif;
        return $deliveryTab;
    }
    
    /* Récupération de la liste déroulante des livraisons  pour la recherche */
    public function getAllProjectDeliveriesForSearchBox(EiProjet $ei_project,  Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        $deliveryTab=array('0' => null); 
            $deliveries=$conn->createQuery()->from('EiDelivery d')   
                ->where('project_id= ? And project_ref=?  ',
                        array($ei_project->getProjectId(),$ei_project->getRefId()))
                ->orderBy('d.delivery_date DESC')
                ->execute(); 
        
        
        if(isset($deliveries) && count($deliveries)>0):
            foreach($deliveries as $delivery):
                $deliveryTab[$delivery->getId()]=$delivery->getName().'     /   '.date('Y-m-d', strtotime($delivery->getDeliveryDate()));
            endforeach;
        endif;
        return $deliveryTab;
    }
    
    //Recherche des campagnes de tests d'une livraison
    public function getDeliveryCampaigns($delivery_id,  Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        return $conn->createQuery()->from('EiDeliveryHasCampaign dc')   
                ->leftJoin('dc.EiCampaign c')
                ->where('dc.delivery_id='.$delivery_id)
                ->orderBy('dc.created_at DESC')
                ->execute();
    }
     //Recherche des sujets d'une livraison (Requete)
    public function getDeliverySubjectsQuery($project_id,$project_ref,$delivery_id,  Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection();  
        $q=Doctrine_Core::getTable('EiSubject')->getSubjectsAsArray($project_id,$project_ref,$conn); 
        return $q->Where('d.id='.$delivery_id) ;
    }
    //Recherche des sujets d'une livraison
    public function getDeliverySubjects($project_id,$project_ref,$delivery_id,  Doctrine_Connection $conn=null){
        return $this->getDeliverySubjectsQuery($project_id, $project_ref, $delivery_id,$conn)->fetchArray();
         
    }
    //Recherche de toutes les fonctions d'une livraison ayant subit des modifications 
    public function getFunctionsToMigrate(Array $criteria,$selectPart,$groupBy=true,  Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection();   
        /* Construction de la clause where pour la recherche des fonctions à migrer */ 
        $whereClause="s_package_id IS NOT NULL AND s_package_ref IS NOT NULL ";
        if(isset($criteria['project_id']) && isset($criteria['project_ref'])): //Projet spécifié
            $whereClause.= " And t_project_id=".$criteria['project_id']." And t_project_ref=".$criteria['project_ref'];
        endif;
        if(isset($criteria['delivery_id'])  )://Livraison spécifiée
            $whereClause.= " And s_delivery_id=".$criteria['delivery_id'];
            //Ajout de la clause permettant  de trier sur les packages des bugs de la livraison
            $whereClause.= " And sc_ticket_id=et_ticket_id And sc_ticket_ref=et_ticket_ref And (sc_ticket_id ,sc_ticket_ref) IN (select package_id, package_ref from ei_subject where delivery_id=".$criteria['delivery_id'].")";
        endif;
        if(isset($criteria['subject_id'])  ): //Sujet spécifié  
            $whereClause.= " And s_id=".$criteria['subject_id'];
        endif; 
        if(isset($criteria['script_ticket_id']) && isset($criteria['script_ticket_ref'])  ): //Ticket  spécifié  
            $whereClause.= " And sc_ticket_id=".$criteria['script_ticket_id']." And sc_ticket_ref=".$criteria['script_ticket_ref'];
        endif;
        $q=$selectPart." FROM 
            `ei_delivery_functions_vw` as df_vw   
            WHERE  ".$whereClause; 
        if($groupBy) $q.="  Group by t_id ";
         return $conn->fetchAll($q);
    }
    
    //Recherche de tous les scénarios à migrer pour une livraison (scénarios ayant subit une subi des modifications dans le cadre de la livraison)
    public function getScenariosToMigrate(Array $criteria,$selectPart,$groupBy=true,  Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection();   
        /* Construction de la clause where pour la recherche des scénarios à migrer */ 
        $whereClause="s_package_id IS NOT NULL AND s_package_ref IS NOT NULL And et_ticket_ref IS NOT NULL And et_ticket_id IS NOT NULL";
        if(isset($criteria['project_id']) && isset($criteria['project_ref'])): //Projet spécifié
            $whereClause.= " And sc_project_id=".$criteria['project_id']." And sc_project_ref=".$criteria['project_ref'];
        endif;
        if(isset($criteria['delivery_id'])  )://Livraison spécifiée
            $whereClause.= " And s_delivery_id=".$criteria['delivery_id']; 
        endif;
        if(isset($criteria['subject_id'])  ): //Sujet spécifié  
            $whereClause.= " And s_id=".$criteria['subject_id'];
        endif;  
        $q=$selectPart." FROM 
            `ei_delivery_scenario_vw` as ds_vw   
            WHERE  ".$whereClause; 
        if($groupBy) $q.="  Group by sc_id "; //throw new Exception($q);
         return $conn->fetchAll($q);
    }
    /* Procedure de migration applicative d'une livraison (delivery process) */
    public function getDeliveryProcess($delivery_id,Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection();
        if($delivery_id==null) return null;
        // ei_subject_repare_migration_vw
        return $conn->execute("select * from ei_delivery_process_vw  where delivery_id=".$delivery_id);
    }
    /* Récupération de tous les conflits de fonction résolus sur une livraison */
    public function getResolvedConflictsOnFunctions($delivery_id,Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection();
        if($delivery_id==null) return array();
        return $conn->fetchAll("select pfc.function_id, pfc.function_ref, pfc.delivery_id, pfc.package_id,pfc.package_ref,sv.profile_id,sv.profile_ref from ei_package_function_conflict pfc
                 left join  ei_script s on s.function_id=pfc.function_id and s.function_ref=pfc.function_ref and pfc.package_id=s.ticket_id and  pfc.package_ref=s.ticket_ref
                 left join ei_script_version sv on sv.script_id=s.script_id where pfc.delivery_id=".$delivery_id);
    }
    /* Récupération de tous les conflits de scenarios résolus sur une livraison */
    public function getResolvedConflictsOnScenarios($delivery_id,Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection();
        if($delivery_id==null) return array();
        return $conn->fetchAll("select psc.ei_scenario_id,  psc.delivery_id, psc.package_id,psc.package_ref,ps.profile_id,ps.profile_ref from ei_package_scenario_conflict psc
                 left join  ei_scenario_package sp on sp.ei_scenario_id=psc.ei_scenario_id and psc.package_id=sp.package_id and  psc.package_ref=sp.package_ref
                 left join ei_profil_scenario ps on ps.ei_version_id=sp.ei_version_id where psc.delivery_id=".$delivery_id);
    } 
    /* Récupération des bugs contenant des impacts ou non */
    public function getBugWithImpactOrNot($delivery_id,$hasImpact=true,Doctrine_Connection $conn=null){
        $q="select distinct(s.id), s.name  ,vwf.delivery_id, ss.name as ss_name, ss.color_code as ss_color_code,st.name as type_name,sp.name as sp_name,g.id as assign_id,g.username as assign_name
            from ei_subject s
            left join ei_subject_state ss on ss.id=s.subject_state_id
            left join ei_subject_type st on st.id=s.subject_type_id
            left join ei_subject_priority sp on sp.id=s.subject_priority_id
            left join ei_subject_assignment sa on sa.subject_id=s.id
            left join sf_guard_user g on g.id=sa.guard_id 
            left join 
            (
            SELECT  IF(s_id is null,  s2_id , s_id) as subject_id, IF(s_delivery_id is null,  s2_delivery_id , s_delivery_id) as delivery_id from
              ei_delivery_impacted_functions_vw     
            WHERE t_type='Function' )  as vwf
            on s.id= vwf.subject_id
            where  s.delivery_id=".$delivery_id;
        if($hasImpact):
            $q.=" and vwf.subject_id is not  null";
        else:
            $q.=" and vwf.subject_id is   null";
        endif;  
        return EiSubject::parseSubjects($conn->fetchAll($q));
    }
    /* Récupération du nombre de fonction impactées dans une livraison */
    public function countImpactedFunctions($delivery_id,Doctrine_Connection $conn=null){
        $q=" 
            select count(distinct(t_id)) from ei_delivery_impacted_functions_vw   
            where (s_delivery_id=".$delivery_id." or s2_delivery_id=".$delivery_id.")  
             ";
        return $conn->fetchOne($q);
    }
    
    /* Gestion des fonctions exécutées dans les campagnes de la livraison (dernières eécutions de la campagne) */
    public function getExFuncInLastExDelCamps($delivery_id,Doctrine_Connection $conn=null){
        $q=" 
            select vw.t_id ,lastEx.id, lastEx.function_id , lastEx.function_ref , lastEx.status ,SUM(IF(lastEx.id is   null,  0 , 1)) as nbEx, SUM(IF(lastEx.status like '%ko%' ,  1, 0)) as nbExKo, SUM(IF(lastEx.status like '%ok%' ,  1, 0)) as nbExOk from ei_delivery_impacted_functions_vw vw
            left join 
            (select tsf.id, tsf.function_id , tsf.function_ref , tsf.status
            from ei_test_set_function tsf  
            where  tsf.ei_test_set_id IN (select max(ts.id) from ei_test_set ts
                                    left join ei_campaign_execution_graph ceg on ts.id=ceg.ei_test_set_id
                                    left join ei_campaign_graph cg on ceg.graph_id=cg.id 
                                    left join ei_delivery_has_campaign dc on dc.campaign_id=cg.campaign_id  where dc.delivery_id=".$delivery_id."   group by dc.campaign_id)


            order by tsf.id DESC ) as lastEx
            on lastEx.function_ref=vw.t_ref_obj   and lastEx.function_id=vw.t_obj_id
            where (vw.s_delivery_id=".$delivery_id." or vw.s2_delivery_id=".$delivery_id.")  
            group by vw.t_id

             ";
        return $conn->fetchAll($q);
    }
    
    /* Récupération des fonctions ayant été exécutées au moins 5 fois avec des paramètres différents (en success) */
               
    public function getExFunctWithAtLeastFiveDiffParams($delivery_id,Doctrine_Connection $conn=null){
        $q="select lgp1.* ,lgf.id , tsf.function_id,tsf.function_ref,tsf.status,vw.t_id,vw.t_name,
 
                (select count(*)    from ei_log_param lgp
                 inner join ei_test_set ts on ts.id=lgp.ei_test_set_id and ts.id  IN (select max(ts.id) from ei_test_set ts 
                                                    left join ei_campaign_execution_graph ceg on ts.id=ceg.ei_test_set_id
                                                    left join ei_campaign_graph cg on ceg.graph_id=cg.id 
                                                    left join ei_delivery_has_campaign dc on dc.campaign_id=cg.campaign_id  where dc.delivery_id=".$delivery_id." group by dc.campaign_id )

                where param_type like '%IN%' and lgp1.param_name=lgp.param_name and lgp1.param_valeur=lgp.param_valeur ) as nbRepParam

                from ei_log_param lgp1
                inner join ei_test_set ts1 on ts1.id=lgp1.ei_test_set_id and ts1.id  IN (select max(ts1.id) from ei_test_set ts1 
                                                    left join ei_campaign_execution_graph ceg on ts1.id=ceg.ei_test_set_id
                                                    left join ei_campaign_graph cg on ceg.graph_id=cg.id 
                                                    left join ei_delivery_has_campaign dc on dc.campaign_id=cg.campaign_id  where dc.delivery_id=".$delivery_id." group by dc.campaign_id) 

                inner join ei_log_function lgf on lgf.id=lgp1.ei_log_function_id
                inner join ei_test_set_function tsf on tsf.id=lgf.ei_test_set_function_id
                inner join ei_delivery_impacted_functions_vw vw on vw.t_obj_id=tsf.function_id and vw.t_ref_obj=tsf.function_ref
                where lgp1.param_type like '%IN%' 
                group by lgp1.id ";
        return $conn->fetchAll($q);
    }
                        
}


/*
ALTER TABLE `ei_log_param` ADD INDEX(`param_type`)
ALTER TABLE `ei_test_set_function` ADD INDEX(`status`)
select lgp1.* ,lgf.id , tsf.function_id,tsf.function_ref,tsf.status,vw.t_id,vw.t_name,
 
(select count(*)    from ei_log_param lgp
 inner join ei_test_set ts on ts.id=lgp.ei_test_set_id and ts.id  IN (select max(ts.id) from ei_test_set ts 
                                    left join ei_campaign_execution_graph ceg on ts.id=ceg.ei_test_set_id
                                    left join ei_campaign_graph cg on ceg.graph_id=cg.id 
                                    left join ei_delivery_has_campaign dc on dc.campaign_id=cg.campaign_id  where dc.delivery_id=47 group by dc.campaign_id )
  
where param_type like "%IN%" and lgp1.param_name=lgp.param_name and lgp1.param_valeur=lgp.param_valeur ) as nbRepParam

from ei_log_param lgp1
inner join ei_test_set ts1 on ts1.id=lgp1.ei_test_set_id and ts1.id  IN (select max(ts1.id) from ei_test_set ts1 
                                    left join ei_campaign_execution_graph ceg on ts1.id=ceg.ei_test_set_id
                                    left join ei_campaign_graph cg on ceg.graph_id=cg.id 
                                    left join ei_delivery_has_campaign dc on dc.campaign_id=cg.campaign_id  where dc.delivery_id=47 group by dc.campaign_id) 
 
left join ei_log_function lgf on lgf.id=lgp1.ei_log_function_id
left join ei_test_set_function tsf on tsf.id=lgf.ei_test_set_function_id
left join ei_delivery_impacted_functions_vw vw on vw.t_obj_id=tsf.function_id and vw.t_ref_obj=tsf.function_ref
group by lgp1.id 
 *  */