<?php

/**
 * EiTestSetFunctionTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EiTestSetFunctionTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object EiTestSetFunctionTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('EiTestSetFunction');
    }
    
    public function getPreviousBlock($ei_test_set_id, $position, $profile_id, $profile_ref){
        $q = Doctrine_Manager::getInstance()->getCurrentConnection();
        $positionDebut = $q->fetchOne(" SELECT MIN(t.position)
                                        FROM ei_test_set_function t
                                        WHERE t.xpath = (   SELECT t2.xpath 
                                                            FROM ei_test_set_function t2 
                                                            WHERE t2.position = ? AND t2.ei_test_set_id = ?)
                                        AND t.position <= ?
                                        AND t.ei_test_set_id = ?", array($position, $ei_test_set_id , $position, $ei_test_set_id));
        
        return $this->getFunctionsFromPosition($ei_test_set_id, $positionDebut, $profile_id, $profile_ref);
    }

    /**
     * Récupère les fonctions a executer par le jeu de test à partir de la position
     * @param type $ei_data_set_id
     * @param type $position
     * @return array
     */
    public function getFunctionsFromPosition($ei_test_set_id, $position, $profile_id, $profile_ref) {
        $q = Doctrine_Manager::getInstance()->getCurrentConnection();

        $sql = "SELECT dtf1 . *, p.id, p.valeur, p.param_id, fctp.name, tree.name as fctName, fct.id as fctId, fctp.description as fctp_description, fctp.param_type as fctp_param_type
          FROM ei_test_set_function dtf1

          INNER JOIN ei_test_set ts ON ts.id = dtf1.ei_test_set_id
          INNER JOIN ei_profil_scenario ps ON ts.profile_id = ps.profile_id AND ts.profile_ref = ps.profile_ref AND ts.ei_scenario_id = ps.ei_scenario_id
          LEFT JOIN ei_fonction fct ON fct.function_ref = dtf1.function_ref AND fct.function_id = dtf1.function_id
          LEFT JOIN kal_function kalfct ON fct.function_ref = kalfct.function_ref AND fct.function_id = kalfct.function_id
          LEFT JOIN ei_tree tree ON tree.ref_obj = kalfct.function_ref AND tree.obj_id = kalfct.function_id
          LEFT JOIN ei_test_set_param p ON p.ei_test_set_function_id = dtf1.id
          LEFT JOIN ei_function_has_param fctp ON fctp.param_id = p.param_id

          WHERE dtf1.id <= ifnull(
            (SELECT MIN(dtf2.id) FROM ei_test_set_function dtf2 WHERE dtf1.xpath != dtf2.xpath AND dtf2.ei_test_set_id = dtf1.ei_test_set_id AND dtf2.position >= ?),
            (SELECT MAX(dtf3.id) FROM ei_test_set_function dtf3 WHERE dtf3.ei_test_set_id = dtf1.ei_test_set_id))
            AND ts.profile_id = ?
            AND ts.profile_ref = ?
            AND dtf1.position >= ?
            AND dtf1.ei_test_set_id = ?
            AND fct.ei_version_structure_id IN (SELECT id FROM ei_version_structure WHERE ei_version_id = ps.ei_version_id)
            ORDER BY dtf1.position
        ";

        $fonctions = $q->fetchAll($sql, array($position, $profile_id, $profile_ref, $position, $ei_test_set_id));
        
        return $this->hydrateArray($fonctions);
    }

    private function hydrateArray($fonctions){
        $fctArray = array();
        //remplissage du tableau contenant les fonctions trouvées.
        if ($fonctions) {
           
            $aux = array();
            $params = array();
            
            $count = count($fonctions);
            $fctIndex = 0;
            $i=$j = 0;
            while ($i < $count) {
                $j = $i;
                $fct = $fonctions[$i];
                //propriété du EiTestSetFunction
                $aux['function_ref'] = $fonctions[$i]['function_ref'];
                $aux['function_id'] = $fonctions[$i]['function_id'];
                $aux['xpath'] = $fonctions[$i]['xpath'];
                $aux['ei_test_set_id'] = $fonctions[$i]['ei_test_set_id'];
                $aux['position'] = $fonctions[$i]['position'];
                $aux['id'] = $fonctions[$i]['fctId'];
                $aux['name'] = $fonctions[$i]['fctName'];
                $aux['status'] = $fonctions[$i]['status'];
                //ajout des paramètres s'il en existe pour la fonction courante.
                while ($j < $count && $fct['function_ref'] == $fonctions[$j]['function_ref'] && $fct['function_id'] == $fonctions[$j]['function_id']
                        && $fonctions[$j]["position"] == $fct['position']) {
                   if ($fct['param_id'] != null) {                    
                        $p = array();
                        $p['param_id'] = $fonctions[$j]['param_id'];
                        $p['valeur'] = $fonctions[$j]['valeur'];
                        $p['name'] = $fonctions[$j]['name'];
                        $p['desc'] = $fonctions[$j]['fctp_description'];
                        $p['type'] = $fonctions[$j]['fctp_param_type'];
                       $params[$fonctions[$j]['param_id']] = $p;
                    }
                    $j++;
                }
                
                $aux['params'] = $params;
                
                $fctArray[$fctIndex] = $aux;
                $fctIndex++;
                
                $aux = array();
                $params = array();
                
                $i = $j;
            }
        }
        
        return $fctArray;
    }
    
    public function getEiFunctionAsArray($ei_fonction_id, $position,  $ei_test_set_id){
        $query = "  SELECT 
                        dtf1.*, p.id, p.valeur, p.param_id, fctp.name, tree.name as fctName, fct.id as fctId
                    FROM
                        ei_test_set_function dtf1
                    LEFT JOIN
                        ei_fonction fct
                        ON fct.function_ref = dtf1.function_ref AND fct.function_id = dtf1.function_id
                    LEFT JOIN
                        kal_function kalfct
                        ON fct.function_ref = kalfct.function_ref AND fct.function_id = kalfct.function_id
                    LEFT JOIN
                        ei_tree tree
                        ON tree.ref_obj = kalfct.function_ref AND tree.obj_id = kalfct.function_id
                    LEFT JOIN 
                        ei_test_set_param p 
                        ON p.ei_test_set_function_id = dtf1.id
                    LEFT JOIN
                        ei_function_has_param fctp 
                        ON fctp.param_id = p.param_id
                    WHERE 
                        fct.id = ?
                    AND dtf1.position = ?
                    AND dtf1.ei_test_set_id = ?";
        
        $q = Doctrine_Manager::getInstance()->getCurrentConnection();
        
        $function = $q->fetchAll($query, array($ei_fonction_id, $position, $ei_test_set_id));
        $fctArray = array();
        
        if(count($function) > 0 ){
            $fctArray['function_ref'] = $function[0]['function_ref'];
            $fctArray['function_id'] = $function[0]['function_id'];
            $fctArray['xpath'] = $function[0]['xpath'];
            $fctArray['ei_test_set_id'] = $function[0]['ei_test_set_id'];
            $fctArray['position'] = $function[0]['position'];
            $fctArray['id'] = $function[0]['fctId'];
            $fctArray['name'] = $function[0]['fctName'];
            $params = array();
            
            foreach($function as $i => $row){
                if(isset($row['name'])){
                    $p['param_id'] = $row['param_id'];
                    $p['valeur'] = $row['valeur'];
                    $p['name'] = $row['name'];
                    $params[] = $p;
                }
            }
            
            $fctArray['params'] = $params;
  
        }
        
        return $fctArray;
    }
}