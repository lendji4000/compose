<?php

/**
 * EiCampaignGraph
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    kalifastRobot
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class EiCampaignGraph extends BaseEiCampaignGraph {

    public function __toString() {
        return $this->getId() ; 
    }
    /* Récupération du suivant d'une step de campagne */
    public function getNextStep(Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection(); 
        return $this->getTable()->getNextStep($this->getCampaignId(),$this->getId(),$conn);
    }
    
    /* Ajout d'une step comme root de campagne */
    public  function createStepAsRoot( EiCampaign $current_campaign, EiCampaignGraph $new_root,Doctrine_Connection $conn = null){
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        try {
                        
            $conn->beginTransaction();     //throw new Exception($current_campaign->getId());  
            if(!$new_root->isNew()): 
                $new_root1=$new_root->copy(); $new_root->delete($conn); $new_root=$new_root1; 
            endif;
            $ei_campaign_root=$current_campaign->getRootCampaign();
            
            //Si la campagne a déjà un root , on le change , sinn on l'ajoute
            if(($ei_campaign_root instanceof EiCampaignGraph)):
             //Le root existe, on le change  
             $new_root->save($conn);
            //Ajout de la relation père-fils
            $new_relation=new EiCampaignGraphHasGraph();
            $new_relation->setParentId($new_root->getId());
            $new_relation->setChildId($ei_campaign_root->getId());
            $new_relation->setCampaignId($current_campaign->getId()); 
            $new_relation->save($conn);
            $conn->commit();
            return $new_root;
            else://On crèe le noeud comme root
              if($ei_campaign_root==null): 
                  $new_root->save($conn);
                  $conn->commit();
                  return $new_root;
              endif; 
              $conn->close();
              return null;
        endif;
         
        } catch (Exception $e) {
            $conn->rollback();
            throw $e;
        } 
        
    }
    /* Ajout d'un step à la suite d'un autre */
    public function addStepAsNextOf(EiCampaignGraph $step_before,EiCampaignGraph $new_step, Doctrine_Connection $conn = null){
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        try {
            $conn->beginTransaction();
            $new_step->save($conn);
            //Ajout de la relation père fils
            $child_of_step_before=Doctrine_Core::getTable('EiCampaignGraphHasGraph')
                    ->findOneByParentId($step_before->getId());
            if($child_of_step_before!=null): //L'élément a bien un fils, on intercale le nouveau step entre les deux
                $new_relation=new EiCampaignGraphHasGraph();
                $new_relation->setParentId($new_step->getId());
                $new_relation->setChildId($child_of_step_before->getChildId());
                $new_relation->setCampaignId($step_before->getCampaignId()); 
                $new_relation->save($conn);
                //Modification de l'ancienne relation
                $child_of_step_before->setChildId($new_step->getId());
                $child_of_step_before->save($conn);
                $conn->commit();
                return $new_step;
                else: //L'élément est root 
                    $new_relation=new EiCampaignGraphHasGraph();
                    $new_relation->setParentId($step_before->getId());
                    $new_relation->setChildId($new_step->getId());
                    $new_relation->setCampaignId($step_before->getCampaignId()); 
                    $new_relation->save($conn);
                    $conn->commit();
                    return $new_step;
            endif;
            $conn->close();
            return null;
            } catch (Exception $e) {
            $conn->rollback();
            throw $e;
        } 
    }
    
    public function save(\Doctrine_Connection $conn = null) {
        if (!$this->getEiCampaignGraphType()->getAutomate()):
            $this->setEiScenario(null);
            $this->setEiDataSet(null);
        else:
            $this->setFilename(null);
            $this->setMimeType(null);
            $this->setPath(null);
        endif;
        
         parent::save($conn);
         return true;
    }

    /* Recupération du fils d'un noeud de campagne .
     * On l'utilise dans un premier temps pour representer une campagne comme succession d'action.
     */

    public static function getCampaignGraphChild(EiCampaignGraph $ei_campaignGraph, Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        $child = $conn->createQuery()->from('EiCampaignGraph cg')
                ->leftJoin('cg.graphCampaignChildren cp')
                ->leftJoin('cg.EiCampaignGraphType gt')
                ->leftJoin('cg.EiScenario s')
                ->leftJoin('cg.EiDataSet ds')
                ->where('cp.parent_id =  ' . $ei_campaignGraph->getId())
                ->execute();
        if (count($child) > 0)
            return $child->getFirst();
        return null;
    }

    //Récupération de la campagne d'un noeud de campagne
    public function getCampaign($project_id = null, $project_ref = null) {
        return $this->getTable()->getCampaign($this->getCampaignId(), $project_id, $project_ref);
    }

    //Suppréssion d'un noeud dans la liste chainée des éléments d'une campagne de tests .
    public function deleteNode(Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        $linesInvolvedNode = Doctrine_Core::getTable('EiCampaignGraphHasGraph')->findLinesInvolvedNode($this->getId(), $conn);

        try {
            $conn->beginTransaction(); 
            if (count($linesInvolvedNode) == 1):
                $conn->createQuery()->delete()->from('EiCampaignGraphHasGraph')
                        ->where('child_id = ' . $this->getId())
                        ->orWhere('parent_id = ' . $this->getId())
                        ->execute(); 
            endif;

            if (count($linesInvolvedNode) == 2):

                foreach ($linesInvolvedNode as $line):
                    if ($line['parent_id'] == $this->getId())
                        $new_child_id = $line['child_id'];
                    if ($line['child_id'] == $this->getId())
                        $new_parent_id = $line['parent_id'];
                endforeach;
                //echo $new_parent_id . '/' . $new_child_id;
                $d = date('Y-m-d H:i:s');
                //On recrée la relation car il ya un trou dans la liste chainée
                $values="(" . $new_parent_id . "," . $new_child_id . "," . $this->getCampaignId() . ",'" . $d . "','" . $d . "')";
                $conn->execute("INSERT INTO ei_campaign_graph_has_graph 
                            (parent_id, child_id, campaign_id,created_at,updated_at) 
                             VALUES " . $values . " ");
                $conn->createQuery()->delete()->from('EiCampaignGraphHasGraph')
                        ->where('child_id = ' . $this->getId())
                        ->orWhere('parent_id = ' . $this->getId())
                        ->execute();
                 
            endif;
            
            $this->delete ($conn);
            
            //Si le noued est de type 'Manual action ' , 
            // on supprime s'il existe l'attachment
            if(!$this->getEiCampaignGraphType()->getAutomate() && $this->getPath() && $this->getPath()!=null && file_exists(sfConfig::get('sf_upload_dir').$this->getPath())):
                unlink(sfConfig::get('sf_upload_dir').$this->getPath());
            endif;  
            
            $conn->commit();
        } catch (Exception $e) {
            $conn->rollback();
            throw $e;
        } 
    }

}
