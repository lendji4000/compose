<?php

/**
 * EiVersionStructureTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EiVersionStructureTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object EiVersionStructureTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('EiVersionStructure');
    }

    /**
     * Retourne le nombre de fonctions appartenant directement Ã  un block.
     *
     * @param $ei_version_structure_id
     * @return mixed
     */
    public function getNbFonctions($ei_version_structure_id){

        $q = Doctrine_Query::create()->select('count(version.id)')
            ->from('EiVersionStructure version')
            ->where('version.ei_version_structure_parent_id = ?', $ei_version_structure_id)
            ->andWhere('version.type = ?', EiVersionStructure::$TYPE_FONCTION);

        $count = $q->fetchOne(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR);

        return $count;
    }

    /**
     * @param $ei_version_id
     * @return EiVersionStructure
     */
    public function getFirstFunction($ei_version_id){
        $query = Doctrine_Query::create()
            ->from("EiVersionStructure vs")
            ->where("vs.ei_version_id = ?", $ei_version_id)
            ->andWhere("vs.ei_fonction_id IS NOT NULL")
            ->orderBy("vs.lft ASC")
            ->limit(1);

        return $query->fetchOne();
    }

    public function getRootStructure($ei_scenario_id, $profile_ref, $profile_id)
    {
        /** @var EiProfilScenarioTable $profilScenarioTable */
        $profilScenarioTable = Doctrine_Core::getTable("EiProfilScenario");

        /** @var EiProfilScenario $profilScenario */
        $profilScenario = $profilScenarioTable->findOneByProfileRefAndProfileIdAndEiScenarioId($profile_ref, $profile_id, $ei_scenario_id);

        return self::getInstance()->findOneByEiVersionIdAndLevel($profilScenario->getEiVersionId(), 0);
    }

    public function getEiVersionStructuresAtLevelQuery($ei_version_id, $level) {
        return Doctrine_Query::create()->select('version.*')
                        ->from('EiVersionStructure version')
                        ->where('version.level = ?', $level)
                        ->andWhere('version.ei_version_id = ?', $ei_version_id);
    }

    public function getEiVersionStructuresAtLevel($ei_version_id, $ei_version_id, $level) {
        $query = Doctrine_Query::create()->select('version.*')
                ->from('EiVersionStructure version')
                ->where('version.level = ?', $level)
                ->andWhere('version.ei_version_id = ?', $ei_version_id);

        return $this->executeGetEiVersionStructureAtQuery($query, $ei_version_id);
    }

    public function getEiVersionStructureRoot($ei_version_id) {
        $res = $this->getEiVersionStructuresAtLevelQuery($ei_version_id, 0)
                ->execute();

        if ($res)
            $res = $res->getFirst();

        return $res;
    }

    public function getEiVersionStructureRootId($ei_version_id) {
        $query = $this->getEiVersionStructuresAtLevelQuery($ei_version_id, 0);
        $query->addSelect('version.id');

        $res = $query->execute();

        if ($res)
            $res = $res->getFirst();

        return $res;
    }

    private function executeGetEiVersionStructureAtQuery($query, $ei_version_id) {
        $treeObj = self::getInstance()->getTree();
        $treeObj->setBaseQuery($query);
        $tree = $treeObj->fetchTree(array('root_id' => $ei_version_id));

        $treeObj->resetBaseQuery();

        return $tree;
    }

    /**
     * @param $scenario_structure_id
     * @param array $types
     */
    public function getEiVersionStructureFromTypes($scenario_structure_id, array $types){
        /** @var Doctrine_Query $query */
        $query = self::getInstance()
            ->createQuery("eiv_str")
        ;

        $query
            ->innerJoin("eiv_str.EiVersion")
            ->where("eiv_str.id = ?", $scenario_structure_id)
            ->andWhereIn("eiv_str.type", $types)
            ->orderBy("eiv_str.lft")
        ;

        return $query->execute();
    }

    public function getEiVersionStructureParentFromPosition($scenario, $position){
        /** @var Doctrine_Query $query */
        $query = self::getInstance()
            ->createQuery("eiv_str")
        ;

        $query
            ->innerJoin("eiv_str.EiVersion")
            ->where("EiVersion.ei_scenario_id = ?", $scenario)
            ->andWhere("eiv_str.type = ?", EiVersionStructure::$TYPE_FONCTION)
            ->orderBy("eiv_str.lft")
            ->offset($position-1)
            ->limit(1)
        ;

        /** @var EiVersionStructure $node */
        $node = $query->execute()->getFirst();

        return $node;
    }

    /**
     * Retourne les enfants de noeud ei_version_structure_id
     * @param type $ei_version_structure_id
     * @return type
     */
    public function getEiVersionStructureChildren($ei_version_structure_id, array $types = array())
    {
        $types = count($types) == 0 ? array(EiVersionStructure::$TYPE_FOREACH, EiVersionStructure::$TYPE_BLOCK, EiVersionStructure::$TYPE_FONCTION):$types;

        $query = $this->createQuery('eiv_str')
                ->leftJoin('eiv_str.EiFonction')
                ->where('eiv_str.ei_version_structure_parent_id = ?', $ei_version_structure_id)
                ->andWhereIn("eiv_str.type", $types)
                ->orderBy('eiv_str.lft');

        return $query->execute();
    }

    /**
     * @param $ei_version_id
     * @param array $types
     * @return Doctrine_Query
     */
    public function getEiVersionTreeQuery($ei_version_id, array $types = array()){
        $types = count($types) == 0 ? EiVersionStructure::getAllTypes():$types;

        return Doctrine_Query::create()->select('version.*')
            ->from('EiVersionStructure version')
            ->andWhere('version.ei_version_id = ?', $ei_version_id)
            ->andWhereIn("version.type", $types)
            ->orderBy('version.lft');
    }

    /**
     * @param $ei_version_id
     * @param array $types
     * @return array
     */
    public function getEiVersionTreeArray($ei_version_id, array $types = array()) {
        return $this->getEiVersionTreeQuery($ei_version_id, $types)->fetchArray();
    }

    /**
     * @param $ei_version_id
     * @param array $types
     * @return Doctrine_Collection
     */
    public function getEiVersionTree($ei_version_id, array $types = array()) {
        return $this->getEiVersionTreeQuery($ei_version_id, $types)->execute();
    }

    public function getEiVersionStructuresToMove($ei_version_structure_id) {
        return self::getInstance()->createQuery('str')
                        ->addWhere('str.type = ?', 'EiBlock')
                        ->addWhere('str.id = ?', $ei_version_structure_id)
                        ->orderBy('str.ei_version_id')
                        ->execute();
    }

    /**
     * @param $root_id
     * @param array $types
     * @return Doctrine_Collection
     */
    public function getEiBlocksTree($root_id, array $types)
    {
        $query = $this->createQuery("tree")
            ->where("tree.root_id = ?", $root_id)
            ->andWhereIn("tree.type", $types)
            ->addOrderBy("tree.root_id, tree.lft")
        ;

        return $query->execute();
    }

    /**
     * @param $ei_block_id
     * @param array $types
     * @return mixed
     */
    public function getEiBlocksWithParams($ei_block_id, array $types = array())
    {
        $types = count($types) == 0 ? array(EiVersionStructure::$TYPE_FOREACH, EiVersionStructure::$TYPE_BLOCK):$types;
        $ei_blocks = $this->getEiBlocksTree($ei_block_id, $types);

        $ei_params = Doctrine_Core::getTable('EiBlockParam')
            ->getTree()->fetchTree(array('root_id' => $ei_block_id));


        $j = 0;
        $res = "";
        $count = count($ei_params);

        if($ei_params)
            foreach($ei_blocks as $i => $block){
                while($j <= $count && $ei_params[$j]->getEiVersionStructureParentId() == $block->getId()){
                    $block->addEiBlockParam($ei_params[$j]);
                    $res .= $ei_params[$j]->getName();
                    $j++;
                }
            }

        return $ei_blocks;

    }

    /**
     * @param $parent_id
     * @param array $types
     * @return Doctrine_Collection
     */
    public function getEiBlocksChildrenQuery($parent_id, array $types)
    {
        $query = $this->createQuery("tree")
            ->where("tree.ei_version_structure_parent_id = ?", $parent_id)
            ->andWhereIn("tree.type", $types)
            ->addOrderBy("tree.lft")
        ;

        return $query->execute();
    }

    /**
     * @param $parent_id
     * @param array $types
     * @return Doctrine_Collection
     */
    public function findBlockQuery($block_id, array $types)
    {
        $query = $this->createQuery("tree")
            ->where("tree.id = ?", $block_id)
            ->andWhereIn("tree.type", $types)
            ->addOrderBy("tree.lft")
        ;

        return $query->execute()->getFirst();
    }

    /**
     * @param $ei_block_id
     * @param array $types
     * @return mixed
     */
    public function getEiBlocksChildren($ei_block_id, array $types = array()) {

        $types = count($types) == 0 ? array(EiVersionStructure::$TYPE_FOREACH, EiVersionStructure::$TYPE_BLOCK):$types;

        return $this->getEiBlocksChildrenQuery($ei_block_id, $types);

    }

    /**
     * @param $block_id
     * @param array $types
     */
    public function findBlock($block_id, array $types = array())
    {
        $types = count($types) == 0 ? array(EiVersionStructure::$TYPE_FOREACH, EiVersionStructure::$TYPE_BLOCK):$types;

        return $this->findBlockQuery($block_id, $types);
    }

    /**
     * @param $versionId
     * @param $lft
     * @param $rgt
     */
    public function isInEiLoop($versionId, $lft, $rgt){
        $version = Doctrine_Query::create()->select('version.type')
            ->from('EiVersionStructure version')
            ->andWhere('version.ei_version_id = ?', $versionId)
            ->andWhere('version.lft < ?', $lft)
            ->andWhere('version.rgt > ?', $rgt)
            ->andWhereIn('version.type', EiVersionStructure::getLoopTypes())
            ->orderBy('version.lft DESC')
            ->limit(1)
            ->fetchOne()
        ;

        return !is_bool($version) && $version instanceof EiVersionStructure && $version->isEiLoop() ? $version:false;
    }

    /**
     * @param $versionId
     * @param $rgt
     * @param $level
     * @return bool
     */
    public function isLast($versionId, $rgt, $level){
        $lastElement = Doctrine_Query::create()
            ->from('EiVersionStructure version')
            ->andWhere('version.ei_version_id = ?', $versionId)
            ->andWhereIn('version.type', EiVersionStructure::getBlockTypes())
            ->andWhere("version.level = ?", $level)
            ->orderBy('version.lft DESC')
            ->limit(1)
            ->fetchOne()
        ;

        return $lastElement != null && $lastElement->getRgt() == $rgt ? true:false;
    }

    /**
     * @param $structure
     * @param $versionId
     * @param Doctrine_Connection $conn
     * @return int
     */
    public function updateVersionStructureFromTab($structure, $versionId, Doctrine_Connection $conn = null)
    {
        if($conn==null) $conn = Doctrine_Manager::connection();

        $stmt = $conn->prepare('UPDATE ei_version_structure SET lft = :lft, rgt = :rgt WHERE ei_version_id = :version_id AND id = :id');

        foreach( $structure as $structureElt ){
            $stmt->bindValue('version_id', $versionId);
            $stmt->bindValue('id', $structureElt["id"]);
            $stmt->bindValue('lft', $structureElt['lft']);
            $stmt->bindValue('rgt', $structureElt['rgt']);

            $stmt->execute(array());
        }

        return 1;
    }

}