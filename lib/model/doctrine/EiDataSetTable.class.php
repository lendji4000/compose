<?php

/**
 * EiDataSetTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EiDataSetTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object EiDataSetTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('EiDataSet');
    }

    /**
     * Permet de récupérer un jeu de données à partir de son identifiant.
     * Soit, on renseigne le fait que l'on souhaite récupérer la version courante du template.
     * Soit, on ne renseigne pas cette information et on récupère le jeu de données original.
     *
     * @param $id
     * @param bool $isTemplate
     *
     * @return EiDataSet
     */
    public function getDataSet($id, $templateVersion = false){
        /** @var EiDataSet $dataSet Récupération du jeu de données passé en paramètre. */
        $dataSet = $this->find($id);

        // Si on ne souhaite pas récupérer le data set par le biais du template mais une version précise.
        if( !$templateVersion ){
            return $dataSet;
        }
        // Si on souhaite récupérer la version courante du template.
        else{
            /** @var EiDataSetTemplate $template */
            $template = $dataSet->getEiDataSetTemplate();

            return $template->getEiDataSet();
        }
    }
    
    /* Récupération du scénario d'un dataset */
    
    public function getDataSetScenario(EiDataSet $ei_data_set){
        $ei_node=$ei_data_set->getEiNode();
        $data_set_scenario=null;
        $k=0;

        while($data_set_scenario==null && $k<1000):
            $ei_node=  Doctrine_Core::getTable('EiNode')->findOneById($ei_node->getRootId());

            if($ei_node->getType()=='EiScenario'):
                $data_set_scenario=Doctrine_Core::getTable('EiScenario')->findOneById($ei_node->getObjId());
            endif;
            $k++; //Incrémentation de k pour éviter des boucles infinies
        endwhile;
        return $data_set_scenario;
    }

    public function getDataSetObjectById(array $parameters){
        $dataset = self::getInstance()->createQuery('ds')
            ->where('ds.id = ?', $parameters["ei_data_set_id"])
            ->orderBy('ds.id DESC')
            ->fetchOne()
        ;

        if( $dataset === null ){
            throw new sfError404Exception("Data set not found");
        }

        return $dataset;
    }
    
    /* Vérifier le matching entre un scénario et un jeu de données.
     *  (est-ce que le jeu de données est un objet du scenario ?) */
    public function verifyMatchingBetweenJddAndScenario( EiDataSet $ei_data_set,EiScenario $ei_scenario){
        $data_set_scenario=$this->getDataSetScenario($ei_data_set);
        if($data_set_scenario==null) return false;
        if($data_set_scenario->getId()==$ei_scenario->getId()) return true;
        return false;
    }

    /**
     * @param $eiScenarioId
     * @param $dataSetId
     * @return Doctrine_Adapter_Statement|PDOStatement
     */
    public function getAllTree($eiScenarioId, $dataSetId){
//        return Doctrine_Query::create()
//            ->select("dl.*, node.type, node.lft, node.rgt, node.name, node.id, node.slug, node.root_id")
//            ->from("EiDataLine dl")
//            ->innerJoin("dl.EiDataSetStructure node")
//            ->where('node.ei_scenario_id = ?', $eiScenarioId)
//            ->andWhere('dl.ei_data_set_id = ?', $dataSetId)
//            ->orderBy("dl.id, node.lft")
//            ;

        $sql = "
        SELECT e.id AS id, e.ei_data_set_id AS ei_data_set_id, e.ei_data_line_parent_id AS ei_data_line_parent_id, e.ei_data_set_structure_id AS ei_data_set_structure_id,
        e.valeur AS valeur, e.created_at AS created_at, e.updated_at AS updated_at, e.root_id AS root_id, e.lft AS lft, e.rgt AS rgt, e.level AS level,
        e2.id AS dss_id, e2.type AS dss_type, e2.lft AS dss_lft, e2.rgt AS dss_rgt, e2.name AS dss_name, e2.slug AS dss_slug, e2.root_id AS dss_root_id
        FROM ei_data_line e
        INNER JOIN ei_data_set_structure e2 ON e.ei_data_set_structure_id = e2.id
        WHERE (e2.ei_scenario_id = ".$eiScenarioId." AND e.ei_data_set_id = ".$dataSetId.") ORDER BY e.id, e2.lft;
        ";

        return Doctrine_Manager::connection()->execute($sql);
    }

    /**
     * @param int $dataSetId
     */
    public function getCountOfLines($dataSetId = 0){
        $sql = "SELECT COUNT(*) as count FROM ei_data_line WHERE ei_data_set_id = " . $dataSetId;

        $elt = Doctrine_Manager::connection()->execute($sql)->fetch();

        return $elt["count"];
    }


    /**
     * TODO: Améliorer la gestion des memory_limit.
     *
     * @param $eiScenarioId
     * @param $dataSetId
     * @return array
     */
    public function getTreeArray($eiScenarioId, $dataSetId){
        $memoryLimit = ini_get("memory_limit");
        ini_set("memory_limit", "-1");
        $res = $this->getAllTree($eiScenarioId, $dataSetId);

        $res = $res->fetchAll();
        ini_set("memory_limit", $memoryLimit);

        return $res;
    }

    /**
     * @param $eiScenarioId
     * @param $dataSetId
     * @return array
     */
    public function getTreeArrayForITree($eiScenarioId, $dataSetId){
        $structures = $this->getTreeArray($eiScenarioId, $dataSetId);
        $nodes = array();
        $parents = array();
        try{
            foreach( $structures as $structure ){
                $type = $structure["dss_type"];
                $idStr = $structure["dss_id"];
                $rootStr = $structure["dss_root_id"];
                $isRoot = $rootStr == $idStr;

                if( $type == EiDataSetStructure::$TYPE_NODE ){
                    for( $cpt = $structure["lft"] + 1; $cpt <= $structure["rgt"]; $cpt++ ){
                        $parents[$cpt] = $structure["id"];
                    }
                }

                $nodes[] = array(
                    "id" => $structure["id"],
                    "root_id" => $structure["root_id"],
                    "parent_id" => isset($parents[$structure["lft"]]) ? $parents[$structure["lft"]]:"",
                    "name" => $structure["dss_name"],
                    "slug" => $structure["dss_slug"],
                    "type" => ($isRoot) ? "root":($type == "LeafDataSet" ? "attr":"node"),
                    "lft" => $structure["dss_lft"],
                    "rgt" => $structure["dss_rgt"]
                );

                if( $type == EiDataSetStructure::$TYPE_LEAF ){
                    $nodes[count($nodes) - 1]["id"] .= "-attr";

                    $nodes[] = array(
                        "id" => $structure["id"],
                        "root_id" => $structure["root_id"],
                        "parent_id" => $structure["id"] . "-attr",
                        "name" => $structure["valeur"],
                        "slug" => $structure["valeur"],
                        "type" => "leaf",
                        "lft" => $structure["dss_lft"],
                        "rgt" => $structure["dss_rgt"]
                    );
                }
            }
        }
        catch( Exception $exc ){
            $nodes = array();
        }

        return $nodes;
    }
}