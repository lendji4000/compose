<?php

/**
 * EiTicket
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    kalifastRobot
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class EiTicket extends BaseEiTicket
{
    //Récupération des bugs d'un ticket 
    public function getEiSubjects(){
        return Doctrine_core::getTable('EiSubject')->findByPackageRefAndPackageId(
                $this->getTicketRef(),$this->getTicketId());
    }
    //Récupération des noeuds de fonction pour un ticket (package)
    public function getNodesFunctionsForTicket(EiProjet $ei_project) {        
        return Doctrine_Core::getTable('EiTree')->createQuery('t')
                        ->where('KalFunction.function_id=t.obj_id And KalFunction.function_ref=t.ref_obj')
                        ->andWhere('EiScript.function_id=KalFunction.function_id And EiScript.function_ref=KalFunction.function_ref')
                        ->andWhere('EiTicket.ticket_id=EiScript.ticket_id And EiTicket.ticket_ref=EiScript.ticket_ref')
                        ->andWhere('EiTicket.ticket_id=? And EiTicket.ticket_ref=? And KalFunction.project_id=? And KalFunction.project_ref=? And t.type=? ', 
                                array($this->getTicketId(), $this->getTicketRef(), $ei_project->getProjectId(), $ei_project->getRefId(), 'Function'))
                 ->execute();
    }
    //Récupération des relations script-profil associées au ticket
    public function getAssociatedProfiles(Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        return $this->getTable()->getAssociatedProfiles($this->getTicketId(),$this->getTicketRef(),$conn);
    }
    // Récupération des relations version-profil sur un scnéario par rapport à un package spécifique
    public function getAssociatedProfilesForScenario(EiScenario $ei_scenario=null, Doctrine_Connection $conn = null){
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        return $this->getTable()->getAssociatedProfilesForScenario($this->getTicketId(),$this->getTicketRef(),$ei_scenario,$conn);
    }
    
    public static function createDistantPackage(EiProjet $ei_project, $data, Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        try {
            $conn->beginTransaction(); //Début de la transaction
            $result_file = new DOMDocument();
            //Appel du webservice  
             
            $result_update = MyFunction::loadResultOfWebServiceByPostJson(
                            MyFunction::getPrefixPath(null) . "serviceweb/project/package/create.json", array('project_id' => $ei_project->getProjectId(),
                        'project_ref' => $ei_project->getRefId(), 
                        'data' => $data)); 
            //Récupération du ticket pour traitement
            $array_result= json_decode(html_entity_decode($result_update) ,true);     //throw new Exception(html_entity_decode($result_update));        
            //Récupération du projet pour traitement
            if (count($array_result) == 0)  return false;
            
            if (array_key_exists("error", $array_result) ):
                return false;
            endif;
            if (!$array_result[0]):
                return false;
            endif; 
            
            EiTicket::reload($array_result,$conn);  
                $conn->commit();
                
                return array(
                    'package_id' => $array_result[0]['t_id'],
                    'package_ref' => $array_result[0]['t_ref']); 
                
        } catch (Exception $e) {
            $conn->rollback();
            throw $e;
            return false;
            
        }
    }
     //Rechargement d'un ticket
    public static function reload($array_result,$conn){      
        if(count($array_result)>0): //var_dump($array_result);
            Doctrine_Core::getTable("EiTicket")->insertJsonFunction($array_result[0],$conn); //Chargement du ticket
            Doctrine_Core::getTable("EiUserTicket")->insertJsonFunction($array_result[0],$conn); //Chargement de la liaison user-ticket   
            /* Mise à jour du delta projet */ 
            $conn->execute("update ei_projet set version_courante=".$array_result[0]['p_vers']." , version_kalifast=".$array_result[0]['p_vers']." , updated_at='".$array_result[0]['p_updat']."'  
                    where project_id=".$array_result[0]['p_id']." and ref_id=".$array_result[0]['p_ref']); 
        endif;
    }
    
    /* Migration d'un scénario dur un profil donnée */
    public function migrateBugScenario(EiProjet $ei_project,EiProfil $ei_profile, EiScenario $ei_scenario,sfGuardUser $guardUser){
        return $this->getTable()->migrateBugScenario($this,$ei_project,$ei_profile,$ei_scenario,$guardUser);
    }
    public function migrateBugFunction(EiProjet $ei_project,EiProfil $ei_profile, KalFunction $ei_function,sfGuardUser $guardUser){
        return $this->getTable()->migrateBugFunction($this,$ei_project,$ei_profile,$ei_function,$guardUser);
    }
    /* Migration de plusieurs scénarios d'un coup */
    public function MigrateManyScenarios(EiProjet $ei_project,EiProfil $ei_profile,sfGuardUser $guardUser,$tab){
        return $this->getTable()->MigrateManyScenarios($this,$ei_project,$ei_profile,$guardUser,$tab);
        
    }
    public function MigrateManyFunctions(EiProjet $ei_project,EiProfil $ei_profile,sfGuardUser $guardUser,$tab){
        return $this->getTable()->MigrateManyFunctions($this,$ei_project,$ei_profile,$guardUser,$tab);
        
    }

}
