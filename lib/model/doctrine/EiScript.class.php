<?php

/**
 * EiScript
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    kalifastRobot
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class EiScript extends BaseEiScript {

    /**
     * Returns an instance of this class.
     *
     * @return object EiScriptTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('EiScript');
    }

    /*
     * Récupération des commandes d'un script
     */

    public function getCmds(Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        return $conn->getTable('EiFunctionHasCommande')->getCmdsByScript($this->getScriptId());
    }

    /*
     * Traitement de l'envoi en post du fichier json pour mise à jour des commandes
     */

    public static function loadResultOfWebServiceForMajScript($url, $params) {
        if ($url == null)
            return null;
        $cobj = curl_init($url); // créer une nouvelle session cURL
        if ($cobj) {
            curl_setopt_array($cobj, array(
                CURLOPT_RETURNTRANSFER => 1,
                CURLOPT_URL => $url,
                CURLOPT_USERAGENT => 'Codular Sample cURL Request',
                CURLOPT_POST => 1,
                CURLOPT_POSTFIELDS => $params
            ));


            $xml = curl_exec($cobj); //execution de la requete curl 
            curl_close($cobj); //liberation des ressources 
            $xmlDoc = new DOMDocument("1.0", "utf-8");
            $xmlDoc->loadXML($xml);
            return $xmlDoc->saveXML();
        }
        return null;
    }

    /* Méthode permettant de changer le package d'un script */

    public function changeInterventionInMigrationLine(EiTicket $ei_ticket, Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        try {
            $conn->beginTransaction(); //Début de la transaction 
            //Appel du webservice  

            $result_service = MyFunction::loadResultOfWebServiceByPostJson(MyFunction::getPrefixPath(null) . "/serviceweb/updateScriptPackage.json", array('ticket_id' => $ei_ticket->getTicketId(),
                        'ticket_ref' => $ei_ticket->getTicketRef(),
                        'script_id' => $this->getScriptId()));
            //Récupération du ticket pour traitement
            $array_result = json_decode(html_entity_decode($result_service), true);     //throw new Exception(html_entity_decode($result_update));        
            //Récupération du projet pour traitement
            if (count($array_result) == 0):
                return array("success" => false, "message" => "Error on transaction");
            endif;

            if (array_key_exists("error", $array_result)):
                return array("success" => false, "message" => $array_result["error"]);
            endif;
            if (!$array_result[0]):
                return array("success" => false, "message" => "Empty result content");
            endif;

            self::reload($array_result, $conn);
            $conn->commit();

            return array("success" => true, "message" => "Transaction maded successfully");
        } catch (Exception $e) {
            $conn->rollback();
            throw $e;
            return false;
        }
    }

    //Rechargement d'un ticket
    public static function reload($array_result, $conn) {
        if (count($array_result) > 0): 
            Doctrine_Core::getTable("EiScript")->insertJsonFunction($array_result[0], $conn); //Chargement du script
            /*Rechargement des commandes du script */
            $cmdsIds=array(); $scriptVersionIds=array();
            $conn->execute("delete from ei_function_has_commande where script_id=".$array_result[0]['s_id']); 
            /*Suppression des relations script- profil inexistant sur la plate forme de rédaction des scripts (script.kalifast.com)*/  
            $conn->execute("delete FROM  ei_script_version  WHERE  script_id=".$array_result[0]['s_id']);
            
            foreach($array_result as $res): 
                if(isset($res['fc_id']) && !in_array($res['fc_id'], $cmdsIds)) :
                    Doctrine_Core::getTable("EiFunctionHasCommande")->insertJsonFunction($res,$conn); //Chargement des commandes  
                    $cmdsIds[]=$res['fc_id'];                    
                endif;    
                
                 /*Suppression des relations script- profil inexistant sur la plate forme de rédaction des scripts (script.kalifast.com)*/  
                if(!in_array($res['s_id'].$res['sv_pid'].$res['sv_pref'], $scriptVersionIds)) : 
                $conn->execute("delete FROM  ei_script_version  WHERE  script_id In (select script_id from ei_script where 
                    function_id=".$array_result[0]['f_id']." and function_ref=".$array_result[0]['f_ref'].") and profile_id=".$res['sv_pid']." and profile_ref=".$res['sv_pref']);  
                    $scriptVersionIds[]=$res['s_id'].$res['sv_pid'].$res['sv_pref'];
                endif;
                $scriptVersionIds=array();
                /* Chargement des script-version */
                if(!in_array($res['s_id'].$res['sv_pid'].$res['sv_pref'], $scriptVersionIds)) : 
                    Doctrine_Core::getTable("EiScriptVersion")->insertJsonFunction($res,$conn); //Chargement des relations script-profil  
                    $scriptVersionIds[]=$res['s_id'].$res['sv_pid'].$res['sv_pref'];
                endif;
            endforeach;
             
            Doctrine_Core::getTable("KalFunction")->insertJsonFunction($array_result[0], $conn);    //Chargement de la fonction
            /* Mise à jour du delta projet */
            $conn->execute("update ei_projet set version_courante=" . $array_result[0]['p_vers'] . " , version_kalifast=" . $array_result[0]['p_vers'] . " , updated_at='" . $array_result[0]['p_updat'] . "'  
                    where project_id=" . $array_result[0]['p_id'] . " and ref_id=" . $array_result[0]['p_ref']); 
        endif;
    }

    /*
     * Appel du webservice permettant de mettre à jour un script à partir du json récupéré sur l'IDE sélénium
     */

    public static function getScriptUpdateResult(EiProjet $ei_project, EiProfil $kal_profil, EiTicket $ei_ticket, $json_string, KalFunction $kal_function, EiUser $ei_user, $script_id = 0, Doctrine_Connection $conn = null) {
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        $ei_subject = Doctrine_Core::getTable("EiSubject")->findOneByPackageIdAndPackageRef($ei_ticket->getTicketId(), $ei_ticket->getTicketRef());
        if ($ei_subject == null)
               return array("success" => false, "message" => "Intervention not found ... "); //Intervention non trouvée
            
//Appel du webservice  
        $result_update = MyFunction::loadResultOfWebServiceByPostJson(
                        MyFunction::getPrefixPath(null) .
                        "serviceweb/project/script/update.json", array(
                    'project_id' => $ei_project->getProjectId(),
                    'project_ref' => $ei_project->getRefId(),
                    'ticket_id' => $ei_ticket->getTicketId(),
                    'ticket_ref' => $ei_ticket->getTicketRef(),
                    'profile_id' => $kal_profil->getProfileId(),
                    'profile_ref' => $kal_profil->getProfileRef(),
                    'function_id' => $kal_function->getFunctionId(),
                    'function_ref' => $kal_function->getFunctionRef(),
                    'script_id' => $script_id,
                    'user_id' => $ei_user->getUserId(),
                    'user_ref' => $ei_user->getRefId(),
                    'package_name' => "Package_S" . $ei_subject->getId(),
                    'json_string' => rawurlencode($json_string)));

        //Récupération du projet pour traitement
//        if ($result_update == null) return null;
//        $result_file->loadXML($result_update);
//        $result_file->save('result_update.xml'); /* sauvegarde du fichier pour vérifier le bon fonctionnement du web service */
//        $result_item=$result_file->documentElement;
//        if ($result_item->getElementsByTagName("error")->item(0)):
//            return -1;
//        endif;
//        if ($result_item->getElementsByTagName("process_error")->item(0)):
//            return 0;
//        endif; 
//        if ($result_item->getElementsByTagName("process_ok")->item(0)):
//            return 1;
//        endif; 

        try {
            $conn->beginTransaction();
            //Récupération du ticket pour traitement
            $array_result = json_decode(html_entity_decode($result_update), true);
            //Récupération du projet pour traitement
            if (count($array_result) == 0):
                return array("success" => false, "message" => "Error on transaction");
            endif;

            if (array_key_exists("error", $array_result)):
                return array("success" => false, "message" => $array_result["error"]);
            endif;
            if (array_key_exists("process_error", $array_result)):
                return array("success" => false, "message" => $array_result["process_error"]);
            endif;
            if (!$array_result[0]):
                return array("success" => false, "message" => "Empty result content");
            endif;

            self::reload($array_result, $conn);
            $conn->commit();

            return array("success" => true, "message" => "Transaction maded successfully");
        } catch (Exception $e) {
            throw new Exception($e);
            $conn->rollback(); 
            return array("success" => false, "message" => "Error on reload process ...");
        }
    }

}
