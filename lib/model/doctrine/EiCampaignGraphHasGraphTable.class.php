<?php

/**
 * EiCampaignGraphHasGraphTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EiCampaignGraphHasGraphTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object EiCampaignGraphHasGraphTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('EiCampaignGraphHasGraph');
    }
    
    //Recherche des lignes impliquants un noeud EiCampaignGraph
    public function findLinesInvolvedNode($id,Doctrine_Connection $conn=null){
        if($conn==null) $conn = Doctrine_Manager::connection();
         return $conn->createQuery()->from('EiCampaignGraphHasGraph')
                ->where('child_id = '.$id)
                ->orWhere('parent_id =' .$id)
                ->execute();
    }
    
    //Rangement des steps de campagne dans le bon ordre
    public function updatePosition($ids , $campaign_id){
        if (!is_array($ids))  return null;
        
        
        //On reconstruit les relations de la table graph_has_graph 
        $newStepTab=array();
        $ids=$ids[0];
        if (!is_array($ids))  return null; 
        
        foreach( $ids as $i => $item ):
            if(array_key_exists($i+1 , $ids))
                $newStepTab[]=array($ids[$i],$ids[$i +1]);
        endforeach;
        //var_dump($newStepTab);
        
        if (!is_array($newStepTab))  return null;
        
        $conn = Doctrine_Manager::connection();
        
        try {
            $conn->beginTransaction();
            
            /*On vérifie qu'on est pas en accès concurrent */
            $nb=count(Doctrine_Core::getTable('EiCampaignGraph')->findByCampaignId($campaign_id));
            if($nb!=count($ids))                
                throw new Exception('Concurrent Access. refresh page ...'); ;
            
            $conn->delete($this->getInstance(), array('campaign_id'=>$campaign_id));
            $collection=new Doctrine_Collection($this->getInstance());
            foreach ($newStepTab as $item):
                $newItem=new EiCampaignGraphHasGraph();
                $newItem->setParentId($item[0]);
                $newItem->setChildId($item[1]);
                $newItem->setCampaignId($campaign_id);
                $collection->add($newItem);
            endforeach;
            $collection->save($conn);
             
            $conn->commit(); //  validation globale  de la création
            return 1;
        } catch (Exception $e) {
            $conn->rollback();
            //throw $e('An error occurred while trying to update nodes positions ');
            return -1;
        }
    }
}