<?php

/**
 * EiVersionTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EiVersionTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object EiVersionTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('EiVersion');
    }
    
    public function DecrementPosition($ei_version){
        if($ei_version!=null){
            if($ei_version->incre_position>0){
            Doctrine_Query::create()
              ->update('EiVersion v')
              ->set('v.incre_position', '?' , $ei_version->incre_position - 1)
                    ->where('v.id= ?', $ei_version->id)
              ->execute();
            
        }
        //rangement des fonctions dans l'ordre de position
        Doctrine_Core::getTable("EiFonction")->ordonnerFonctions($ei_version , $ei_version->getEiScenario());
        }
    }
 
    /* Récupération des versions d'un scénarios en réccupérant des éventuels packages liés */
    public function getScenarioVersionsWithPackage(EiScenario $ei_scenario, Doctrine_Connection $conn = null){
        if ($conn == null)
            $conn = Doctrine_Manager::connection();
        $q="( SELECT 
            v.id as v_id, v.libelle as v_libelle, v.description as v_description, v.created_at as v_created_at, v.updated_at as v_updated_at,
            sp.ei_scenario_id as sp_ei_scenario_id, sp.package_id as sp_package_id, sp.package_ref as sp_package_ref, sp.ei_version_id as sp_ei_version_id,
            t.ticket_id as t_ticket_id, t.ticket_ref as t_ticket_ref, t.name  as t_name ,
            s.id as subject_id, s.name as subject_name,s.delivery_id as delivery_id,
            d.name as delivery_name
         FROM ei_version v 
          left join ei_scenario_package  sp on v.id=sp.ei_version_id 
          left join ei_ticket t on t.ticket_id=sp.package_id and t.ticket_ref=sp.package_ref
          left join ei_subject s on s.package_id=t.ticket_id and s.package_ref=t.ticket_ref
          left join ei_delivery d on s.delivery_id=d.id
          Where v.ei_scenario_id =".$ei_scenario->getId()." )";
        return $conn->fetchAll($q);
    }
    public function getVersion(){
       return $this->getInstance()->createQuery('v');
    }
    
    public function getProfils($ei_version_id,$ei_scenario_id){
        if($ei_version_id==null || $ei_scenario_id==null) return null;
        $q=Doctrine_Query::create()
              ->from('EiProfilScenario pf')
              ->where('pf.ei_scenario_id=? And pf.ei_version_id=? ', array($ei_scenario_id,$ei_version_id))
              ->execute();
        if($q->getFirst()) return $q;
        return null;

    }

    public function getVersionByCriteria ($q,$ei_version_id , $ei_scenario_id , $libelle,$created_at ,$updated_at){
         // si aucune fonction n'existe on n retourne rien

        if( $q->execute()->getFirst()){
            //il existe des fonctions dans la base

            $q=$this->getVersion();
            //fonctions d'une version précise
            if($ei_version_id !=null){
                $q=$q->andWhere('v.ei_version_id = ?', $ei_version_id);
            }

            //fonctions d'un scénario spécifique
            if($ei_scenario_id !=null){

                $q=$q->andWhere('v.ei_scenario_id = ?', $ei_scenario_id);
            }

            //fonctions referencant une fonction kalifast donnée
            if($libelle !=null){
                $q=$q->andWhere('v.libelle LIKE ?', '%'.$libelle.'%');
            }
            //fonctions créées à une date donnée
            if($created_at !=null){
                $q=$q->andWhere('v.created_at = ?', $created_at);
            }

            //fonctions par date de mise à jour
            if($updated_at !=null){
                $q=$q->andWhere('v.updated_at= ?', $updated_at);
            }
            // retour de la requete avec tri sur la date de creation
            $q=$q->orderBy('v.created_at');
            return $q;
        }
        return null;
    }
    public function searchVersion($tab){
        $ei_version_id==null; $ei_scenario_id==null; $libelle==null; $created_at==null; $updated_at==null;
        //recuperation des paramètres
        if($tab['ei_version_id']!=null){ //recuperation de la version
            $ei_version_id=$tab['ei_version_id'];
        }
        if($tab['ei_scenario_id']!=null){ //recuperation du scenario
            $ei_scenario_id=$tab['ei_scenario_id'];
        }
        if($tab['libelle']!=null){ //recuperation du libelle
            $libelle=$tab['libelle'];
        }
        if($tab['created_at']!=null){ //recuperation de la date de creation
            $created_at=$tab['created_at'];
        }
        if($tab['updated_at']!=null){ //recuperation de la date de derniere mise à jour
            $updated_atn=$tab['updated_at'];
        }
        return $this->getVersionByCriteria($this->getVersion(), $ei_version_id, $ei_scenario_id, $libelle, $created_at, $updated_at);
    }
}