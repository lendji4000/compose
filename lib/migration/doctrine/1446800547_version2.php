<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Version2 extends Doctrine_Migration_Base
{
    public function up()
    {
        $this->createForeignKey('ei_device', 'ei_device_device_type_id_ei_device_type_id', array(
             'name' => 'ei_device_device_type_id_ei_device_type_id',
             'local' => 'device_type_id',
             'foreign' => 'id',
             'foreignTable' => 'ei_device_type',
             'onUpdate' => '',
             'onDelete' => 'CASCADE',
             ));
        $this->createForeignKey('ei_device_driver', 'ei_device_driver_device_id_ei_device_id', array(
             'name' => 'ei_device_driver_device_id_ei_device_id',
             'local' => 'device_id',
             'foreign' => 'id',
             'foreignTable' => 'ei_device',
             'onUpdate' => '',
             'onDelete' => 'CASCADE',
             ));
        $this->createForeignKey('ei_device_driver', 'ei_device_driver_driver_type_id_ei_driver_type_id', array(
             'name' => 'ei_device_driver_driver_type_id_ei_driver_type_id',
             'local' => 'driver_type_id',
             'foreign' => 'id',
             'foreignTable' => 'ei_driver_type',
             'onUpdate' => '',
             'onDelete' => 'CASCADE',
             ));
        $this->createForeignKey('ei_device_user', 'ei_device_user_device_id_ei_device_id', array(
             'name' => 'ei_device_user_device_id_ei_device_id',
             'local' => 'device_id',
             'foreign' => 'id',
             'foreignTable' => 'ei_device',
             'onUpdate' => '',
             'onDelete' => 'CASCADE',
             ));
        $this->createForeignKey('ei_device_user', 'edei', array(
             'name' => 'edei',
             'local' => 'device_user_visibility_id',
             'foreign' => 'id',
             'foreignTable' => 'ei_device_user_visibility',
             'onUpdate' => '',
             'onDelete' => 'CASCADE',
             ));
        $this->createForeignKey('ei_device_user', 'ei_device_user_owner_sf_guard_user_id', array(
             'name' => 'ei_device_user_owner_sf_guard_user_id',
             'local' => 'owner',
             'foreign' => 'id',
             'foreignTable' => 'sf_guard_user',
             'onUpdate' => '',
             'onDelete' => 'CASCADE',
             ));
        $this->createForeignKey('ei_driver_browser', 'ei_driver_browser_device_driver_id_ei_device_driver_id', array(
             'name' => 'ei_driver_browser_device_driver_id_ei_device_driver_id',
             'local' => 'device_driver_id',
             'foreign' => 'id',
             'foreignTable' => 'ei_device_driver',
             'onUpdate' => '',
             'onDelete' => 'CASCADE',
             ));
        $this->createForeignKey('ei_driver_browser', 'ei_driver_browser_browser_type_id_ei_browser_type_id', array(
             'name' => 'ei_driver_browser_browser_type_id_ei_browser_type_id',
             'local' => 'browser_type_id',
             'foreign' => 'id',
             'foreignTable' => 'ei_browser_type',
             'onUpdate' => '',
             'onDelete' => 'CASCADE',
             ));
        $this->createForeignKey('ei_execution_stack', 'ei_execution_stack_device_id_ei_device_id', array(
             'name' => 'ei_execution_stack_device_id_ei_device_id',
             'local' => 'device_id',
             'foreign' => 'id',
             'foreignTable' => 'ei_device',
             'onUpdate' => '',
             'onDelete' => 'CASCADE',
             ));
        $this->addIndex('ei_device', 'ei_device_device_type_id', array(
             'fields' => 
             array(
              0 => 'device_type_id',
             ),
             ));
        $this->addIndex('ei_device_driver', 'ei_device_driver_device_id', array(
             'fields' => 
             array(
              0 => 'device_id',
             ),
             ));
        $this->addIndex('ei_device_driver', 'ei_device_driver_driver_type_id', array(
             'fields' => 
             array(
              0 => 'driver_type_id',
             ),
             ));
        $this->addIndex('ei_device_user', 'ei_device_user_device_id', array(
             'fields' => 
             array(
              0 => 'device_id',
             ),
             ));
        $this->addIndex('ei_device_user', 'ei_device_user_device_user_visibility_id', array(
             'fields' => 
             array(
              0 => 'device_user_visibility_id',
             ),
             ));
        $this->addIndex('ei_device_user', 'ei_device_user_owner', array(
             'fields' => 
             array(
              0 => 'owner',
             ),
             ));
        $this->addIndex('ei_driver_browser', 'ei_driver_browser_device_driver_id', array(
             'fields' => 
             array(
              0 => 'device_driver_id',
             ),
             ));
        $this->addIndex('ei_driver_browser', 'ei_driver_browser_browser_type_id', array(
             'fields' => 
             array(
              0 => 'browser_type_id',
             ),
             ));
        $this->addIndex('ei_execution_stack', 'ei_execution_stack_device_id', array(
             'fields' => 
             array(
              0 => 'device_id',
             ),
             ));
    }

    public function down()
    {
        $this->dropForeignKey('ei_device', 'ei_device_device_type_id_ei_device_type_id');
        $this->dropForeignKey('ei_device_driver', 'ei_device_driver_device_id_ei_device_id');
        $this->dropForeignKey('ei_device_driver', 'ei_device_driver_driver_type_id_ei_driver_type_id');
        $this->dropForeignKey('ei_device_user', 'ei_device_user_device_id_ei_device_id');
        $this->dropForeignKey('ei_device_user', 'edei');
        $this->dropForeignKey('ei_device_user', 'ei_device_user_owner_sf_guard_user_id');
        $this->dropForeignKey('ei_driver_browser', 'ei_driver_browser_device_driver_id_ei_device_driver_id');
        $this->dropForeignKey('ei_driver_browser', 'ei_driver_browser_browser_type_id_ei_browser_type_id');
        $this->dropForeignKey('ei_execution_stack', 'ei_execution_stack_device_id_ei_device_id');
        $this->removeIndex('ei_device', 'ei_device_device_type_id', array(
             'fields' => 
             array(
              0 => 'device_type_id',
             ),
             ));
        $this->removeIndex('ei_device_driver', 'ei_device_driver_device_id', array(
             'fields' => 
             array(
              0 => 'device_id',
             ),
             ));
        $this->removeIndex('ei_device_driver', 'ei_device_driver_driver_type_id', array(
             'fields' => 
             array(
              0 => 'driver_type_id',
             ),
             ));
        $this->removeIndex('ei_device_user', 'ei_device_user_device_id', array(
             'fields' => 
             array(
              0 => 'device_id',
             ),
             ));
        $this->removeIndex('ei_device_user', 'ei_device_user_device_user_visibility_id', array(
             'fields' => 
             array(
              0 => 'device_user_visibility_id',
             ),
             ));
        $this->removeIndex('ei_device_user', 'ei_device_user_owner', array(
             'fields' => 
             array(
              0 => 'owner',
             ),
             ));
        $this->removeIndex('ei_driver_browser', 'ei_driver_browser_device_driver_id', array(
             'fields' => 
             array(
              0 => 'device_driver_id',
             ),
             ));
        $this->removeIndex('ei_driver_browser', 'ei_driver_browser_browser_type_id', array(
             'fields' => 
             array(
              0 => 'browser_type_id',
             ),
             ));
        $this->removeIndex('ei_execution_stack', 'ei_execution_stack_device_id', array(
             'fields' => 
             array(
              0 => 'device_id',
             ),
             ));
    }
}